:DOC-CONFIG:
#+property: header-args :mkdirp yes :comments both
#+property: header-args:bash :results output
#+auto_tangle: nil
:END:

* Todos [12/14]

** DONE Dispatcher
** DONE Bootstrap script from dotbot
** DONE Brewfile
** DONE asdf setup script
** DONE Remove .emacs and add script to install chemacs
** DONE move personal laptop bootstrap scripts + config files to alt
** DONE Handle fin alts
** DONE Handle union of personal&gcp
** DONE id_rsa and id_rsa.pub -> encrypt and add?

** Convert bootstrap to just script

** TODO Build pipx json installer
** TODO j2cli (pipx) https://github.com/kolypto/j2cli for templating

*** can use j2cli/jinja for inclusion

** DONE Create a direnv cacher
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-08-23 Tue 11:20]
:END:


** DONE Use https://github.com/casey/just to collect all executable commands global and project-specific?
:LOGBOOK:
- State "DONE"       from              [2022-03-12 Sat 15:37]
:END:

** DONE netstat from apt net-tools
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-02-22 Tue 21:09]
:END:

* Yadm dotfiles

** Get started

Run it like:

~gcloud compute ssh ... --command "bash -s" < get-start.sh~

or better yet:

Use ~gcpvm~ from indigoviolet/gcloud:

~./gcpvm --dotenv-filename deeplearning-1-vm ssh "bash-s" < get-start.sh~

#+begin_src shell :tangle ~/.config/yadm/run-start.sh :shebang "#!/usr/bin/env bash"
GITHUB_PAT='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'
/bin/bash -c "$(curl -fsSL https://$GITHUB_PAT@raw.githubusercontent.com/indigoviolet/dotfiles/master/.config/yadm/start.sh)"
#+end_src


#+begin_src shell :tangle ~/.config/yadm/start.sh :shebang "#!/usr/bin/env bash" :noweb tangle
set_init
<<start.sh>>
#+end_src

*** Get Brew

#+begin_src shell :noweb-ref start.sh
yes '' | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
#+end_src

*** Get yadm

#+begin_src shell :noweb-ref start.sh
brew install yadm
#+end_src

*** Clone dotfiles

https://yadm.io/docs/getting_started

This will clone the repo files into $HOME (as a repo where the git directory
lives in ~.local/share/yadm/repo.git~)

#+begin_src shell :noweb-ref start.sh

# Note that this won't work on a single line: env var replacement happens before the command runs
# You can do
# $>    GITHUB_PAT=foo && (yadm clone ...)
GITHUB_PAT='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'
yadm clone "https://oauth2:$GITHUB_PAT@github.com/indigoviolet/dotfiles.git" --no-bootstrap

read -p 'Set yadm local.class (<personal|fin|gcp>): ' yadmclass
yadm config local.class $yadmclass && yadm alt && yadm bootstrap
#+end_src

**** Transcrypt

We are using Transcrypt to encrypt some keys before checking in. Note that these
files are "##c.personal", so they only need to be encrypted on the "personal"
machine. For remote servers, use ssh forwarding instead.

See https://github.com/elasticdog/transcrypt

#+begin_src shell

## on local machine (where transcrypt is already configured)
yadm transcrypt --display

## or
yadm transcrypt -c aes-256-cbc -p '<Get password from bitwarden>'

## to see encrypted files
yadm transcrypt --list

## Flush credentials (may need --force)
yadm transcrypt -f
#+end_src

***** .gitattributes

Configures which files are encrypted

#+begin_src shell :tangle ~/.gitattributes
.ssh/id_rsa.pub\#\#c.personal filter=crypt diff=crypt merge=crypt
.ssh/id_rsa\#\#c.personal filter=crypt diff=crypt merge=crypt
.config/TabNine/registration_key filter=crypt diff=crypt merge=crypt
.config/rclone/rclone.conf filter=crypt diff=crypt merge=crypt
#+end_src

** Yadm Bootstrap

*** Dispatcher

https://raw.githubusercontent.com/TheLocehiliosan/yadm/master/contrib/bootstrap/bootstrap-in-dir

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap
# Save this file as ~/.config/yadm/bootstrap and make it executable. It will
# execute all executable files (excluding templates and editor backups) in the
# ~/.config/yadm/bootstrap.d directory when run.

set_init

# Directory to look for bootstrap executables in
BOOTSTRAP_D="${BASH_SOURCE[0]}.d"

if [[ ! -d "$BOOTSTRAP_D" ]]; then
    echo "Error: bootstrap directory '$BOOTSTRAP_D' not found" >&2
    exit 1
fi

find -L "$BOOTSTRAP_D" -type f | sort | while IFS= read -r bootstrap; do
    if [[ -x "$bootstrap" && ! "$bootstrap" =~ "##" && ! "$bootstrap" =~ "~$" ]]; then
        if ! "$bootstrap"; then
            echo "Error: bootstrap '$bootstrap' failed" >&2
            exit 1
        fi
    fi
done

#+end_src


*** build deps

for pyenv builds https://github.com/pyenv/pyenv/wiki/common-build-problems (which also affect asdf)

distro_family is not always present and can't be overridden: https://github.com/TheLocehiliosan/yadm/issues/430

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/010-build-deps.sh##distro_family.debian :noweb tangle
<<build-deps.sh>>
#+end_src

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/010-build-deps.sh##distro.Debian :noweb tangle
<<build-deps.sh>>
#+end_src

#+begin_src shell :noweb-ref build-deps.sh
set_init
sudo apt-get update
sudo apt-get install --no-install-recommends -y clang
sudo apt-get install --no-install-recommends -y \
    make build-essential \
    libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev \
    wget llvm \
    libncurses5 libncurses5-dev libncursesw5 \
    xz-utils tk-dev \
    libxml2-dev libffi-dev \
    libxmlsec1-dev liblzma-dev
#+end_src

*** Prezto

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/020-prezto.sh
set -ux
git clone --recursive https://github.com/sorin-ionescu/prezto.git "${HOME}/.zprezto"
git clone --recurse-submodules https://github.com/belak/prezto-contrib "${HOME}/.zprezto/contrib"
cd ~/.zprezto/contrib && git pull
#+end_src


*** zsh login shell

distro_family is not always present and can't be overridden: https://github.com/TheLocehiliosan/yadm/issues/430

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/030-login-shell-zsh.sh##distro_family.debian :noweb tangle
<<login-shell-zsh.sh>>
#+end_src

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/030-login-shell-zsh.sh##distro.Debian :noweb tangle
<<login-shell-zsh.sh>>
#+end_src

#+begin_src shell :noweb-ref login-shell-zsh.sh
set_init

sudo apt-get install --no-install-recommends -y zsh && sudo chsh -s $(which zsh) $(whoami)
#+end_src

To check (Might need to reboot to get it to work on login??):

#+begin_src
grep $(whoami) /etc/passwd
sudo su - $(whoami)
#+end_src

*** Brew

+brew bundle dump --force --describe --casks --file=-+ See [[file:.zshcustom/brew.zsh::function brew-dump-leaves () {][brew-dump-leaves]] instead

just =brew-dump-leaves >! ~/.Brewfile=

Note that .Brewfile is an alt file

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/040-brew.sh
set_init

# install items
if [[ -e ~/.Brewfile ]]; then
	brew bundle --global check || brew bundle --global install -v
fi
#+end_src


*** Asdf

asdf installed with Brew
#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/050-asdf.sh
set -ux

## https://github.com/asdf-vm/asdf/issues/276#issuecomment-907063520
cut -d' ' -f1 .tool-versions | xargs -i asdf plugin add {}

## installs from .tool-versions (which is an alt file)
## the install-poetry installer is default with 1.2, but that is still alpha and has bugs <2022-02-07 Mon>
ASDF_POETRY_INSTALL_URL=https://install.python-poetry.org asdf install
#+end_src

*** Pipx

pipx is installed with Brew

We use .pipx.json which is created by

~just pipx_update_list~

Note that .pipx.json is an alt file

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/060-pipx.sh
set -ux
if [[ -e ~/.pipx.json ]]; then
    for p in $(cat ~/.pipx.json | jq -r '.venvs[].metadata.main_package.package_or_url'); do
        pipx install $p
    done
fi
exit 0
#+end_src

**** Handle injected packages?

Long-term it would be nice to just have a comprehensive way to handle the exported json

For example, we'd like to inject ipykernel into ipython, so that ipykernel
doesn't need to be in every package that wants to use jupyter

#+begin_src shell :results raw drawer
pipx list --json \
     | jq -r '.venvs[].metadata | {main_package: .main_package.package_or_url, injected: (.injected_packages | (keys[] // null))}' \
     | jq -r '"pipx install \(.main_package)", if .injected != null then "pipx inject \(.main_package) \(.injected)" else "" end'
#+end_src

#+RESULTS:
:results:
pipx install black

pipx install black-macchiato

pipx install cleanpy

pipx install cookiecutter

pipx install docker-compose

pipx install flake8

pipx install ipython

pipx install isort

pipx install j2cli[yaml]

pipx install jupyter-core

pipx install notebook

pipx install git+https://github.com/indigoviolet/pomodoro_beeminder

pipx install pre-commit

pipx install pyflakes

pipx install pyment

pipx install termdown

pipx install tox

pipx install youtube-dl

:end:




*** Misc utilities

#+begin_src shell :shebang "#!/usr/bin/env zsh" :tangle ~/.config/yadm/bootstrap.d/070-misc-utilities.zsh##t,e.zsh
set -eux

# https://scriptingosx.com/2019/11/associative-arrays-in-zsh/
declare -A utils
utils=(
    # these come with ubuntu
    [less]=less
    [notify-send]=libnotify-bin
    # brew installs shitloads of dependencies
    [svn]=subversion

{% if yadm.class == "personal" %}
{% endif %}

{% if yadm.class == "gcp" %}
    # not present in brew/Debian
    # [nvtop]=nvtop
    [netstat]=net-tools
{% endif %}
)
for util lib in ${(kv)utils}; do
    (command -v $util &> /dev/null) || sudo apt-get install --no-install-recommends -y $lib
done

## git-info
mkdir -p ~/.local/bin && curl -fsSL https://raw.githubusercontent.com/gitbits/git-info/master/git-info --output ~/.local/bin/git-info && chmod +x ~/.local/bin/git-info

## poetry completion in prezto (https://python-poetry.org/docs/master/#enable-tab-completion-for-bash-fish-or-zsh)
## poetry installed with asdf
poetry completions zsh > ~/.zprezto/modules/completion/external/src/_poetry

## GCM core git credential helper (see https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/)
gcm_latest_release=$(
    curl -s https://api.github.com/repos/GitCredentialManager/git-credential-manager/releases/latest |
        jq -cr '.assets[] | select(.name | contains("deb")) | .browser_download_url')
gcm_deb=$(curl -sw '%{filename_effective}' -LO $gcm_latest_release --output-dir /tmp)
sudo dpkg -i $gcm_deb && rm $gcm_deb -f
git credential-manager-core configure
#+end_src


*** chemacs

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/080-chemacs.sh##c.personal,e.sh
set_init
{ git clone https://github.com/plexus/chemacs.git "${HOME}/.local/chemacs" && $HOME/.local/chemacs/install.sh; } || exit 0
#+end_src

*** Doom emacs

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/090-doom-emacs.sh##c.personal,e.sh
set_init
{ git clone https://github.com/hlissner/doom-emacs "${HOME}/.emacs.d" && $HOME/.emacs.d/bin/doom install; } || exit 0
#+end_src

*** git completion

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/100-git-completion.sh
set -ux
curl -o ${ZSH_CUSTOM_DIR}/git-completion.bash https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
curl -o ${ZSH_CUSTOM_DIR}/_git https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.zsh
#+end_src

*** Leechblock


#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/110-leechblock.sh##c.personal,e.sh
set -ux
{ mkdir -p $HOME/dev && cd $HOME/dev && gh repo clone indigoviolet/LeechBlockNG-chrome && cd LeechBlockNG-chrome && ./install-jquery.sh; } || exit 0
#+end_src

*** paywall

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/120-paywall.sh##c.personal,e.sh
set -ux
{ mkdir -p $HOME/dev && cd $HOME/dev && gh repo clone iamadamdev/bypass-paywalls-chrome; } || exit 0
#+end_src

*** Fonts

On Darwin we would do this with brew

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/130-fonts.sh##c.personal,e.sh
set_init

# Jetbrains Mono patched (https://github.com/ryanoasis/nerd-fonts#option-5-clone-the-repo)
if [[ ! -d  $HOME/dev/nerd-fonts ]]; then
    mkdir -p $HOME/dev
    cd $HOME/dev
    git clone --filter=blob:none --sparse git@github.com:ryanoasis/nerd-fonts
else
    cd $HOME/dev/nerd-fonts
    git fetch
fi

for font in JetBrainsMono/Ligatures IBMPlexMono VictorMono Iosevka; do
    git sparse-checkout add patched-fonts/$font
    ./install.sh "${font%%/*}"
done

# Should we do this via doomscript? https://github.com/doomemacs/doomemacs/issues/6494
echo 'y' | emacs -l ~/.config/doom/init.el --batch -f all-the-icons-install-fonts
#+end_src



*** Gcloud

#+begin_src shell :shebang "#!/usr/bin/env bash" :tangle ~/.config/yadm/bootstrap.d/140-gcloud.sh##c.personal,e.sh
set_init

sudo apt-get install apt-transport-https ca-certificates gnupg
echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
sudo apt-get update && sudo apt-get install --no-install-recommends -y google-cloud-sdk

#+end_src


** zsh secrets
Make ~~/.zsh_secrets~ if you need any secrets that aren't committed. It is sourced via ~secrets.zsh~

** Alt files

We use alt files to

1. change the file wholesale (eg. Brewfile)
2. template the file to have slightly different content (eg. zshrc)

Some files are only useful on a specific class, but we don't bother removing
these or hiding them. They are addressed at point of use - ie. if it is a
zshcustom file, we might use templates to include them correctly in zshrc.
* TODO Paperwm

TODO move to yadm

Checked out in dev/PaperWM and installed.

Currently using virtual-tiling-playground branch: https://github.com/paperwm/PaperWM/issues/303

seems like Gnome 40 breaks some stuff, see https://github.com/PaperWM-community/PaperWM, https://github.com/paperwm/PaperWM/issues/376#issuecomment-1020068861

* Material shell

https://github.com/material-shell/material-shell

looks good on paper, but has some unresolved issues

- seems to be larger than the screen on my display
- installing from source didn't work

* asdf v. brew

- some of the plugins are not reliable (eg. jq plugin), plus there is no Brewfile counterpart
- prefer brew for now, except for nodenv/pyenv replacements and things that can't be installed by brew:
- python, nodejs, yarn, poetry

* Mac

- Cmd+Shift+. to show hidden files
- VSCode: use Cmd+Shift+P to "Install 'code' command in PATH"
* Nemo file manager

https://sourcedigit.com/13826-set-nemo-default-file-manager-ubuntu/

#+begin_src emacs-lisp
xdg-mime default nemo.desktop inode/directory application/x-gnome-saved-search
#+end_src

Hide Nautilus: https://wiki.archlinux.org/title/Desktop_entries#Hide_desktop_entries

See =~/.local/share/applications/org.gnome.Nautilus.desktop=

* Kubuntu


#+begin_src bash
sudo apt-get install kubuntu-desktop
#+end_src

display-manager: https://ubuntuhandbook.org/index.php/2020/07/change-default-display-manager-ubuntu-20-04/

** tiling windows

requires more investigation/configuration to replicate paperwm setup

- https://github.com/kwin-scripts/kwin-tiling
- https://github.com/esjeon/krohnkite (dead?)
- https://github.com/Bismuth-Forge/bismuth --> v3 not yet available in ppas?
* Identify apt manually installed packages

#+begin_src shell :results raw drawer
zcat /var/log/apt/history.log.*.gz | cat - /var/log/apt/history.log | grep -B1 -P 'apt.*?install'
#+end_src

#+RESULTS:
:results:
Start-Date: 2021-04-08  15:26:51
Commandline: apt-get install gnome-session-flashback
--
Start-Date: 2021-04-13  19:21:16
Commandline: apt-get install clangd
--
Start-Date: 2021-04-19  16:01:56
Commandline: apt-get install doxygen
--
Start-Date: 2021-04-20  11:47:16
Commandline: apt-get install fish
--
Start-Date: 2021-03-20  16:11:43
Commandline: apt install python3-bluez bluez libbluetooth-dev python3-dev
--
Start-Date: 2021-03-26  14:22:11
Commandline: apt-get install autoconf automake g++ gcc libpng-dev libpoppler-dev libpoppler-glib-dev libpoppler-private-dev libz-dev make pkg-config
--
Start-Date: 2021-03-26  14:51:06
Commandline: apt-get install --reinstall libpng-dev
--
Start-Date: 2021-02-04  14:41:08
Commandline: apt-get install --no-install-recommends -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
--
Start-Date: 2021-02-10  10:50:52
Commandline: apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
--
Start-Date: 2021-02-10  10:57:36
Commandline: apt-get install docker-ce docker-ce-cli containerd.io
--
Start-Date: 2021-02-10  14:34:22
Commandline: apt-get install nvidia-docker2
--
Start-Date: 2021-02-11  17:48:30
Commandline: apt-get install docker-compose
--
Start-Date: 2021-02-12  12:08:08
Commandline: apt-get install libusb-dev
--
Start-Date: 2022-01-10  14:26:35
Commandline: apt-get install cups-browsed
--
Start-Date: 2022-01-10  14:27:58
Commandline: apt-get install cups-browsed
--
Start-Date: 2022-01-28  15:32:54
Commandline: apt-get install google-cloud-sdk
--
Start-Date: 2021-10-20  17:00:37
Commandline: apt install trimage
--
Start-Date: 2021-10-07  21:03:09
Commandline: apt-get install gpodder
--
Start-Date: 2021-08-15  23:07:09
Commandline: apt-get install speedtest-cli
--
Start-Date: 2021-07-05  18:15:03
Commandline: apt-get install --yes clang
--
Start-Date: 2021-07-05  18:15:07
Commandline: apt-get install --no-install-recommends -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
--
Start-Date: 2021-06-08  18:05:30
Commandline: apt-get install debootstrap
--
Start-Date: 2021-05-18  16:38:00
Commandline: apt-get install clangd
--
Start-Date: 2021-05-18  17:46:07
Commandline: apt-get install clang-format
--
Start-Date: 2021-05-24  13:16:21
Commandline: apt-get install clangd
--
Start-Date: 2021-05-24  16:07:03
Commandline: apt-get install bear
--
Start-Date: 2021-05-24  16:51:36
Commandline: apt-get install nvidia-cuda-toolkit
--
Start-Date: 2021-05-25  16:45:39
Commandline: apt-get install ninja-build
--
Start-Date: 2022-02-02  18:59:27
Commandline: apt install w3m
--
Start-Date: 2022-02-04  16:56:34
Commandline: apt-get install apt-file
--
Start-Date: 2022-02-08  17:17:37
Commandline: apt-get install git-lfs
--
Start-Date: 2022-02-08  17:23:11
Commandline: apt-get install ubuntu-minimal
--
Start-Date: 2022-02-08  17:23:27
Commandline: apt-get install ubuntu-desktop-minimal
--
Start-Date: 2022-02-08  17:24:00
Commandline: apt-get install --no-install-recommends ubuntu-gnome-desktop
--
Start-Date: 2022-02-09  14:20:15
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  14:20:31
Commandline: apt-get install -y -qq docker-ce-rootless-extras
--
Start-Date: 2022-02-09  14:25:12
Commandline: apt-get install --no-install-recommends -y nvidia-docker2
--
Start-Date: 2022-02-09  15:52:43
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  15:53:23
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:23:18
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:23:57
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:24:17
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:30:27
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:31:18
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:31:38
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:31:55
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:32:25
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:33:07
Commandline: apt-get install --no-install-recommends -y uidmap
--
Start-Date: 2022-02-09  17:34:44
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:38:57
Commandline: apt-get install -y -qq apt-transport-https ca-certificates curl
--
Start-Date: 2022-02-09  17:39:45
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:40:20
Commandline: apt-get install -y -qq apt-transport-https ca-certificates curl
--
Start-Date: 2022-02-09  17:42:47
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  18:51:27
Commandline: apt-get install -y -qq apt-transport-https ca-certificates curl
--
Start-Date: 2022-02-09  18:54:17
Commandline: apt-get install --no-install-recommends -y nvidia-docker2
--
Start-Date: 2022-02-10  17:44:53
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-10  18:00:46
Commandline: apt-get install cuda libnvidia-extra-510 nvidia-kernel-common-510 nvidia-kernel-source-510
--
Start-Date: 2022-02-22  21:06:01
Commandline: apt install git-lfs
:end:

* Jupyter/ipython notes

** <2022-02-20 Sun>
Currently we are following this: https://jkinred.github.io/post/using-jupyter/

with emacs-jupyter or ein

and kernels installed from each project via ipykernel installed in each project

it would be better to inject ipykernel into the pipx ipython project, but
currently we don't have a way to reproduce that via pipx.json (but this is easy
to create)
** jupyter_notebook_config.json

#+begin_src shell
jupyter notebook password
#+end_src

will write this file with the hashed password, and new jupyter servers will use
the password

* Switching python version

** install
#+begin_src emacs-lisp
asdf install python 3.9.12
#+end_src

** Edit .tool-versions for gcp and personal

** fix pipx installs

#+begin_src emacs-lisp
pipx reinstall-all
#+end_src

** For each project

- edit :: pyproject.toml, .tool-versions
- update env :: direnv cache:: rm .env && direnv reload
- cleanup :: cleanpy -a .
- reinstall :: rm poetry.lock && poetry install
- check ipykernel ::
* Audio (Pipewire instead of Pulseaudio)

Goal was to get better sound quality in the HSP/HFP mode (with microphone)

https://pipewire-debian.github.io/pipewire-debian/ (Note that Ubuntu uses systemd, /not/ init)
https://askubuntu.com/a/1339897

* Grub: remember last boot choice

https://www.tuxtips.info/linux/how-to-make-grub-remember-my-last-choice

* Hardware
** Keyboard shortcuts

*** Use xev to identify keys being pressed

#+begin_src shell
xev | perl -nle '/keysym\s+.+?,\s+(\w+)/ and print $1'
#+end_src

*** Identify X listener programs


#+begin_src shell
xlsclients -la
#+end_src

*** Check for gnome shortcuts that aren't in the graphical interface, and edit them

https://askubuntu.com/questions/82007/how-do-i-disable-ctrlaltleft-right

#+begin_src shell
gsettings list-recursively | grep <key>
dconf-editor
#+end_src

** Raspberry pi

https://www.tomshardware.com/how-to/raspberry-pi-print-server

*** ssh

ssh pi@raspberry.local or ssh pi@192.168.1.253
passwd: raspberry

*** Static IP

192.168.1.253
added via orbilogin.net (Address Reservation)



*** CUPS

http://192.168.1.253:631


** Kinesis Advantage :ATTACH:
:PROPERTIES:
:ID:       84969743-6640-4c9d-bc73-5fab6ddc939d
:END:

https://kinesis-ergo.com/wp-content/uploads/kb500-qsg.pdf



[[attachment:_20220425_140912screenshot.png]]




- ~=m~ to switch to mac mode
- ~Program+\~ to switch off clicks
- Remapping: ~Prgrm+F12~ to start. Hit source, then destination to copy from source to destination
  + *Swap* ctrl and capslock
  + Copy alt to left shift
  + Copy win to key below X


*** Multimedia keys :ATTACH:

https://superuser.com/a/403765 & https://superuser.com/a/557689

~=n~ to turn on all multimedia keys


[[attachment:_20220802_111046screenshot.png]]


=F3 to toggle state of just F3


*** TODO: try kmonad to make a declarative and perhaps better config

https://github.com/kmonad/kmonad#features

** Wake on usb

*** COMMENT /etc/rc.local

#+BEGIN_SRC shell :tangle "/sudo::/etc/rc.local"
# https://askubuntu.com/questions/848698/wake-up-from-suspend-using-wireless-usb-keyboard-or-mouse-for-any-linux-distro
KB=$(dmesg | grep 'Product: Kinesis Keyboard' | tail -1 | perl -lne '/usb\s(.*?):/; print $1' )
echo enabled > /sys/bus/usb/devices/${KB}/power/wakeup

MOUSE=$(dmesg | grep 'Product: 2.4G Mouse' | tail -1 | perl -lne '/usb\s(.*?):/; print $1' )
echo enabled > /sys/bus/usb/devices/${MOUSE}/power/wakeup
#+END_SRC

Doesn't work on wakeup, seemingly.

*** /etc/udev/rules.d/10-usb-wakeup.rules

https://askubuntu.com/a/874701

This seems to work ([[*Check using:][Check using:]])

#+begin_src shell :results output
lsusb | grep mouse
lsusb | grep Keyboard
lsusb | grep LG
#+end_src

#+RESULTS:
: Bus 001 Device 011: ID 1ea7:0064 SHARKOON Technologies GmbH 2.4GHz Wireless rechargeable vertical mouse [More&Better]
: Bus 001 Device 010: ID 05f3:0007 PI Engineering, Inc. Kinesis Advantage PRO MPC/USB Keyboard
: Bus 001 Device 007: ID 043e:9a39 LG Electronics USA, Inc. LG Monitor Controls


#+BEGIN_SRC shell :tangle "/sudo::/etc/udev/rules.d/10-usb-wakeup.rules"
ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="1ea7", ATTRS{idProduct}=="0064" ATTR{power/wakeup}="enabled"
ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="05f3", ATTRS{idProduct}=="0007" ATTR{power/wakeup}="enabled"
ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="043e", ATTRS{idProduct}=="9a39" ATTR{power/wakeup}="enabled"


# https://askubuntu.com/a/1213465/895483
# - enable wakeup on ALL USB hubs (0-99)
# e.g. ls /sys/bus/usb/devices/usb*
# - rumor is that this step may not be necessary
# on all computers
# (I couldn't figure out how to enable wake on
# only parent hub of the keyboard and mouse.)
# KERNEL=="usb[0-9]|usb[0-9][0-9]", SUBSYSTEM=="usb", DRIVER=="usb", ATTR{power/wakeup}="enabled"

# enable wakeup for all keyboards
# Keyboards are HID class 3 protocol 1 devices.
SUBSYSTEM=="usb", ATTRS{bInterfaceClass}=="03", ATTRS{bInterfaceProtocol}=="01", ATTR{../power/wakeup}="enabled"

# enable wakeup for all mice (button click, not movement)
# Mice are HID class 3 protocol 2 devices.
SUBSYSTEM=="usb", ATTRS{bInterfaceClass}=="03", ATTRS{bInterfaceProtocol}=="02", ATTR{../power/wakeup}="enabled"
#+END_SRC


*** Check using:

#+BEGIN_SRC shell :results output
grep enabled /sys/bus/usb/devices/*/power/wakeup
echo '--'
grep . /sys/bus/usb/devices/*/product
#+END_SRC

#+RESULTS:
#+begin_example
/sys/bus/usb/devices/1-1.2.1.2/power/wakeup:enabled
/sys/bus/usb/devices/1-1.2.1.4/power/wakeup:enabled
/sys/bus/usb/devices/1-1.2.1/power/wakeup:enabled
/sys/bus/usb/devices/usb1/power/wakeup:enabled
/sys/bus/usb/devices/usb2/power/wakeup:enabled
--
/sys/bus/usb/devices/1-1.2.1.4/product:2.4G Mouse
/sys/bus/usb/devices/1-1.2.1/product:Kinesis Keyboard Hub
/sys/bus/usb/devices/1-1.2.3/product:blink(1) mk2
/sys/bus/usb/devices/1-1.2/product:4-Port USB 2.0 Hub
/sys/bus/usb/devices/1-1.3/product:LG Monitor Controls
/sys/bus/usb/devices/1-1/product:4-Port USB 2.0 Hub
/sys/bus/usb/devices/1-7/product:HD Camera
/sys/bus/usb/devices/2-2/product:AX88179
/sys/bus/usb/devices/usb1/product:xHCI Host Controller
/sys/bus/usb/devices/usb2/product:xHCI Host Controller
#+end_example





** Suspend/Hibernate


https://www.linuxuprising.com/2021/08/how-to-enable-hibernation-on-ubuntu.html
https://askubuntu.com/a/1056420

*** find info
#+begin_src bash
swapon --show
#+end_src

#+RESULTS:
: NAME      TYPE SIZE USED PRIO
: /swapfile file  32G   0B   -2


#+begin_src bash :dir "/sudo::/"
findmnt -no UUID -T /swapfile
#+end_src

#+RESULTS:
: 7066f91b-b0f1-44e5-9ba5-5d3d1dfbb4b6

#+begin_src bash :dir "/sudo::/"
filefrag -v /swapfile | awk '$1=="0:" {print substr($4, 1, length($4)-2)}'
#+end_src

#+RESULTS:
: 48513024

*** edit /etc/default/grub
#+begin_src bash :results output
grep GRUB_CMDLINE_LINUX_DEFAULT /etc/default/grub
#+end_src

#+RESULTS:
: GRUB_CMDLINE_LINUX_DEFAULT="quiet splash resume=UUID=7066f91b-b0f1-44e5-9ba5-5d3d1dfbb4b6 resume_offset=48513024 usbcore.autosuspend=-1"

*** create initramfs resume
#+begin_src :tangle "/sudo::/etc/initramfs-tools/conf.d/resume" :comments no
RESUME=UUID=7066f91b-b0f1-44e5-9ba5-5d3d1dfbb4b6 resume_offset=48513024
#+end_src

*** Gnome Extension permissions

https://github.com/arelange/gnome-shell-extension-hibernate-status

#+begin_src conf :tangle "/sudo::/etc/polkit-1/localauthority/10-vendor.d/com.ubuntu.desktop.pkla"
[Enable hibernate in upower]
Identity=unix-user:*
Action=org.freedesktop.upower.hibernate
ResultActive=yes

[Enable hibernate in logind]
Identity=unix-user:*
Action=org.freedesktop.login1.hibernate;org.freedesktop.login1.handle-hibernate-key;org.freedesktop.login1;org.freedesktop.login1.hibernate-multiple-sessions;org.freedesktop.login1.hibernate-ignore-inhibit
ResultActive=yes
#+end_src

*** always suspend-then-hibernate

| sleep.conf Key | Written to       | value                      |
|----------------+------------------+----------------------------|
| *Mode          | /sys/power/disk  | suspend                    |
| *State         | /sys/power/state | disk, freeze, standby, mem |

https://www.kernel.org/doc/html/latest/admin-guide/pm/sleep-states.html#basic-sysfs-interfaces-for-system-suspend-and-hibernation
https://man.archlinux.org/man/sleep.conf.d.5
**** sys/power/state

| /sys/power/state | meaning                     |
|------------------+-----------------------------|
| freeze           | suspend to idle             |
| standby          | standby (ACPI S1)           |
| disk             | suspend to disk = hibernate |
| mem              | see /sys/power/mem_sleep    |

***** sys/power/mem_sleep

- s2idle :: suspend to idle
- shallow :: standby
- deep :: suspend to ram

#+begin_src bash :results output
cat /sys/power/mem_sleep
#+end_src

#+RESULTS:
: s2idle [deep]


**** sys/power/disk

#+begin_src bash :results output
cat /sys/power/disk
#+end_src

#+RESULTS:
: [platform] shutdown reboot suspend test_resume

- platform :: lower power state ACPI S4
- suspend :: hybrid, put system into state from mem_sleep file; if system is
  woken up successfully, discard the hibernation image. else use the image to
  restore


**** sleep.conf

#+begin_src conf :tangle "/sudo::/etc/systemd/sleep.conf"
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.
#
# Entries in this file show the compile time defaults.
# You can change settings by editing this file.
# Defaults can be restored by simply deleting this file.
#
# See systemd-sleep.conf(5) for details

[Sleep]
# https://wiki.archlinux.org/title/Power_management#Suspend_and_hibernate
SuspendMode=suspend
SuspendState=mem               #disk = hybrid-sleep, mem=ram
HibernateMode=suspend
HibernateState=disk

#AllowSuspend=yes
#AllowHibernation=yes
AllowSuspendThenHibernate=yes
AllowHybridSleep=yes
#SuspendMode=
#SuspendState=mem standby freeze
#HibernateMode=platform shutdown
#HibernateState=disk
HybridSleepMode=suspend platform shutdown
HybridSleepState=disk
HibernateDelaySec=60min
#+end_src

**** Make suspend-then-hibernate the standard

#+begin_src bash :results output :dir "/sudo::" :epilogue "echo \"\n\nexit_status: $?\"" :prologue "exec 2>&1"
ls -al /usr/lib/systemd/system/systemd-suspend.service
ls -al /etc/systemd/system/systemd-suspend.service
systemctl status systemd-suspend.service
#+end_src

#+RESULTS:
: -rw-r--r-- 1 root root 545 Jan  9 20:26 /usr/lib/systemd/system/systemd-suspend.service
: lrwxrwxrwx 1 root root 47 Mar 29 14:41 /etc/systemd/system/systemd-suspend.service -> /usr/lib/systemd/system/systemd-suspend.service
: ● systemd-suspend.service - Suspend
:      Loaded: loaded (/lib/systemd/system/systemd-suspend.service; linked; vendor preset: enabled)
:      Active: inactive (dead)
:        Docs: man:systemd-suspend.service(8)
:
:
: exit_status: 3



#+begin_src bash :results output :dir "/sudo::/" :epilogue "echo \"\n\nexit_status: $?\"" :prologue "exec 2>&1"
ln -sf /usr/lib/systemd/system/systemd-suspend-then-hibernate.service /etc/systemd/system/systemd-suspend.service
systemctl daemon-reload
systemctl status systemd-suspend.service
#+end_src

#+RESULTS:

(See below for restore)

#+RESULTS:

***** Restore suspend

#+begin_src bash :results output :dir "/sudo::/" :epilogue "echo \"\n\nexit_status: $?\"" :prologue "exec 2>&1"
ls -al /usr/lib/systemd/system/systemd-suspend.service
ls -al /etc/systemd/system/systemd-suspend.service
systemctl status systemd-suspend.service
#+end_src

#+RESULTS:
: -rw-r--r-- 1 root root 545 Jan  9 20:26 /usr/lib/systemd/system/systemd-suspend.service
: lrwxrwxrwx 1 root root 47 Mar 29 14:41 /etc/systemd/system/systemd-suspend.service -> /usr/lib/systemd/system/systemd-suspend.service

#+begin_src bash :results output :dir "/sudo::/" :epilogue "echo \"\n\nexit_status: $?\"" :prologue "exec 2>&1"
ln -sf /usr/lib/systemd/system/systemd-suspend.service /etc/systemd/system/systemd-suspend.service
systemctl daemon-reload
systemctl status systemd-suspend.service
#+end_src

#+RESULTS:
**** Debugging

- bluetooth issues: =[    9.200358] Bluetooth: hci0: Reading supported features failed (-16)=

https://01.org/blogs/rzhang/2015/best-practice-debug-linux-suspend/hibernate-issues

***** Looking in syslog:

- use ~just debug_suspend~ or ~just debug_hibernate~ to enter a start point with logging, look for the =Debug notice:= line

  other things to look for
- =Mar 29 15:03:15 venky-mxp kernel: [ 4452.342207] PM: suspend exit= : end of suspend
- =Mar 29 15:03:15 venky-mxp systemd-sleep[31022]: System resumed.= begin resume

- ❯ rg 'kernel:.*?PM:' /var/log/syslog | less
- =kernel... sysrq:= if you ended up using Alt-sysrq-REISUB


<2022-03-29 Tue>: Suspend works. Hibernate works, but only with intel gpu - with
nvidia it has failed at least twice.





** Power management (powertop)

- make sure tlp is installed and started
- sudo powertop --auto-tune

*** Less power usage

**** camera/bt

~powertop~ showed that the camera and bluetooth were using significant energy, so
we turn them off using something like:

#+begin_src emacs-lisp
echo 0 | sudo tee /sys/bus/usb/devices/1-7/power/autosuspend_delay_ms
echo auto | sudo tee /sys/bus/usb/devices/1-7/power/control
#+end_src

To automate this, first we set autosuspend_delay_ms in udev:

#+BEGIN_SRC shell :tangle "/sudo::/etc/udev/rules.d/10-usb-autosuspend.rules"
# HD camera (foxlink, SunplusIT)
ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="05c8", ATTRS{idProduct}=="03c0", ATTR{power/autosuspend_delay_ms}="0"
# bluetooth
ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="8087", ATTRS{idProduct}=="0a2b", ATTR{power/autosuspend_delay_ms}="0"
#+END_SRC

Then we add these devices to the USB autosuspend whitelist in TLP:

#+BEGIN_SRC shell :tangle "/sudo::/etc/tlp.d/10-usb-autosuspend.conf"
USB_BLACKLIST_PRINTER=0

# enable charging
USB_BLACKLIST_PHONE=1

USB_WHITELIST="05c8:03c0 8087:0a2b"

#+END_SRC

Check using:

#+begin_src bash :results output :dir "/sudo::/" :epilogue "echo "\n\nexit_status: $?"" :prologue "exec 2>&1"
tlp-stat -u
#+end_src

#+RESULTS:
#+begin_example
--- TLP 1.3.1 --------------------------------------------

+++ USB
Autosuspend         = enabled
Device whitelist    = 05c8:03c0 8087:0a2b
Device blacklist    = (not configured)
Bluetooth blacklist = disabled
Phone blacklist     = enabled
WWAN blacklist      = disabled

Bus 002 Device 001 ID 1d6b:0003 control = auto, autosuspend_delay_ms = -1000 -- Linux Foundation 3.0 root hub (hub)
Bus 001 Device 003 ID 05c8:03c0 control = auto, autosuspend_delay_ms =    0 -- Cheng Uei Precision Industry Co., Ltd (Foxlink) HD Camera (uvcvideo)
Bus 001 Device 002 ID 8087:0a2b control = auto, autosuspend_delay_ms =    0 -- Intel Corp. Bluetooth wireless interface (btusb)
Bus 001 Device 001 ID 1d6b:0002 control = auto, autosuspend_delay_ms = -1000 -- Linux Foundation 2.0 root hub (hub)


#+end_example

**** vm-writeback
#+BEGIN_SRC shell :tangle "/sudo::/etc/tlp.d/20-vm-writeback.conf"
# https://linrunner.de/tlp/faq/powertop.html#why-does-powertop-suggest-more-power-saving-settings-with-tlp-already-running
MAX_LOST_WORK_SECS_ON_BAT=15
#+END_SRC

**** bluetooth
#+BEGIN_SRC shell :tangle "/sudo::/etc/tlp.d/30-bt.conf"
DEVICES_TO_DISABLE_ON_BAT_NOT_IN_USE="bluetooth"
#+END_SRC

**** gpu

#+BEGIN_SRC shell :tangle "/sudo::/etc/tlp.d/40-gpu.conf"
# Set the min/max/turbo frequency for the Intel GPU.
# Possible values depend on your hardware. For available frequencies see
# the output of tlp-stat -g.
# Default: <none>

# INTEL_GPU_MIN_FREQ_ON_AC=0
# INTEL_GPU_MIN_FREQ_ON_BAT=0
# INTEL_GPU_MAX_FREQ_ON_AC=0
INTEL_GPU_MAX_FREQ_ON_BAT=500
# INTEL_GPU_BOOST_FREQ_ON_AC=0
#INTEL_GPU_BOOST_FREQ_ON_BAT=0

#+END_SRC


#+begin_src bash :results output :dir "/sudo::/" :epilogue "echo "\n\nexit_status: $?"" :prologue "exec 2>&1"
tlp-stat -g
#+end_src

#+RESULTS:
#+begin_example
--- TLP 1.3.1 --------------------------------------------

+++ Intel Graphics
/sys/module/i915/parameters/enable_dc        = -1 (use per-chip default)
/sys/module/i915/parameters/enable_fbc       =  1 (enabled)
/sys/module/i915/parameters/enable_psr       =  0 (disabled)
/sys/module/i915/parameters/modeset          = -1 (use per-chip default)

/sys/class/drm/card0/gt_min_freq_mhz         =   300 [MHz]
/sys/class/drm/card0/gt_max_freq_mhz         =  1150 [MHz]
/sys/class/drm/card0/gt_boost_freq_mhz       =  1150 [MHz]
/sys/kernel/debug/dri/0/i915_ring_freq_table: 300 350 400 450 500 550 600 650 700 750 800 850 900 950 1000 1050 1100 1150 [MHz]


#+end_example



* Notes on administration


** Which ubuntu


#+begin_src bash :results output
lsb_release -a
#+end_src

#+RESULTS:
: Distributor ID:	Ubuntu
: Description:	Ubuntu 21.04
: Release:	21.04
: Codename:	hirsute

** Virtual consoles

With Gnome

- C-M-F[1-6]
- tty1 is some kind of graphical (fast user switching?) session
- tty2 is the usual Gnome GUI
- tty3-6 are virtual consoles


** Logs

#+begin_src bash :results output :dir "/sudo::/"
dmesg --level=err
#+end_src

*** What’s in these Linux Logs?
https://www.plesk.com/blog/featured/linux-logs-explained/

- */var/log/syslog* or /var/log/messages: Shows general messages and info
  regarding the system. Basically a data log of all activity throughout the
  global system. Know that everything that happens on Redhat-based systems, like
  CentOS or Rhel, will go in messages. *Whereas for Ubuntu and other Debian
  systems, they go in Syslog*.
- /var/log/boot.log: start-up messages and boot info.
- /var/log/dmesg: a repository for device driver messages. Use dmesg to see
  messages in this file.
- /var/log/kern: keeps in Kernel logs and warning info. Also useful to fix
  problems with custom kernels.

------------

- /var/log/auth.log or /var/log/secure:Keep authentication logs for both
  successful or failed logins, and authentication processes. Storage depends on
  system type. For Debian/Ubuntu, look in /var/log/auth.log. For Redhat/CentrOS,
  go to /var/log/secure.
- /var/log/maillog or var/log/mail.log: is for mail server logs, handy for
  postfix, smtpd, or email-related services info running on your server.
- /var/log/faillog: records info on failed logins. Hence, handy for examining
  potential security breaches like login credential hacks and brute-force
  attacks.
- /var/log/cron: keeps a record of Crond-related messages (cron jobs). Like when
  the cron daemon started a job.
- /var/log/daemon.log: keeps track of running background services but doesn’t
  represent them graphically.
- /var/log/btmp: keeps a note of all failed login attempts.
- /var/log/utmp: current login state by user.
- /var/log/wtmp: record of each login/logout.
- /var/log/lastlog: holds every user’s last login. A binary file you can read
  via lastlog command.
- /var/log/yum.log: holds data on any package installations that used the yum
  command. So you can check if all went well.
- /var/log/httpd/: a directory containing error_log and access_log files of the
  Apache httpd daemon. Every error that httpd comes across is kept in the
  error_log file. Think of memory problems and other system-related errors.
  access_log logs all requests which come in via HTTP.
- /var/log/mysqld.log or /var/log/mysql.log : MySQL log file that records every
  debug, failure and success message, including starting, stopping and
  restarting of MySQL daemon mysqld. The system decides on the directory.
  RedHat, CentOS, Fedora, and other RedHat-based systems use
  /var/log/mariadb/mariadb.log. However, Debian/Ubuntu use
  /var/log/mysql/error.log directory.
- /var/log/pureftp.log: monitors for FTP connections using the pureftp process.
  Find data on every connection, FTP login, and authentication failure here.
- /var/log/spooler: Usually contains nothing, except rare messages from USENET.
- /var/log/xferlog: keeps FTP file transfer sessions. Includes info like file
  names and user-initiated FTP transfers.

** nvidia-powerd.service

In dmesg:

#+begin_example
[FAILED] Failed to start nvidia-powerd service.
See 'systemctl status nvidia-powerd.service' for details.
#+end_example

So I disabled:

#+begin_example
❯ systemctl status nvidia-powerd.service
● nvidia-powerd.service - nvidia-powerd service
     Loaded: loaded (/lib/systemd/system/nvidia-powerd.service; enabled; vendor preset: enabled)
     Active: failed (Result: exit-code) since Tue 2022-03-29 13:48:45 PDT; 32min ago
    Process: 1091 ExecStart=/usr/bin/nvidia-powerd (code=exited, status=1/FAILURE)
   Main PID: 1091 (code=exited, status=1/FAILURE)

Mar 29 13:48:45 venky-mxp systemd[1]: Starting nvidia-powerd service...
Mar 29 13:48:45 venky-mxp /usr/bin/nvidia-powerd[1091]: nvidia-powerd version:1.0(build 1)
Mar 29 13:48:45 venky-mxp /usr/bin/nvidia-powerd[1091]: SBIOS support not found for NVPCF GET_SUPPORTED function
Mar 29 13:48:45 venky-mxp /usr/bin/nvidia-powerd[1091]: No matching GPU found
Mar 29 13:48:45 venky-mxp /usr/bin/nvidia-powerd[1091]: Failed to initialize RM Client
Mar 29 13:48:45 venky-mxp systemd[1]: nvidia-powerd.service: Main process exited, code=exited, status=1/FAILURE
Mar 29 13:48:45 venky-mxp systemd[1]: nvidia-powerd.service: Failed with result 'exit-code'.
Mar 29 13:48:45 venky-mxp systemd[1]: Failed to start nvidia-powerd service.

❯ sudo systemctl disable nvidia-powerd.service
[sudo] password for venky:
Removed /etc/systemd/system/multi-user.target.wants/nvidia-powerd.service.

#+end_example
** List of login sessions

#+begin_src bash :results output :dir "/sudo::/"
tail -n+1 /usr/share/xsessions/*
#+end_src

#+RESULTS:
#+begin_example
==> /usr/share/xsessions/gnome-xorg.desktop <==
[Desktop Entry]
Name=GNOME on Xorg
Comment=This session logs you into GNOME
Exec=/usr/bin/gnome-session --session=gnome
TryExec=/usr/bin/gnome-session
Type=Application
DesktopNames=GNOME
X-GDM-SessionRegisters=true
X-Ubuntu-Gettext-Domain=gnome-session-3.0

==> /usr/share/xsessions/plasma.desktop <==
[Desktop Entry]
Type=XSession
Exec=/usr/bin/startplasma-x11
TryExec=/usr/bin/startplasma-x11
DesktopNames=KDE
Name=Plasma (X11)
Name[ast]=Plasma (X11)
Name[az]=Plasma (X11)
Name[ca]=Plasma (X11)
Name[cs]=Plasma (X11)
Name[de]=Plasma (X11)
Name[en_GB]=Plasma (X11)
Name[es]=Plasma (X11)
Name[eu]=Plasma (X11)
Name[fi]=Plasma (X11)
Name[fr]=Plasma (X11)
Name[hu]=Plasma (X11)
Name[ia]=Plasma (X11)
Name[id]=Plasma (X11)
Name[it]=Plasma (X11)
Name[nl]=Plasma (X11)
Name[nn]=Plasma (X11)
Name[pa]=ਪਲਾਜ਼ਮਾ (X11)
Name[pl]=Plazma (X11)
Name[pt]=Plasma (X11)
Name[pt_BR]=Plasma (X11)
Name[ru]=Plasma (X11)
Name[sk]=Plasma (X11)
Name[sl]=Plasma (X11)
Name[sv]=Plasma (X11)
Name[uk]=Плазма (X11)
Name[vi]=Plasma (X11)
Name[x-test]=xxPlasma (X11)xx
Name[zh_CN]=Plasma (X11)
Comment=Plasma by KDE
Comment[ar]=بلازما كدي
Comment[ast]=Plasma por KDE
Comment[az]=KDE Plasma
Comment[bs]=Plazma od strane KDe
Comment[ca]=Plasma, creat per la comunitat KDE
Comment[ca@valencia]=Plasma, creat per la comunitat KDE
Comment[cs]=Plasma z KDE
Comment[da]=Plasma fra KDE
Comment[de]=Plasma von KDE
Comment[el]=Plasma από το KDE
Comment[en_GB]=Plasma by KDE
Comment[es]=Plasma, por KDE
Comment[et]=KDE Plasma
Comment[eu]=KDEren Plasma
Comment[fi]=Plasma KDE:ltä
Comment[fr]=Plasma, par KDE
Comment[gl]=Plasma, fornecido por KDE.
Comment[he]=פלזמה באמצעות KDE
Comment[hu]=Plasma a KDE-től
Comment[ia]=Plasma per KDE
Comment[id]=Plasma oleh KDE
Comment[is]=Plasma frá KDE
Comment[it]=Plasma di KDE
Comment[ja]=Plasma by KDE
Comment[ko]=KDE Plasma
Comment[lt]=Plasma pagal KDE
Comment[nb]=Plasma av KDE
Comment[nds]=Plasma vun KDE
Comment[nl]=Plasma door KDE
Comment[nn]=Plasma frå KDE
Comment[pa]=KDE ਵਲੋਂ ਪਲਾਜ਼ਮਾ
Comment[pl]=Plazma dzięki KDE
Comment[pt]=Plasma do KDE
Comment[pt_BR]=Plasma do KDE
Comment[ro]=Plasma, de către KDE
Comment[ru]=KDE Plasma
Comment[sk]=Plasma od KDE
Comment[sl]=KDE Plasma
Comment[sr]=Плазма од КДЕ‑а
Comment[sr@ijekavian]=Плазма од КДЕ‑а
Comment[sr@ijekavianlatin]=Plasma od KDE‑a
Comment[sr@latin]=Plasma od KDE‑a
Comment[sv]=Plasma av KDE
Comment[tg]=Plasma аз ҷониби KDE
Comment[tr]=KDE Plasma
Comment[uk]=Плазма KDE
Comment[vi]=Plasma, do KDE
Comment[x-test]=xxPlasma by KDExx
Comment[zh_CN]=KDE Plasma
Comment[zh_TW]=Plasma by KDE
X-KDE-PluginInfo-Version=5.21.4

==> /usr/share/xsessions/ubuntu.desktop <==
[Desktop Entry]
Name=Ubuntu
Comment=This session logs you into Ubuntu
Exec=env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session --session=ubuntu
TryExec=/usr/bin/gnome-shell
Type=Application
DesktopNames=ubuntu:GNOME
X-GDM-SessionRegisters=true
X-Ubuntu-Gettext-Domain=gnome-session-3.0

==> /usr/share/xsessions/ubuntu-xorg.desktop <==
[Desktop Entry]
Name=Ubuntu on Xorg
Comment=This session logs you into Ubuntu
Exec=env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session --session=ubuntu
TryExec=/usr/bin/gnome-shell
Type=Application
DesktopNames=ubuntu:GNOME
X-GDM-SessionRegisters=true
X-Ubuntu-Gettext-Domain=gnome-session-3.0
#+end_example

--session=<gnome|ubuntu> refers to:

#+begin_src bash :results output :dir "/sudo::/"
ls /usr/share/gnome-session/sessions
#+end_src

#+RESULTS:
: exwm-gnome-flashback.session  gnome-initial-setup.session  gnome.session
: gnome-dummy.session	      gnome-login.session	   ubuntu.session
** USB devices

- ~sudo usb-devices~ is like ~lsusb~ but with better/more info

#+begin_src bash
lsusb | grep HD | perl -lne '/([0-9a-f]{4}):([0-9a-f]{4})/; print "$1"' | grep -f - /sys/bus/usb/devices/*/idVendor
#+end_src

- Power management of usb devices ~tlp-stat -u~
