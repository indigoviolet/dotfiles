:DOC-CONFIG:
#+property: header-args :mkdirp yes :comments both
:END:

* Todos [10/13]

** DONE Dispatcher
** DONE Bootstrap script from dotbot
** DONE Brewfile
** DONE asdf setup script
** DONE Remove .emacs and add script to install chemacs
** DONE move personal laptop bootstrap scripts + config files to alt
** DONE Handle fin alts
** DONE Handle union of personal&gcp
** DONE id_rsa and id_rsa.pub -> encrypt and add?
** TODO Build pipx json installer
** TODO j2cli (pipx) https://github.com/kolypto/j2cli for templating

** TODO Create a direnv cacher

- check if .envrc.cache exists and is newer than [date] and newer than [list of files]
- if so, ok, load that cache
- else, recreate it


** DONE netstat from apt net-tools
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-02-22 Tue 21:09]
:END:

* Yadm dotfiles

** Get started

This will generate https://github.com/indigoviolet/dotfiles/raw/master/.config/yadm/start.sh (but we can't make a raw permalink to it since the repo is private).

Run it like:

#+begin_src shell
/bin/bash -c "$(curl -fsSL <Get URL by visiting https://github.com/indigoviolet/dotfiles/raw/master/.config/yadm/start.sh>)"
#+end_src


#+begin_src shell :tangle ~/.config/yadm/start.sh :shebang "#!/bin/bash" :noweb tangle
set -eux
<<start.sh>>
#+end_src

*** Get Brew

#+begin_src shell :noweb-ref start.sh
yes '' | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
#+end_src

*** Get yadm

#+begin_src shell :noweb-ref start.sh
brew install yadm
#+end_src

*** Clone dotfiles

https://yadm.io/docs/getting_started

This will clone the repo files into $HOME (as a repo where the git directory
lives in ~.local/share/yadm/repo.git~)

#+begin_src shell :noweb-ref start.sh
yadm clone git@github.com:indigoviolet/dotfiles.git --no-bootstrap

read -p 'Set yadm local.class (<personal|fin|gcp>): ' yadmclass
yadm config local.class $yadmclass && yadm alt && yadm bootstrap
#+end_src

**** Transcrypt

We are using Transcrypt to encrypt some keys before checking in. Note that these
files are "##c.personal", so they only need to be encrypted on the "personal"
machine. For remote servers, use ssh forwarding instead.

See https://github.com/elasticdog/transcrypt

#+begin_src shell

## on local machine (where transcrypt is already configured)
yadm transcrypt --display

## or
yadm transcrypt -c aes-256-cbc -p '<Get password from bitwarden>'

## to see encrypted files
yadm transcrypt --list

## Flush credentials (may need --force)
yadm transcrypt -f
#+end_src

***** .gitattributes

Configures which files are encrypted

#+begin_src shell :tangle ~/.gitattributes
.ssh/id_rsa.pub\#\#c.personal filter=crypt diff=crypt merge=crypt
.ssh/id_rsa\#\#c.personal filter=crypt diff=crypt merge=crypt
#+end_src

** Yadm Bootstrap

*** Dispatcher

https://raw.githubusercontent.com/TheLocehiliosan/yadm/master/contrib/bootstrap/bootstrap-in-dir

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap
# Save this file as ~/.config/yadm/bootstrap and make it executable. It will
# execute all executable files (excluding templates and editor backups) in the
# ~/.config/yadm/bootstrap.d directory when run.

set -eu

# Directory to look for bootstrap executables in
BOOTSTRAP_D="${BASH_SOURCE[0]}.d"

if [[ ! -d "$BOOTSTRAP_D" ]]; then
    echo "Error: bootstrap directory '$BOOTSTRAP_D' not found" >&2
    exit 1
fi

find -L "$BOOTSTRAP_D" -type f | sort | while IFS= read -r bootstrap; do
    if [[ -x "$bootstrap" && ! "$bootstrap" =~ "##" && ! "$bootstrap" =~ "~$" ]]; then
        if ! "$bootstrap"; then
            echo "Error: bootstrap '$bootstrap' failed" >&2
            exit 1
        fi
    fi
done

#+end_src


*** build deps

for pyenv builds https://github.com/pyenv/pyenv/wiki/common-build-problems (which also affect asdf)

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/010-build-deps.sh##distro.Ubuntu
set -eux
sudo apt-get update
sudo apt-get install --no-install-recommends -y clang
sudo apt-get install --no-install-recommends -y \
    make build-essential \
    libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev \
    wget llvm \
    libncurses5-dev \
    xz-utils tk-dev \
    libxml2-dev libffi-dev \
    libxmlsec1-dev liblzma-dev
#+end_src

*** Prezto

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/020-prezto.sh
set -ux
git clone --recursive https://github.com/sorin-ionescu/prezto.git "${HOME}/.zprezto"
git clone --recurse-submodules https://github.com/belak/prezto-contrib "${HOME}/.zprezto/contrib"
cd ~/.zprezto/contrib && git pull
#+end_src


*** zsh login shell

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/030-login-shell-zsh.sh##distro.Ubuntu
set -eux

sudo apt-get install --no-install-recommends -y zsh && sudo chsh -s $(which zsh) $(whoami)
#+end_src

To check:

#+begin_src
grep $(whoami) /etc/passwd
sudo su - $(whoami)
#+end_src

*** Brew

+brew bundle dump --force --describe --casks --file=-+ See [[file:.zshcustom/brew.zsh::function brew-dump-leaves () {][brew-dump-leaves]] instead

=brew-dump-leaves >! ~/.Brewfile=

Note that .Brewfile is an alt file

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/040-brew.sh
set -eux

# install items
if [[ -e ~/.Brewfile ]]; then
	brew bundle --global check || brew bundle --global install -v
fi
#+end_src


*** Asdf

asdf installed with Brew
#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/050-asdf.sh
set -ux

## https://github.com/asdf-vm/asdf/issues/276#issuecomment-907063520
cut -d' ' -f1 .tool-versions | xargs -i asdf plugin add {}

## installs from .tool-versions (which is an alt file)
## the install-poetry installer is default with 1.2, but that is still alpha and has bugs <2022-02-07 Mon>
ASDF_POETRY_INSTALL_URL=https://install.python-poetry.org asdf install
#+end_src

*** Pipx

pipx is installed with Brew

We use .pipx.json which is created by

=pipx list --json > ~/.pipx.json=

Note that .pipx.json is an alt file

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/060-pipx.sh
set -ux
if [[ -e ~/.pipx.json ]]; then
    for p in $(cat ~/.pipx.json | jq -r '.venvs[].metadata.main_package.package_or_url'); do
        pipx install $p
    done
fi
exit 0
#+end_src

**** Handle injected packages?

Long-term it would be nice to just have a comprehensive way to handle the exported json

For example, we'd like to inject ipykernel into ipython, so that ipykernel
doesn't need to be in every package that wants to use jupyter

#+begin_src shell :results raw drawer
pipx list --json \
     | jq -r '.venvs[].metadata | {main_package: .main_package.package_or_url, injected: (.injected_packages | (keys[] // null))}' \
     | jq -r '"pipx install \(.main_package)", if .injected != null then "pipx inject \(.main_package) \(.injected)" else "" end'
#+end_src

#+RESULTS:
:results:
pipx install black

pipx install black-macchiato

pipx install cleanpy

pipx install cookiecutter

pipx install docker-compose

pipx install flake8

pipx install ipython

pipx install isort

pipx install j2cli[yaml]

pipx install jupyter-core

pipx install notebook

pipx install git+https://github.com/indigoviolet/pomodoro_beeminder

pipx install pre-commit

pipx install pyflakes

pipx install pyment

pipx install termdown

pipx install tox

pipx install youtube-dl

:end:




*** Misc utilities

#+begin_src shell :shebang "#!/bin/zsh" :tangle ~/.config/yadm/bootstrap.d/070-misc-utilities.zsh##t,e.zsh
set -eux

# https://scriptingosx.com/2019/11/associative-arrays-in-zsh/
declare -A utils
utils=(
    # these come with ubuntu
    [less]=less
    [notify-send]=libnotify-bin
    # brew installs shitloads of dependencies
    [svn]=subversion

{% if yadm.class == "personal" %}
{% endif %}

{% if yadm.class == "gcp" %}
    # not present in brew
    [nvtop]=nvtop
    [netstat]=net-tools
{% endif %}
)
for util lib in ${(kv)utils}; do
    (command -v $util &> /dev/null) || sudo apt-get install --no-install-recommends -y $lib
done

## git-info
mkdir -p ~/.local/bin && curl -fsSL https://raw.githubusercontent.com/gitbits/git-info/master/git-info --output ~/.local/bin/git-info && chmod +x ~/.local/bin/git-info

## poetry completion in prezto (https://python-poetry.org/docs/master/#enable-tab-completion-for-bash-fish-or-zsh)
## poetry installed with asdf
poetry completions zsh > ~/.zprezto/modules/completion/external/src/_poetry

## GCM core git credential helper (see https://blog.djnavarro.net/posts/2021-08-08_git-credential-helpers/)
gcm_latest_release=$(
    curl -s https://api.github.com/repos/GitCredentialManager/git-credential-manager/releases/latest |
        jq -cr '.assets[] | select(.content_type | contains("deb")) | .browser_download_url')
gcm_deb=$(curl -sw '%{filename_effective}' -LO $gcm_latest_release --output-dir /tmp)
sudo dpkg -i $gcm_deb && rm $gcm_deb -f
#+end_src


*** chemacs

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/080-chemacs.sh##c.personal,e.sh
set -eux
{ git clone https://github.com/plexus/chemacs.git "${HOME}/.local/chemacs" && $HOME/.local/chemacs/install.sh; } || exit 0
#+end_src

*** Doom emacs

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/090-doom-emacs.sh##c.personal,e.sh
set -eux
{ git clone https://github.com/hlissner/doom-emacs "${HOME}/.local/doom-emacs" && EMACSDIR=$HOME/.local/doom-emacs/ $HOME/.local/doom-emacs/bin/doom install; } || exit 0
#+end_src

*** git completion

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/100-git-completion.sh
set -ux
curl -o ${ZSH_CUSTOM_DIR}/git-completion.bash https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
curl -o ${ZSH_CUSTOM_DIR}/_git https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.zsh
#+end_src

*** Leechblock


#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/110-leechblock.sh##c.personal,e.sh
set -ux
{ mkdir -p $HOME/dev && cd $HOME/dev && gh repo clone indigoviolet/LeechBlockNG-chrome && cd LeechBlockNG-chrome && ./install-jquery.sh; } || exit 0
#+end_src

*** paywall

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/120-paywall.sh##c.personal,e.sh
set -ux
{ mkdir -p $HOME/dev && cd $HOME/dev && gh repo clone iamadamdev/bypass-paywalls-chrome; } || exit 0
#+end_src

*** Fonts

On Darwin we would do this with brew

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/130-fonts.sh##c.personal,e.sh
set -eux

# Jetbrains Mono patched (https://github.com/ryanoasis/nerd-fonts#option-5-clone-the-repo)
mkdir -p $HOME/dev && cd $HOME/dev && git clone --filter=blob:none --sparse git@github.com:ryanoasis/nerd-fonts
cd $HOME/dev/nerd-fonts && git sparse-checkout add patched-fonts/JetBrainsMono
./install.sh JetBrainsMono
#+end_src

*** Gcloud

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/140-gcloud.sh##c.personal,e.sh
set -eux

sudo apt-get install apt-transport-https ca-certificates gnupg
echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
sudo apt-get update && sudo apt-get install --no-install-recommends -y google-cloud-sdk

#+end_src


** zsh secrets
Make ~~/.zsh_secrets~ if you need any secrets that aren't committed. It is sourced via ~secrets.zsh~

** Alt files

We use alt files to

1. change the file wholesale (eg. Brewfile)
2. template the file to have slightly different content (eg. zshrc)

Some files are only useful on a specific class, but we don't bother removing
these or hiding them. They are addressed at point of use - ie. if it is a
zshcustom file, we might use templates to include them correctly in zshrc.
* Jupyter/ipython notes

** <2022-02-20 Sun>
Currently we are following this: https://jkinred.github.io/post/using-jupyter/

with emacs-jupyter or ein

and kernels installed from each project via ipykernel installed in each project

it would be better to inject ipykernel into the pipx ipython project, but
currently we don't have a way to reproduce that via pipx.json (but this is easy
to create)


* Paperwm

Checked out in dev/PaperWM and installed.

Currently using virtual-tiling-playground branch: https://github.com/paperwm/PaperWM/issues/303

* Wake on usb

** COMMENT /etc/rc.local

#+BEGIN_SRC shell :tangle "/sudo::/etc/rc.local"
# https://askubuntu.com/questions/848698/wake-up-from-suspend-using-wireless-usb-keyboard-or-mouse-for-any-linux-distro
KB=$(dmesg | grep 'Product: Kinesis Keyboard' | tail -1 | perl -lne '/usb\s(.*?):/; print $1' )
echo enabled > /sys/bus/usb/devices/${KB}/power/wakeup

MOUSE=$(dmesg | grep 'Product: 2.4G Mouse' | tail -1 | perl -lne '/usb\s(.*?):/; print $1' )
echo enabled > /sys/bus/usb/devices/${MOUSE}/power/wakeup
#+END_SRC

Doesn't work on wakeup, seemingly.

** /etc/udev/rules.d/10-usb-wakeup.rules

https://askubuntu.com/a/874701

This seems to work ([[*Check using:][Check using:]])

#+begin_src shell :results output
lsusb | grep mouse
lsusb | grep Keyboard
lsusb | grep LG
#+end_src

#+RESULTS:
: Bus 001 Device 044: ID 1ea7:0064 SHARKOON Technologies GmbH 2.4GHz Wireless rechargeable vertical mouse [More&Better]
: Bus 001 Device 045: ID 05f3:0007 PI Engineering, Inc. Kinesis Advantage PRO MPC/USB Keyboard
: Bus 001 Device 043: ID 043e:9a39 LG Electronics USA, Inc. LG Monitor Controls
: Bus 001 Device 042: ID 05f3:0081 PI Engineering, Inc. Kinesis Integrated Hub
: Bus 001 Device 041: ID 0bda:5411 Realtek Semiconductor Corp. RTS5411 Hub
: Bus 001 Device 040: ID 0bda:5411 Realtek Semiconductor Corp. RTS5411 Hub


#+BEGIN_SRC shell :tangle "/sudo::/etc/udev/rules.d/10-usb-wakeup.rules"
ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="1ea7", ATTRS{idProduct}=="0064" ATTR{power/wakeup}="enabled"
ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="05f3", ATTRS{idProduct}=="0007" ATTR{power/wakeup}="enabled"
ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="043e", ATTRS{idProduct}=="9a39" ATTR{power/wakeup}="enabled"
#+END_SRC


** Check using:

#+BEGIN_SRC shell :results output
grep enabled /sys/bus/usb/devices/*/power/wakeup
echo '--'
grep . /sys/bus/usb/devices/*/product | grep -v 'product:00'
#+END_SRC

#+RESULTS:
#+begin_example
/sys/bus/usb/devices/1-3.1.3/power/wakeup:enabled
/sys/bus/usb/devices/1-3.2.2/power/wakeup:enabled
--
/sys/bus/usb/devices/1-3.1.3/product:2.4G Mouse
/sys/bus/usb/devices/1-3.1/product:4-Port USB 2.0 Hub
/sys/bus/usb/devices/1-3.2/product:Kinesis Keyboard Hub
/sys/bus/usb/devices/1-3.3/product:LG Monitor Controls
/sys/bus/usb/devices/1-3/product:4-Port USB 2.0 Hub
/sys/bus/usb/devices/1-7/product:HD Camera
/sys/bus/usb/devices/2-2/product:AX88179
/sys/bus/usb/devices/usb1/product:xHCI Host Controller
/sys/bus/usb/devices/usb2/product:xHCI Host Controller
/sys/bus/usb/devices/usb3/product:xHCI Host Controller
/sys/bus/usb/devices/usb4/product:xHCI Host Controller
#+end_example





* Kinesis Advantage :ATTACH:
:PROPERTIES:
:ID:       84969743-6640-4c9d-bc73-5fab6ddc939d
:END:

https://kinesis-ergo.com/wp-content/uploads/kb500-qsg.pdf


[[attachment:_20220214_175742screenshot.png]]



- ~=m~ to switch to mac mode
- ~Program+\~ to switch off clicks
- Remapping: ~Prgrm+F12~ to start. Hit source, then destination to copy from source to destination
  + *Swap* ctrl and capslock
  + Copy alt to left shift
  + Copy win to key below X

* asdf v. brew

- some of the plugins are not reliable (eg. jq plugin), plus there is no Brewfile counterpart
- prefer brew for now, except for nodenv/pyenv replacements and things that can't be installed by brew:
- python, nodejs, yarn, poetry

* Identify apt manually installed packages

#+begin_src shell :results raw drawer
zcat /var/log/apt/history.log.*.gz | cat - /var/log/apt/history.log | grep -B1 -P 'apt.*?install'
#+end_src

#+RESULTS:
:results:
Start-Date: 2021-04-08  15:26:51
Commandline: apt-get install gnome-session-flashback
--
Start-Date: 2021-04-13  19:21:16
Commandline: apt-get install clangd
--
Start-Date: 2021-04-19  16:01:56
Commandline: apt-get install doxygen
--
Start-Date: 2021-04-20  11:47:16
Commandline: apt-get install fish
--
Start-Date: 2021-03-20  16:11:43
Commandline: apt install python3-bluez bluez libbluetooth-dev python3-dev
--
Start-Date: 2021-03-26  14:22:11
Commandline: apt-get install autoconf automake g++ gcc libpng-dev libpoppler-dev libpoppler-glib-dev libpoppler-private-dev libz-dev make pkg-config
--
Start-Date: 2021-03-26  14:51:06
Commandline: apt-get install --reinstall libpng-dev
--
Start-Date: 2021-02-04  14:41:08
Commandline: apt-get install --no-install-recommends -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
--
Start-Date: 2021-02-10  10:50:52
Commandline: apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
--
Start-Date: 2021-02-10  10:57:36
Commandline: apt-get install docker-ce docker-ce-cli containerd.io
--
Start-Date: 2021-02-10  14:34:22
Commandline: apt-get install nvidia-docker2
--
Start-Date: 2021-02-11  17:48:30
Commandline: apt-get install docker-compose
--
Start-Date: 2021-02-12  12:08:08
Commandline: apt-get install libusb-dev
--
Start-Date: 2022-01-10  14:26:35
Commandline: apt-get install cups-browsed
--
Start-Date: 2022-01-10  14:27:58
Commandline: apt-get install cups-browsed
--
Start-Date: 2022-01-28  15:32:54
Commandline: apt-get install google-cloud-sdk
--
Start-Date: 2021-10-20  17:00:37
Commandline: apt install trimage
--
Start-Date: 2021-10-07  21:03:09
Commandline: apt-get install gpodder
--
Start-Date: 2021-08-15  23:07:09
Commandline: apt-get install speedtest-cli
--
Start-Date: 2021-07-05  18:15:03
Commandline: apt-get install --yes clang
--
Start-Date: 2021-07-05  18:15:07
Commandline: apt-get install --no-install-recommends -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
--
Start-Date: 2021-06-08  18:05:30
Commandline: apt-get install debootstrap
--
Start-Date: 2021-05-18  16:38:00
Commandline: apt-get install clangd
--
Start-Date: 2021-05-18  17:46:07
Commandline: apt-get install clang-format
--
Start-Date: 2021-05-24  13:16:21
Commandline: apt-get install clangd
--
Start-Date: 2021-05-24  16:07:03
Commandline: apt-get install bear
--
Start-Date: 2021-05-24  16:51:36
Commandline: apt-get install nvidia-cuda-toolkit
--
Start-Date: 2021-05-25  16:45:39
Commandline: apt-get install ninja-build
--
Start-Date: 2022-02-02  18:59:27
Commandline: apt install w3m
--
Start-Date: 2022-02-04  16:56:34
Commandline: apt-get install apt-file
--
Start-Date: 2022-02-08  17:17:37
Commandline: apt-get install git-lfs
--
Start-Date: 2022-02-08  17:23:11
Commandline: apt-get install ubuntu-minimal
--
Start-Date: 2022-02-08  17:23:27
Commandline: apt-get install ubuntu-desktop-minimal
--
Start-Date: 2022-02-08  17:24:00
Commandline: apt-get install --no-install-recommends ubuntu-gnome-desktop
--
Start-Date: 2022-02-09  14:20:15
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  14:20:31
Commandline: apt-get install -y -qq docker-ce-rootless-extras
--
Start-Date: 2022-02-09  14:25:12
Commandline: apt-get install --no-install-recommends -y nvidia-docker2
--
Start-Date: 2022-02-09  15:52:43
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  15:53:23
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:23:18
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:23:57
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:24:17
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:30:27
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:31:18
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:31:38
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:31:55
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:32:25
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:33:07
Commandline: apt-get install --no-install-recommends -y uidmap
--
Start-Date: 2022-02-09  17:34:44
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:38:57
Commandline: apt-get install -y -qq apt-transport-https ca-certificates curl
--
Start-Date: 2022-02-09  17:39:45
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  17:40:20
Commandline: apt-get install -y -qq apt-transport-https ca-certificates curl
--
Start-Date: 2022-02-09  17:42:47
Commandline: apt-get install -y --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-09  18:51:27
Commandline: apt-get install -y -qq apt-transport-https ca-certificates curl
--
Start-Date: 2022-02-09  18:54:17
Commandline: apt-get install --no-install-recommends -y nvidia-docker2
--
Start-Date: 2022-02-10  17:44:53
Commandline: apt-get install -y -qq --no-install-recommends docker-ce-cli docker-scan-plugin docker-ce
--
Start-Date: 2022-02-10  18:00:46
Commandline: apt-get install cuda libnvidia-extra-510 nvidia-kernel-common-510 nvidia-kernel-source-510
--
Start-Date: 2022-02-22  21:06:01
Commandline: apt install git-lfs
:end:

* Keyboard shortcuts

** Use xev to identify keys being pressed

#+begin_src shell
xev | perl -nle '/keysym\s+.+?,\s+(\w+)/ and print $1'
#+end_src

** Identify X listener programs


#+begin_src shell
xlsclients -la
#+end_src

** Check for gnome shortcuts that aren't in the graphical interface, and edit them

https://askubuntu.com/questions/82007/how-do-i-disable-ctrlaltleft-right

#+begin_src shell
gsettings list-recursively | grep <key>
dconf-editor
#+end_src


* Mac

- Cmd+Shift+. to show hidden files
- VSCode: use Cmd+Shift+P to "Install 'code' command in PATH"
