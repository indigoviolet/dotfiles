:DOC-CONFIG:
#+property: header-args :mkdirp yes :comments both
:END:

- [X] confirmation from brew
- [X] brew shell env
- [X] yadm bootstrap on clone [n]
- [X] Brewfile
- [X] yadm config local.class gcp
- [X] yadm alt
- [X] yadm bootstrap
- [X] EDITOR is not set; uses nano

* Yadm dotfiles

** Get started

This will generate https://github.com/indigoviolet/dotfiles/raw/master/.config/yadm/start.sh (but we can't make a raw permalink to it since the repo is private).

Run it like:

#+begin_src shell
/bin/bash -c "$(curl -fsSL <Get URL by visiting https://github.com/indigoviolet/dotfiles/raw/master/.config/yadm/start.sh>)"
#+end_src


#+begin_src shell :tangle ~/.config/yadm/start.sh :shebang "#!/bin/bash" :noweb tangle
set -eux
<<start.sh>>
#+end_src

*** Get Brew

#+begin_src shell :noweb-ref start.sh
yes '' | /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
#+end_src

*** Get yadm

#+begin_src shell :noweb-ref start.sh
brew install yadm
#+end_src

*** Clone dotfiles

https://yadm.io/docs/getting_started

This will clone the repo files into $HOME (as a repo where the git directory
lives in ~.local/share/yadm/repo.git~)

#+begin_src shell :noweb-ref start.sh
yadm clone git@github.com:indigoviolet/dotfiles.git --no-bootstrap

read -p 'Set yadm local.class (<personal|fin|gcp>): ' yadmclass
yadm config local.class $yadmclass && yadm alt && yadm bootstrap
#+end_src

** Yadm Bootstrap

*** Dispatcher

https://raw.githubusercontent.com/TheLocehiliosan/yadm/master/contrib/bootstrap/bootstrap-in-dir

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap
# Save this file as ~/.config/yadm/bootstrap and make it executable. It will
# execute all executable files (excluding templates and editor backups) in the
# ~/.config/yadm/bootstrap.d directory when run.

set -eu

# Directory to look for bootstrap executables in
BOOTSTRAP_D="${BASH_SOURCE[0]}.d"

if [[ ! -d "$BOOTSTRAP_D" ]]; then
    echo "Error: bootstrap directory '$BOOTSTRAP_D' not found" >&2
    exit 1
fi

find -L "$BOOTSTRAP_D" -type f | sort | while IFS= read -r bootstrap; do
    if [[ -x "$bootstrap" && ! "$bootstrap" =~ "##" && ! "$bootstrap" =~ "~$" ]]; then
        if ! "$bootstrap"; then
            echo "Error: bootstrap '$bootstrap' failed" >&2
            exit 1
        fi
    fi
done

#+end_src


*** build deps

for pyenv builds https://github.com/pyenv/pyenv/wiki/common-build-problems (which also affect asdf)

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/010-build-deps.sh##distro.Ubuntu
set -eux
sudo apt-get update
sudo apt-get install --yes clang
sudo apt-get install --no-install-recommends -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
#+end_src

*** zsh login shell

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/011-login-shell-zsh.sh##distro.Ubuntu
set -eux

sudo apt-get install --yes zsh && sudo chsh -s /usr/bin/zsh
#+end_src

*** Brew

=brew bundle dump --force --describe --casks --file=-==

Note that .Brewfile is an alt file

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/020-brew.sh
set -eux

# install items
if [[ -e ~/.Brewfile ]]; then
	brew bundle --global check || brew bundle --global install -v
fi
#+end_src

*** Asdf

asdf installed with Brew

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/030-asdf.sh
set -ux

## https://github.com/asdf-vm/asdf/issues/276#issuecomment-907063520
cut -d' ' -f1 .tool-versions | xargs -i asdf plugin add  {}

## installs from .tool-versions (which is an alt file)
asdf install
#+end_src

*** Pipx

pipx is installed with Brew

We use .pipx.json which is created by

=pipx list --json > ~/.pipx.json=

Note that .pipx.json is an alt file

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/040-pipx.sh
set -ux
if [[ -e ~/.pipx.json ]]; then
    for p in $(cat ~/.pipx.json | jq -r '.venvs[].metadata.main_package.package_or_url'); do
        pipx install $p
    done
fi
exit 0
#+end_src

*** Prezto

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/050-prezto.sh
set -ux
git clone --recursive https://github.com/sorin-ionescu/prezto.git "${HOME}/.zprezto"
git clone --recurse-submodules https://github.com/belak/prezto-contrib "${HOME}/.zprezto/contrib"
cd ~/.zprezto/contrib && git pull
#+end_src


*** Misc utilities

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/070-misc-utilities.sh##distro.Ubuntu,e.sh
set -eux
(command -v less &> /dev/null) || sudo apt-get install --yes less
(command -v htop &> /dev/null) || sudo apt-get install --yes htop
(command -v notify-send &> /dev/null) || sudo apt-get install --yes libnotify-bin
# this is installed with apt-get because brew installs a shitload of dependencies
(command -v svn &>/dev/null) || sudo apt-get install --yes subversion
curl https://raw.githubusercontent.com/gitbits/git-info/master/git-info --output ~/.local/bin/git-info && chmod +x ~/.local/bin/git-info
#+end_src


*** chemacs

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/080-chemacs.sh##c.personal,e.sh
set -eux
{ git clone https://github.com/plexus/chemacs.git "${HOME}/.local/chemacs" && $HOME/.local/chemacs/install.sh; } || exit 0
#+end_src

*** Doom emacs

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/090-doom-emacs.sh##c.personal,e.sh
set -eux
{ git clone https://github.com/hlissner/doom-emacs "${HOME}/.local/doom-emacs" && EMACSDIR=$HOME/.local/doom-emacs/ $HOME/.local/doom-emacs/bin/doom install; } || exit 0
#+end_src

*** git completion

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/100-git-completion.sh
set -ux
curl -o ${ZSH_CUSTOM_DIR}/git-completion.bash https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
curl -o ${ZSH_CUSTOM_DIR}/_git https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.zsh
#+end_src

#+RESULTS:

*** Leechblock


#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/110-leechblock.sh##c.personal,e.sh
set -ux
{ mkdir -p $HOME/dev && cd $HOME/dev && gh repo clone indigoviolet/LeechBlockNG-chrome && cd LeechBlockNG-chrome && ./install-jquery.sh; } || exit 0
#+end_src

*** paywall

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/120-paywall.sh##c.personal,e.sh
set -ux
{ mkdir -p $HOME/dev && cd $HOME/dev && gh repo clone iamadamdev/bypass-paywalls-chrome; } || exit 0
#+end_src

*** Fonts

On Darwin we would do this with brew

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/130-fonts.sh##c.personal,e.sh
set -eux

# Jetbrains Mono patched (https://github.com/ryanoasis/nerd-fonts#option-5-clone-the-repo)
mkdir -p $HOME/dev && cd $HOME/dev && git clone --filter=blob:none --sparse git@github.com:ryanoasis/nerd-fonts
cd $HOME/dev/nerd-fonts && git sparse-checkout add patched-fonts/JetBrainsMono
./install.sh JetBrainsMono
#+end_src

*** Gcloud

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/140-gcloud.sh##c.personal,e.sh
set -eux

sudo apt-get install apt-transport-https ca-certificates gnupg
echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
sudo apt-get update && sudo apt-get install google-cloud-sdk

#+end_src


** zsh secrets
Make ~~/.zsh_secrets~ if you need any secrets that aren't committed. It is sourced via ~secrets.zsh~

** Alt files

We use alt files to

1. change the file wholesale (eg. Brewfile)
2. template the file to have slightly different content (eg. zshrc)

Some files are only useful on a specific class, but we don't bother removing
these or hiding them. They are addressed at point of use - ie. if it is a
zshcustom file, we might use templates to include them correctly in zshrc.

* Paperwm

Checked out in dev/PaperWM and installed.

Currently using virtual-tiling-playground branch: https://github.com/paperwm/PaperWM/issues/303

* Wake on usb

** COMMENT /etc/rc.local

#+BEGIN_SRC shell :tangle "/sudo::/etc/rc.local"
# https://askubuntu.com/questions/848698/wake-up-from-suspend-using-wireless-usb-keyboard-or-mouse-for-any-linux-distro
KB=$(dmesg | grep 'Product: Kinesis Keyboard' | tail -1 | perl -lne '/usb\s(.*?):/; print $1' )
echo enabled > /sys/bus/usb/devices/${KB}/power/wakeup

MOUSE=$(dmesg | grep 'Product: 2.4G Mouse' | tail -1 | perl -lne '/usb\s(.*?):/; print $1' )
echo enabled > /sys/bus/usb/devices/${MOUSE}/power/wakeup
#+END_SRC

Doesn't work on wakeup, seemingly.

** Check using:

#+BEGIN_SRC shell
$ grep . /sys/bus/usb/devices/*/power/wakeup
/sys/bus/usb/devices/1-3.1.2/power/wakeup:enabled
/sys/bus/usb/devices/1-3.1/power/wakeup:disabled
/sys/bus/usb/devices/1-3.2.3/power/wakeup:disabled
/sys/bus/usb/devices/1-3.2/power/wakeup:disabled
/sys/bus/usb/devices/1-3/power/wakeup:disabled
/sys/bus/usb/devices/1-5/power/wakeup:disabled
/sys/bus/usb/devices/usb1/power/wakeup:disabled
/sys/bus/usb/devices/usb2/power/wakeup:disabled
/sys/bus/usb/devices/usb3/power/wakeup:disabled
/sys/bus/usb/devices/usb4/power/wakeup:disabled

$ sudo dmesg | grep 'Product:'
#+END_SRC


** /etc/udev/rules.d/10-usb-wakeup.rules

This seems to work ([[*Check using:][Check using:]])

#+BEGIN_SRC shell :tangle "/sudo::/etc/udev/rules.d/10-usb-wakeup.rules"
# https://askubuntu.com/a/874701

# ‚ùØ lsusb | grep mouse
# Bus 001 Device 018: ID 1ea7:0064 SHARKOON Technologies GmbH 2.4GHz Wireless rechargeable vertical mouse [More&Better]

ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="1ea7", ATTRS{idProduct}=="0064" ATTR{power/wakeup}="enabled"

# ‚ùØ lsusb | grep Keyboard
# Bus 001 Device 015: ID 05f3:0007 PI Engineering, Inc. Kinesis Advantage PRO MPC/USB Keyboard

ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="05f3", ATTRS{idProduct}=="0007" ATTR{power/wakeup}="enabled"

# ‚ùØ lsusb | grep LG
# Bus 001 Device 017: ID 043e:9a39 LG Electronics USA, Inc. 4-Port USB 2.0 Hub
ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="043e", ATTRS{idProduct}=="9a39" ATTR{power/wakeup}="enabled"
#+END_SRC


* asdf v. brew

- some of the plugins are not reliable (eg. jq plugin), plus there is no Brewfile counterpart
- prefer brew for now, except for nodenv/pyenv replacements and things that can't be installed by brew:
- python, nodejs, yarn, poetry

* Kinesis Advantage

https://kinesis-ergo.com/wp-content/uploads/kb500-qsg.pdf

- ~=m~ to switch to mac mode
- ~Program+\~ to switch off clicks
- Remapping: ~Prgrm+F12~ to start. Hit source, then destination to copy from source to destination
  + *Swap* ctrl and capslock
  + Copy alt to left shift
  + Copy win to key below X

* Todos

- [X] Dispatcher
- [X] Bootstrap script from dotbot
- [X] Brewfile
- [X] asdf setup script
- [X] Remove .emacs and add script to install chemacs
- [X] move personal laptop bootstrap scripts + config files to alt
- [X] Handle fin alts
- [X] Handle union of personal&gcp
- [ ] id_rsa and id_rsa.pub -> encrypt and add?

* Mac

- Cmd+Shift+. to show hidden files
- VSCode: use Cmd+Shift+P to "Install 'code' command in PATH"
