:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+property: header-args :mkdirp yes :comments both
:END:

* Yadm dotfiles

** Get Brew


#+begin_src shell
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#+end_src


** Get yadm

#+begin_src shell
brew install yadm
#+end_src


** Getting started

https://yadm.io/docs/getting_started

This will clone the repo files into $HOME (as a repo where the git directory
lives in ~.local/share/yadm/repo.git~)

#+begin_src shell
yadm clone git@github.com:indigoviolet/dotfiles-yadm.git
yadm config local.class <personal|fin|gcp>
yadm status
#+end_src

** Bootstrap

*** Dispatcher

https://raw.githubusercontent.com/TheLocehiliosan/yadm/master/contrib/bootstrap/bootstrap-in-dir

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap
# Save this file as ~/.config/yadm/bootstrap and make it executable. It will
# execute all executable files (excluding templates and editor backups) in the
# ~/.config/yadm/bootstrap.d directory when run.

set -eu

# Directory to look for bootstrap executables in
BOOTSTRAP_D="${BASH_SOURCE[0]}.d"

if [[ ! -d "$BOOTSTRAP_D" ]]; then
    echo "Error: bootstrap directory '$BOOTSTRAP_D' not found" >&2
    exit 1
fi

find "$BOOTSTRAP_D" -type f | sort | while IFS= read -r bootstrap; do
    if [[ -x "$bootstrap" && ! "$bootstrap" =~ "##" && ! "$bootstrap" =~ "~$" ]]; then
        if ! "$bootstrap"; then
            echo "Error: bootstrap '$bootstrap' failed" >&2
            exit 1
        fi
    fi
done

#+end_src


*** build deps

for pyenv builds https://github.com/pyenv/pyenv/wiki/common-build-problems (which also affect asdf)

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/01-build-deps.sh##distro.Ubuntu
set -eux
sudo apt-get update
sudo apt-get install --yes clang
sudo apt-get install --no-install-recommends -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
#+end_src

*** Brew

=brew bundle dump  --force --describe --global=

Note that .Brewfile is an alt file

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/02-brew.sh
set -eux

# install items
if [[ -e ~/.Brewfile ]]; then
	brew bundle --global check || brew bundle --global install -v
fi
#+end_src

*** Asdf

asdf installed with Brew

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/03-asdf.sh##c.personal
set -ux
for plugin in nodejs python yarn poetry; do
	asdf plugin add $plugin
done

asdf install python 3.9.0
asdf install python 3.8.1

bash -c '${ASDF_DATA_DIR:=$HOME/.asdf}/plugins/nodejs/bin/import-release-team-keyring'
asdf install nodejs 13.8.0

asdf install yarn 1.22.10
asdf install poetry 1.1.6
#+end_src

*** Pipx

pipx is installed with Brew

We use .pipx.json which is created by

=pipx list --json > ~/.pipx.json=

Note that .pipx.json is an alt file

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/04-pipx.sh
set -ux
if [[ -e ~/.pipx.json ]]; then
	for p in $(cat ~/.pipx.json | jq -r '.venvs[].metadata.main_package.package_or_url'); do
		pipx install $p
	done
fi
#+end_src

*** Prezto

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/05-prezto.sh
set -ux
git clone --recursive https://github.com/sorin-ionescu/prezto.git "${HOME}/.zprezto"
git clone --recurse-submodules https://github.com/belak/prezto-contrib "${HOME}/.zprezto/contrib"
cd ~/.zprezto/contrib && git pull
#+end_src

*** Zinit

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/06-zinit.sh
set -eux
mkdir ~/.zinit && git clone https://github.com/zdharma/zinit.git ~/.zinit/bin
#+end_src

*** Misc utilities

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/07-misc-utilities.sh##distro.Ubuntu
set -eux
(command -v less &> /dev/null) || sudo apt-get install --yes less
(command -v htop &> /dev/null) || sudo apt-get install --yes htop
(command -v notify-send &> /dev/null) || sudo apt-get install --yes libnotify-bin
# this is installed with apt-get because brew installs a shitload of dependencies
(command -v svn &>/dev/null) || sudo apt-get install --yes subversion
#+end_src

*** chemacs

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/08-chemacs.sh##c.personal
set -eux
git clone https://github.com/plexus/chemacs.git "${HOME}/.local/chemacs" && $HOME/.local/chemacs/install.sh
#+end_src

*** Doom emacs

#+begin_src shell :shebang "#!/bin/bash" :tangle ~/.config/yadm/bootstrap.d/09-doom-emacs.sh##c.personal
set -eux
git clone https://github.com/hlissner/doom-emacs "${HOME}/.local/doom-emacs"
EMACSDIR=$HOME/.local/doom-emacs/ $HOME/.local/doom-emacs/bin/doom install
#+end_src



** zsh secrets
Make ~~/.zsh_secrets~ if you need any secrets that aren't committed. It is sourced via ~secrets.zsh~

** Alt files

We use alt files to

1. change the file wholesale (eg. Brewfile)
2. template the file to have slightly different content (eg. zshrc)

Some files are only useful on a specific class, but we don't bother removing
these or hiding them. They are addressed at point of use - ie. if it is a
zshcustom file, we might use templates to include them correctly in zshrc.

* Paperwm

Checked out in dev/PaperWM and installed.

Currently using virtual-tiling-playground branch: https://github.com/paperwm/PaperWM/issues/303

* Wake on usb

** COMMENT /etc/rc.local

#+BEGIN_SRC shell :tangle "/sudo::/etc/rc.local"
# https://askubuntu.com/questions/848698/wake-up-from-suspend-using-wireless-usb-keyboard-or-mouse-for-any-linux-distro
KB=$(dmesg | grep 'Product: Kinesis Keyboard' | tail -1 | perl -lne '/usb\s(.*?):/; print $1' )
echo enabled > /sys/bus/usb/devices/${KB}/power/wakeup

MOUSE=$(dmesg | grep 'Product: 2.4G Mouse' | tail -1 | perl -lne '/usb\s(.*?):/; print $1' )
echo enabled > /sys/bus/usb/devices/${MOUSE}/power/wakeup
#+END_SRC

Doesn't work on wakeup, seemingly.

** Check using:

#+BEGIN_SRC shell
$ grep . /sys/bus/usb/devices/*/power/wakeup
/sys/bus/usb/devices/1-3.1.2/power/wakeup:enabled
/sys/bus/usb/devices/1-3.1/power/wakeup:disabled
/sys/bus/usb/devices/1-3.2.3/power/wakeup:disabled
/sys/bus/usb/devices/1-3.2/power/wakeup:disabled
/sys/bus/usb/devices/1-3/power/wakeup:disabled
/sys/bus/usb/devices/1-5/power/wakeup:disabled
/sys/bus/usb/devices/usb1/power/wakeup:disabled
/sys/bus/usb/devices/usb2/power/wakeup:disabled
/sys/bus/usb/devices/usb3/power/wakeup:disabled
/sys/bus/usb/devices/usb4/power/wakeup:disabled

$ sudo dmesg | grep 'Product:'
#+END_SRC


** /etc/udev/rules.d/10-usb-wakeup.rules

This seems to work ([[*Check using:][Check using:]])

#+BEGIN_SRC shell :tangle "/sudo::/etc/udev/rules.d/10-usb-wakeup.rules"
# https://askubuntu.com/a/874701

# ❯ lsusb | grep mouse
# Bus 001 Device 018: ID 1ea7:0064 SHARKOON Technologies GmbH 2.4GHz Wireless rechargeable vertical mouse [More&Better]

ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="1ea7", ATTRS{idProduct}=="0064" ATTR{power/wakeup}="enabled"

# ❯ lsusb | grep Keyboard
# Bus 001 Device 015: ID 05f3:0007 PI Engineering, Inc. Kinesis Advantage PRO MPC/USB Keyboard

ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="05f3", ATTRS{idProduct}=="0007" ATTR{power/wakeup}="enabled"

# ❯ lsusb | grep LG
# Bus 001 Device 017: ID 043e:9a39 LG Electronics USA, Inc. 4-Port USB 2.0 Hub
ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="043e", ATTRS{idProduct}=="9a39" ATTR{power/wakeup}="enabled"
#+END_SRC


* asdf v. brew

- some of the plugins are not reliable (eg. jq plugin), plus there is no Brewfile counterpart
- prefer brew for now, except for nodenv/pyenv replacements and things that can't be installed by brew:
- python, nodejs, yarn, poetry

* Kinesis Advantage

https://kinesis-ergo.com/wp-content/uploads/kb500-qsg.pdf

- ~=m~ to switch to mac mode
- ~Program+\~ to switch off clicks
- Remapping: ~Prgrm+F12~ to start. Hit source, then destination to copy from source to destination
  + *Swap* ctrl and capslock
  + Copy alt to left shift
  + Copy win to key below X

* Todos

- [X] Dispatcher
- [X] Bootstrap script from dotbot
- [X] Brewfile
- [X] asdf setup script
- [X] Remove .emacs and add script to install chemacs
- [X] move personal laptop bootstrap scripts + config files to alt
- [X] Handle fin alts
- [ ] Handle union of personal&gcp
- [ ] id_rsa and id_rsa.pub -> encrypt and add?

* Mac

- Cmd+Shift+. to show hidden files
- VSCode: use Cmd+Shift+P to "Install 'code' command in PATH"
