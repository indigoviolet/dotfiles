# WARNING: Do not edit this file.
# It was generated by processing {{ yadm.source }}


[alias]
    br = branch -v
    co = checkout
    ci = commit
    st = status
    brm = branch --merged


    # All files modified. gitmodified is a function in ~/.dotfiles/zsh/custom
    modified = !zsh -i -l -c "git-modified"
    cleanup = !zsh -i -l -c "git-cleanup"

    # open all files modified relative to master in emacs
    open = !"f() {( git modified | xargs emacsclient -n -t -a '' && emacsclient -t -a '' )}; f"

    thisbr = rev-parse --abbrev-ref HEAD
    master-or-main = !"f() { (git rev-parse --abbrev-ref main || git rev-parse --abbrev-ref master) }; f"
    parentbr = !"f() {( git show-branch | sed \"s/].*//\" | grep \"\\*\" | grep -v \"$( git thisbr )\" | head -n1 | sed \"s/^.*\\[//\" | sed 's/[\\^~].*//' )}; f"

    # Push to Github
    pu = !git push origin `git thisbr`

    # Force push to Github
    puf = !git pu --force-with-lease --force-if-includes

    # autostash: Puts changes on stash in a specifically named way
    autostash-msg = !"f() {( echo \"autostash on $( git thisbr )\" )}; f"
    autostash-save = !"f() {( git stash save \"$( git autostash-msg )\" )}; f"
    autostash-find = !"f() {( git stash list | grep \"$( git autostash-msg )\" | head -n1 | cut -f1 -d ':' )}; f"
    autostash-pop = !"f() {( test -n \"$( git autostash-find )\"  && git stash pop $( git autostash-find ) )}; f"

    # always branch from master
    makebr = !"f() {( MASTERBR=$(git master-or-main); git cobr $MASTERBR  && git co -b $1 )}; f"

    # test if we ended up on the branch
    onbr = !"f() {( test $(git thisbr) = $1 )}; f"

    # checkout and exit with success or failure
    cobr = !"f() { ( git co $1; git onbr $1) }; f"
    switch-to = !"f() {( git cobr $1 || git makebr $1 || echo 'done' )}; test -n $1 && f"
    switch-and-apply = !"f() {( git switch-to $1 && git autostash-pop )}; test -n $1 && f"

    # Always use this to switch branches- will autostash, and un-autostash
    # `:` silences git checkout
    # export GIT_COMPLETION_CHECKOUT_NO_GUESS=1 will prevent completion of remote branches
    won = !"f() { : git switch ; git autostash-save && git switch-and-apply $* ; }; test -n $1 && f"

    # TODO: See https://github.com/kbd/setup/blob/master/HOME/.config/git/config
    # (for nice fzf-picker aliases, but for now we'll just use magit)

    # Will update
    up = !"f() {( OLDBR=$( git thisbr ); MASTERBR=$(git master-or-main); git won $MASTERBR; git pull; git checkout $OLDBR && git rebase $MASTERBR && git autostash-pop )}; f"

    # Commit changes to current head as amended commit [add to latest commit. Use carefully!]
    plus = commit --amend -a -C HEAD

    # Write a WIP commit
    wip = !git add . && git ci -m "WIP" -n

    # https://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298
    lg = lg1
    lg1 = lg1-specific
    lg2 = lg2-specific
    lg3 = lg3-specific

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

    ignore = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@ ;}; gi"

    # https://stackoverflow.com/questions/5741106/how-does-one-show-untracked-files-in-current-directory-only-ignoring-subdirecto
    ls-untracked = ls-files --other

[user]
    name = Venky Iyer
    email = indigoviolet@gmail.com


[log]
{% if yadm.class == "personal" %}
    # Requires git 2.21
    # Show relative dates for nearer times
    date = human
{% else %}
    # Always show relative dates
    date = relative
{% endif %}
    decorate = true

[format]
        pretty = "format:%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(7,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D"

# Use only for black background terminal
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    plain = white
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red blink

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[merge]
    # https://stackoverflow.com/questions/15587595/can-ediff-merge-simultaneously-show-the-ancestor-a-b-and-merge-buffers
    tool = emerge
    conflictstyle = diff3
#     # tool = difft

# https://mergiraf.org/usage.html
[merge "mergiraf"]
    name = mergiraf
    driver = mergiraf merge --git %O %A %B -s %S -x %X -y %Y -p %P

[core]
    attributesfile = ~/.gitattributes

[mergetool]
    # https://www.eseth.org/2020/mergetools.html
	hideResolved = true

[rerere]
    enabled = true

[init]
    defaultBranch = main

[core]
    excludesfile = ~/.gitignore
    pager = delta
    abbrev = 7                  #length of shas

[push]
    default = simple

## the credential manager is cross-platform
[credential]
    helper = manager            # git-credential-manager

## on windows/osx the store is the keychain by default

{% if yadm.class == "personal_ubuntu" %}
## on graphical linux we can use the freedesktop api (gnome keyring etc.)
    credentialStore = secretservice
{% endif %}

{% if yadm.class == "personal_mac" %}
   credentialStore = keychain
{% endif %}

{% if yadm.class == "remote" %}
## on headless tty we'll use a long timeout for the ephemeral in-memory cache
    credentialStore = cache
    cacheOptions = "--timeout 604800" # 1 week
{% endif %}

# [filter "lfs"]
#     clean = git-lfs clean -- %f
#     smudge = git-lfs smudge -- %f
#     required = true

# Github repos will use ssh instead of https (more secure, efficient, can be shared over ssh)
# Add an ssh key to make this work without a password https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account
[url "ssh://git@github.com/"]
    insteadOf = github.com

[pull]
    rebase = true

# [interactive]
#     diffFilter = delta --color-only --features=interactive

[delta]
    features = decorations
    syntax-theme = "Monokai Extended Bright"
    side-by-side = true
    # https://github.com/dandavison/magit-delta/issues/13
    # line-numbers = true    # Don't do this.. messes up diffs in magit
    #
    relative-paths = true    # Output all file paths relative to the current directory

[delta "interactive"]
    keep-plus-minus-markers = false

[delta "decorations"]
    commit-decoration-style = blue ol
    commit-style = raw
    file-style = omit
    hunk-header-decoration-style = blue box
    hunk-header-file-style = red
    hunk-header-line-number-style = "#067a00"
    hunk-header-style = file line-number syntax

[add.interactive]
    useBuiltin = false # required for git 2.37.0

[diff]
    colorMoved = default
    tool = difft

[github]
	user = indigoviolet


# Local Variables:
# mode: gitconfig
# firestarter-mode: t
# firestarter: "yadm alt"
# End:
