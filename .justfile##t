HOME := env_var('HOME')

# set_init: see ~/.bashrc for definition (mainly set -x)

set shell := ["bash", "-uc"]

default:
    just --list

{% if yadm.class == "personal" %}
EMACSDIR := env_var('EMACSDIR')
DOOMDIR := env_var('DOOMDIR')

# Handle stale elc files
doom_rebuild:
    # https://github.com/millejoh/emacs-ipython-notebook/issues/824
    doom clean
    fd -g '*.elc' {{ EMACSDIR }} -uuu -x rm
    doom build -r
    just doom_rebuild_pdf_tools
    just doom_rebuild_vterm

doom_rebuild_pdf_tools:
    ## rebuild pdf tools, this fails within emacs because CC is set
    CC= /home/venky/.emacs.d/.local/straight/build-29.0.50/pdf-tools/build/server/autobuild -i /home/venky/.emacs.d/.local/straight/build-29.0.50/pdf-tools/

# Rebuild vterm (experimental)
doom_rebuild_vterm:
    emacsclient --eval '(vterm-module-compile)'
    # Look into doomscript: https://github.com/doomemacs/doomemacs/issues/6494



doom_tangle_config:
    emacs --batch -Q --eval "(require 'org)" --eval '(org-babel-tangle-file "{{ DOOMDIR }}/config.org")'

mutagen_project_start:
    mutagen project start -f ~/dev/ml-west.yml

mutagen_project_terminate:
    mutagen project terminate -f ~/dev/ml-west.yml

# Log into syslog
syslog_notice NOTICE:
    echo "---Debug notice: {{ NOTICE }}---" | logger -i -s -p user.notice

debug_suspend: (syslog_notice "Suspend")
    systemctl suspend

debug_hibernate: (syslog_notice "Hibernate")
    systemctl hibernate
{% endif %}

{% if yadm.class == "gcp" %}
# Start devr jupyter notebook in a Tmux
jupyter_start:
    cd ~/dev/devr/py/nbs && tmux new-session -d -s jupyter jupyter notebook
{% endif %}


# Brew capture manually installed "leaves"
brew_dump_leaves:
    #!/usr/bin/env bash
    set_init
    { brew leaves --installed-on-request; echo "^tap"; } | rg --file - <(brew bundle dump --describe --file=-) --before-context 1 --no-line-number --no-context-separator --word-regexp --color=never

pipx_dump:
    pipx list --json

yadm_checkpoint:
    cd {{ HOME }} && yadm add -u && yadm ci -m "checkpoint" && yadm push

# Install a Jupyter kernel from a Poetry venv
poetry_install_ipykernel:
    #!/usr/bin/env bash
    set_init
    cd {{ invocation_directory() }}
    if [[ ${POETRY_ACTIVE:-0} -ne 1 ]]; then
        echo "Poetry is not active"
        exit 1
    fi
    poetry add -D ipykernel
    poetry install
    local basename=${PWD##*/}
    python -m ipykernel install --user --name="$basename"


show_kernelspec:
    #!/usr/bin/env bash
    set_init
    cd {{ invocation_directory() }}
    basename=${PWD##*/}
    jupyter kernelspec list --json | jq '.kernelspecs."'"$basename"'"'


# https://github.com/python-poetry/poetry/issues/3958
# https://github.com/python-poetry/poetry/issues/2921#issuecomment-896812858
# Update Poetry git dependency
poetry_reinstall_git LIB:
    #!/usr/bin/env bash
    set_init
    cd {{ invocation_directory() }}
    if [[ ${POETRY_ACTIVE:-0} -ne 1 ]]; then
        echo "Poetry is not active"
        exit 1
    fi
    uri=$(dasel select -f pyproject.toml -s '.tool.poetry.dependencies.{{LIB}}.git')
    rev=$(dasel select -f pyproject.toml -s '.tool.poetry.dependencies.{{LIB}}.rev')
    poetry remove {{LIB}} && poetry lock && poetry add "git+$uri@$rev"

path := env_var('PATH')

# Note: this won't work with set_init since $HOME/.bashrc isn't loaded
# Run via sudo, preserving env and PATH
sudo *CMD:
    sudo -E env PATH={{path}} just {{CMD}}
# Local Variables:
# mode: just
# eval: (firestarter-mode)
# firestarter: "yadm alt"
# End:
