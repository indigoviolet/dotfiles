# WARNING: Do not edit this file
# It was generated by processing {{ yadm.source }}

HOME := env_var('HOME')

# set_init: see ~/.bashrc for definition (mainly set -x)

set shell := ["bash", "-uc"]

default:
    just --list

{% if yadm.class == "personal" %}
EMACSDIR := env_var('EMACSDIR')
DOOMDIR := env_var('DOOMDIR')

# Handle stale elc files
doom-rebuild:
    # https://github.com/millejoh/emacs-ipython-notebook/issues/824
    doom clean
    fd -g '*.elc' {{ EMACSDIR }} -uuu -x rm
    doom build -r
    just doom-rebuild-pdf-tools
    just doom-rebuild-vterm

doom-rebuild-pdf-tools:
    ## rebuild pdf tools, this fails within emacs because CC is set
    CC= /home/venky/.emacs.d/.local/straight/build-29.0.50/pdf-tools/build/server/autobuild -i /home/venky/.emacs.d/.local/straight/build-29.0.50/pdf-tools/

# Rebuild vterm (experimental)
doom-rebuild-vterm:
    emacsclient --eval '(vterm-module-compile)'
    # Look into doomscript: https://github.com/doomemacs/doomemacs/issues/6494

doom-tangle-config:
    emacs --batch -Q --eval "(require 'org)" --eval '(org-babel-tangle-file "{{ DOOMDIR }}/config.org")'

mutagen-project-start:
    mutagen project start -f ~/dev/ml-west.yml

mutagen-project-terminate:
    mutagen project terminate -f ~/dev/ml-west.yml

# Log into syslog
syslog-notice NOTICE:
    echo "---Debug notice: {{ NOTICE }}---" | logger -i -s -p user.notice

debug-suspend: (syslog-notice "Suspend")
    systemctl suspend

debug-hibernate: (syslog-notice "Hibernate")
    systemctl hibernate

# Update calibre (run with just sudo update-calibre)
update-calibre: ensure-sudo
    wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sh /dev/stdin
{% endif %}

{% if yadm.class == "gcp" %}
# Start devr jupyter notebook in a Tmux
jupyter-start:
    cd ~/dev/devr/py/nbs && tmux new-session -d -s jupyter jupyter notebook
{% endif %}


# Brew capture manually installed "leaves"
brew-dump-leaves:
    #!/usr/bin/env bash
    set_init
    { brew leaves --installed-on-request; echo "^tap"; } | rg --file - <(brew bundle dump --describe --file=-) --before-context 1 --no-line-number --no-context-separator --word-regexp --color=never

brew-list-used-by:
    # # https://www.thingy-ma-jig.co.uk/blog/22-09-2014/homebrew-list-packages-and-what-uses-them
    brew list --formula -1 | while read formula; do echo -ne "\x1B[1;34m $formula \x1B[0m"; brew uses $formula --installed --recursive --skip-recommended | awk '{printf(" %s ", $0)}'; echo ""; done

brew-list-dependencies:
    brew deps -n --installed --for-each
    # # https://www.thingy-ma-jig.co.uk/blog/22-09-2014/homebrew-list-packages-and-what-uses-them
    # brew list -1 | while read cask; do echo -ne "\x1B[1;34m $cask \x1B[0m"; brew deps $cask --installed | awk '{printf(" %s ", $0)}'; echo ""; done

pipx-update-list:
    pipx list --json > ~/.pipx.json

yadm-checkpoint:
    cd {{ HOME }} && yadm add -u && yadm ci -m "checkpoint" && yadm push

# Install a Jupyter kernel from a Poetry venv
poetry-install-ipykernel:
    #!/usr/bin/env bash
    set_init
    cd {{ invocation_directory() }}
    if [[ ${POETRY_ACTIVE:-0} -ne 1 ]]; then
        echo "Poetry is not active"
        exit 1
    fi
    poetry add -D ipykernel
    poetry install
    basename=${PWD##*/}
    python -m ipykernel install --user --name="$basename"


show-kernelspec:
    #!/usr/bin/env bash
    set_init
    cd {{ invocation_directory() }}
    basename=${PWD##*/}
    jupyter kernelspec list --json | dasel -p json '.kernelspecs.'"${basename}"


# https://github.com/python-poetry/poetry/issues/3958
# https://github.com/python-poetry/poetry/issues/2921#issuecomment-896812858
# Update Poetry git dependency
poetry-reinstall-git LIB:
    #!/usr/bin/env bash
    set_init
    cd {{ invocation_directory() }}
    if [[ ${POETRY_ACTIVE:-0} -ne 1 ]]; then
        echo "Poetry is not active"
        exit 1
    fi
    uri=$(dasel select -f pyproject.toml -s '.tool.poetry.dependencies.{{LIB}}.git')
    rev=$(dasel select -f pyproject.toml -s '.tool.poetry.dependencies.{{LIB}}.rev')
    poetry remove {{LIB}} && poetry lock && poetry add "git+$uri@$rev"


# Fix ImageMagick resource exhausted errors (convert). Run with just sudo
fix-imagemagick-resources POLICY_XML: ensure-sudo
    #!/usr/bin/env bash
    # https://stackoverflow.com/a/66127712
    set -x
    set -euo pipefail

    # this one is just to solve convertion from .tiff to pdf, you may need it some day
    sed -i '/disable ghostscript format types/,+6d' {{POLICY_XML}}
    sed -i -E 's/name="memory" value=".+"/name="memory" value="8GiB"/g' {{POLICY_XML}}
    sed -i -E 's/name="map" value=".+"/name="map" value="8GiB"/g' {{POLICY_XML}}
    sed -i -E 's/name="area" value=".+"/name="area" value="8GiB"/g' {{POLICY_XML}}
    sed -i -E 's/name="disk" value=".+"/name="disk" value="8GiB"/g' {{POLICY_XML}}

path := env_var('PATH')

# Note: this won't work with set_init since $HOME/.bashrc isn't loaded
# Run via sudo, preserving env and PATH
sudo *CMD:
    sudo -E env PATH={{path}} just {{CMD}}


# - this seems to be problematic and I haven't figure out how to make it work well:
#
#   1. --use-source-timestamp is essential or it updates the file, and is then triggered by that update
#
#   2. watching both files and syncing them in the command will also lead to
#      infinite loop. no combination of --on-busy-update, --debounce,
#      --watch-when-idle etc seems to fix it
#
#   3. sometimes there is a change which isn't in the variables we're passing into parallel, and then parallel will think it's reading stdin and break
#
# A better approach is probably to use on-save hooks in Emacs
#
# Sync a Jupyter nb file to a Python file using Jupytext
# jupytext-sync NBFILE meta=env_var_or_default('meta', 'true') poll=env_var_or_default('poll', '2000'):
#     #!/usr/bin/env bash
#     set_init
#     cd {{ invocation_directory() }}
#
#     nbfile=$(realpath {{ NBFILE }})
#     [[ -e "$nbfile" ]] || (echo "$nbfile not found" && exit 1)
#
#     pyfile=$(dirname $nbfile)/"$(basename $nbfile .ipynb).py"
#     jupytext --set-formats ipynb,py:percent --sync --quiet --output "$pyfile" "$nbfile" && echo "Revert the notebook or it won't be synced"
#
#     meta_opt="{{ if meta == 'true' { '' } else { '--no-meta' } }}"
#     poll_opt="{{ if poll == '0' { '' } else { '--force-poll ' + poll } }}"
#     add_vars_to_watch="{{ if meta == 'true' { '\$WATCHEXEC_META_CHANGED_PATH' } else { '' }  }}"
#
#     watchexec -w "$nbfile" -w "$pyfile" ${meta_opt} --watch-when-idle --postpone --on-busy-update=do-nothing --print-events ${poll_opt} 'parallel --verbose --delimiter : "jupytext --update --quiet --sync --use-source-timestamp $WATCHEXEC_COMMON_PATH/{}" ::: $WATCHEXEC_WRITTEN_PATH '${add_vars_to_watch}
#     # watchexec -w $nbfile -w $pyfile --no-meta -p "jupytext --sync $nbfile"


ensure-sudo:
    #!/usr/bin/env bash
    if [[ $EUID -ne 0 ]]; then
        echo "Invoke with 'just sudo CMD'"
        exit 1
    fi

glances plugins=env_var_or_default("plugins", "") *args='':
    glances --sparkline --disable-plugin all --enable-plugins=quicklook,cpu,gpu,mem,load,processcount,processlist,docker,{{plugins}} {{ args }}



# Local Variables:
# mode: just
# eval: (firestarter-mode)
# firestarter: "yadm alt"
# End:
