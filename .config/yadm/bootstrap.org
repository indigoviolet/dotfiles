:DOC-CONFIG:
#+startup: fold
#+property: header-args :comments no :mkdirp yes :cache yes :tangle ~/.config/yadm/bootstrap##t :shebang #!/usr/bin/env -S just --justfile
:END:

You must tangle this file and check in the resulting bootstrap##t -- which is a just script that is templated


* Preamble

#+begin_src just
# WARNING: Do not edit this file

set shell := ["bash", "-uc"]
set positional-arguments
#+end_src

* Default

#+begin_src just
default:
    just --list -u -f {{ justfile() }}
#+end_src

* COMMENT Execute

We can't do this -- execute all tasks in order -- because we can't template on
two variables (class and distro) simultaneously, and we want some personal on
ubuntu and some personal on mac. so we might have to instead list out the
bootstrap tasks for each class.

#+begin_src just
@execute_bootstrap *args:
    just --summary --unsorted -f {{ justfile() }} | xargs -n1 echo | rg -vw 'default|execute_bootstrap' | xargs -n1 just -f {{ justfile() }} --verbose "$@"
#+end_src

* COMMENT _sudo

#+begin_src just
# Run via sudo, preserving env and PATH
_sudo *CMD:
    sudo -E --preserve-env=PATH,HOME env {{CMD}}

_ensure-sudo:
    #!/usr/bin/env bash
    if [[ $EUID -ne 0 ]]; then
        echo "Invoke with 'just sudo just CMD'"
        exit 1
    fi


#+end_src

* COMMENT build deps (assumes debian)

From https://docs.brew.sh/Homebrew-on-Linux

also for pyenv builds https://github.com/pyenv/pyenv/wiki/common-build-problems (which also affect asdf)

#+begin_src just
{% if yadm.distro == "Ubuntu" %}
build_deps:
    sudo apt-get update
    sudo apt-get install build-essential procps curl file git
    sudo apt-get install --no-install-recommends -y \
       make clang \
       libssl-dev zlib1g-dev libbz2-dev \
       libreadline-dev libsqlite3-dev \
       wget llvm \
       libncurses5 libncurses5-dev libncursesw5 \
       xz-utils tk-dev \
       libxml2-dev libffi-dev \
       libxmlsec1-dev liblzma-dev

{% endif %}
#+end_src

* Prezto

#+begin_src just
prezto:
    git clone --recursive https://github.com/sorin-ionescu/prezto.git "${HOME}/.zprezto"
    git clone --recurse-submodules https://github.com/belak/prezto-contrib "${HOME}/.zprezto/contrib"
    cd ~/.zprezto/contrib && git pull
#+end_src

* Brew bundle

+brew bundle dump --force --describe --casks --file=-+ See [[file:.zshcustom/brew.zsh::function brew-dump-leaves () {][brew-dump-leaves]] instead

just =brew-dump-leaves >! ~/.Brewfile=

Note that .Brewfile is an alt file

#+begin_src just
brew_bundle:
    [ -f ~/.Brewfile ] && { brew bundle --global check || brew bundle --global install -v; }
#+end_src

* COMMENT asdf

TODO: replace with rtx

asdf installed with Brew

#+begin_src just
asdf:
    ## https://github.com/asdf-vm/asdf/issues/276#issuecomment-907063520
    -cut -d' ' -f1 $HOME/.tool-versions | xargs -i asdf plugin add {}

    ## installs from .tool-versions (which is an alt file)
    ## the install-poetry installer is default with 1.2, but that is still alpha and has bugs <2022-02-07 Mon>
    # ASDF_POETRY_INSTALL_URL=https://install.python-poetry.org asdf install
    asdf install
#+end_src


* pipx

[pipx is installed with Brew

We use .pipx.json which is created by

~just pipx_update_list~

Note that .pipx.json is an alt file
a
#+begin_src just
pipx:
    pipx install-all ~/.pipx.json
#+end_src

* zsh login shell

Need to make sure binary installs are done before this

#+begin_src just
zsh_login_shell:
    sudo apt-get install --no-install-recommends -y zsh
    sudo chsh -s $(which zsh) $(whoami)
#+end_src

* COMMENT Mamba


TODO: we're using rye + micromamba maybe these days

https://github.com/conda-forge/miniforge#non-interactive-install


#+begin_src just
mambaforge:
    cd /tmp && \
    curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh" && \
    bash Mambaforge-$(uname)-$(uname -m).sh -b -p $HOME/.local/mambaforge
#+end_src


* COMMENT gh extensions

#+begin_src just
gh_extensions:
    ## Handy way to install things from github
    { gh extension list | grep redraw/gh-install; } || gh extension install redraw/gh-install
#+end_src

* git credential-manager (assumes debian)

#+begin_src just
{% if yadm.class == "debian" %}
git-credential-manager:
    cd /tmp && eget -a '.deb' GitCredentialManager/git-credential-manager && sudo dpkg -i /tmp/gcm*.deb && git credential-manager configure
{% endif %}
#+end_src

* atuin


#+begin_src just
atuin_install:
    atuin register -u indigoviolet -e indigoviolet@gmail.com
    atuin import auto
    atuin sync

atuin_login:
    # password from bitwarden
    atuin login -u indigoviolet --key $(cat ~/.local/share/atuin/key)
    atuin import auto
    atuin sync -f
#+end_src

* COMMENT misc_utils (assumes debian)

#+begin_src just
{% if yadm.distro == "Ubuntu" %}
misc_utils:
    command -v less || sudo apt-get install --no-install-recommends -y less
    command -v notify-send || sudo apt-get install --no-install-recommends -y libnotify-bin
    command -v svn || sudo apt-get install --no-install-recommends -y subversion # brew installs too many deps
    command -v netstat || sudo apt-get install --no-install-recommends -y net-tools
{% endif %}
#+end_src


* COMMENT git completion

#+begin_src just
git_completion:
    curl -o ${ZSH_CUSTOM_DIR}/git-completion.bash https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
    curl -o ${ZSH_CUSTOM_DIR}/_git https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.zsh
#+end_src

* git-info

#+begin_src just
git_info:
    mkdir -p ~/.local/bin && curl -fsSL https://raw.githubusercontent.com/gitbits/git-info/master/git-info --output ~/.local/bin/git-info && chmod +x ~/.local/bin/git-info
#+end_src



* Personal
** chemacs

#+begin_src just
chemacs:
    git clone https://github.com/plexus/chemacs.git "${HOME}/.local/chemacs" && $HOME/.local/chemacs/install.sh
#+end_src

** doom emacs

#+begin_src just
doom_emacs:
    git clone https://github.com/hlissner/doom-emacs "${HOME}/.emacs.d" && $HOME/.emacs.d/bin/doom install
#+end_src

** Tailscale

#+begin_src just
{% if yadm.distro == "Ubuntu" %}
_tailscale:
    curl -fsSL https://pkgs.tailscale.com/unstable/ubuntu/jammy.noarmor.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
    curl -fsSL https://pkgs.tailscale.com/unstable/ubuntu/jammy.tailscale-keyring.list | sudo tee /etc/apt/sources.list.d/tailscale.list
    sudo apt-get update
    sudo apt-get install -y tailscale

tailscale:
    command -v tailscale || just -f {{ justfile() }} _tailscale
{% endif %}
#+end_src



** Leechblock

#+begin_src just
leechblock:
    mkdir -p $HOME/dev && cd $HOME/dev && gh repo clone indigoviolet/LeechBlockNG-chrome && cd LeechBlockNG-chrome && ./install-jquery.sh
#+end_src

** Paywall

#+begin_src just
paywall:
    mkdir -p $HOME/dev && cd $HOME/dev && gh repo clone iamadamdev/bypass-paywalls-chrome
#+end_src


* Gcloud

#+begin_src just
{% if yadm.distro == "Ubuntu" %}
_gcloud:
    sudo apt-get install apt-transport-https ca-certificates gnupg
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    sudo apt-get update && sudo apt-get install --no-install-recommends -y google-cloud-sdk

gcloud:
    command -v gcloud || {{ just }} _gcloud
{% endif %}
#+end_src

* huawei matebook

#+begin_src just
{% if yadm.distro == "Ubuntu" %}
add_matebook_ppas:
    # https://github.com/qu1x/huawei-wmi/tree/master/debian#repository
    echo "deb https://deb.qu1x.org buster main" | sudo tee /etc/apt/sources.list.d/qu1x.list
    # sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net --recv-keys 4503d1ab

    # matebook-applet
    echo "deb [signed-by=/usr/share/keyrings/matebook-applet.key] http://evgenykuznetsov.org/repo/ stable main" | sudo tee /etc/apt/sources.list.d/matebook-applet.list
    wget -qO - https://raw.githubusercontent.com/nekr0z/matebook-applet/master/matebook-applet.key | sudo tee /usr/share/keyrings/matebook-applet.key
{% endif %}
#+end_src

* Fonts

On Darwin we would do this with brew

#+begin_src just
{% if yadm.distro == "Ubuntu" %}
nerd_fonts:
    #!/usr/bin/env bash --init-file ${HOME}/.bashrc
    set_init
    # Jetbrains Mono patched (https://github.com/ryanoasis/nerd-fonts#option-5-clone-the-repo)
    if [[ ! -d  $HOME/dev/nerd-fonts ]]; then
        mkdir -p $HOME/dev
        cd $HOME/dev
        git clone --filter=blob:none --sparse git@github.com:ryanoasis/nerd-fonts
    else
        cd $HOME/dev/nerd-fonts
        git fetch
    fi

    for font in JetBrainsMono/Ligatures IBMPlexMono VictorMono Iosevka; do
        git sparse-checkout add patched-fonts/$font
        ./install.sh "${font%%/*}"
    done
{% endif %}
#+end_src

** all-the-icons

#+begin_src just
doom_all_the_icons:
    # Should we do this via doomscript? https://github.com/doomemacs/doomemacs/issues/6494
    echo 'y' | emacs -l ~/.config/doom/init.el --batch -f all-the-icons-install-fonts
#+end_src

** twemoji


#+begin_src just
{% if yadm.distro == "Ubuntu" %}
twemoji_fonts:
    sudo apt-add-repository -y -S "deb https://ppa.launchpadcontent.net/eosrei/fonts/ubuntu/ impish main"
    sudo apt-get update
    sudo apt-get install -y fonts-twemoji-svginot
{% endif %}
#+end_src



* local variables


#+begin_src just
# Local Variables:
# mode: just
# End:
#+end_src

https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html

#+begin_quote
If some unrelated text might look to Emacs as a local variables list, you can
countermand that by inserting a form-feed character (a page delimiter, see
Pages) after that text. Emacs only looks for file-local variables in the last
page of a file, after the last page delimiter.
#+end_quote

Formfeed (C-q C-l): (needs to be on its own line?)



Without it, this file will load in just mode
