:DOC-CONFIG:
#+title: Doom Emacs configuration
#+author: Venky Iyer
#+email: indigoviolet@gmail.com
:END:

(Tangled on `doom sync`, not on save)

This is my literate Doom Emacs configuration.

See [[file:init.el][init.el]], [[file:packages.el][packages.el]] and [[file:config.el][config.el]] for the generated files. Also see [[file:custom.el][file:~/.config/doom/custom.el]] for customizations

Transient settings are in [[file:~/.emacs.d/.local/etc/transient/values][file:~/.emacs.d/.local/etc/transient/values]] (~transient-values-file~)


* Notes

** authinfo

https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources

** about writing doom config

- See [[https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/emacs-lisp/demos.org ][api demos]] for how to use ~use-package!~, ~map!~, ~after!~, ~set-hook!~ etc.

- Most important thing for start up speed is to defer packages as much as possible.

  :defer, :bind, :commands, :after, :after-call, :defer-incrementally should be used in ~use-package!~

  ~after!~ should be used for doom's built in packages if it is simple

  ~:after-call (pre-command-hook after-find-file dired-before-readin-hook doom-first-buffer-hook doom-first-input-hook doom-first-file-hook ))~ <- some hooks that can be used for :after-call

https://github.com/hlissner/doom-emacs/issues/310#issuecomment-354424413
https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#packages-are-eagerly-loaded
[[help:use-package][use-package docs]]


** Debugging

- toggle-debug-on-error

- setq debug-on-message <regexp> (https://old.reddit.com/r/emacs/comments/aqmrkq/determine_source_of_messages_printed_to_messages/)

* To try:
** hyper/super keys
*** http://ergoemacs.org/emacs/emacs_hyper_super_keys.html

which keys? (ctrl is taken, caps is not reachable,)
how to define on ubuntu?
** prog-mode org-mode

are not the only modes we want things in; several other conf, yaml etc modes are "proggy", they inherit from text-mode or other things. Look at mode-minder. How to include these uniformly everywhere?

** [[*combobulate][combobulate]]

** Fonts

figure out why polars utf8 tables don't render correctly (even in vterm -- this is an emacs-wide problem, not ein only)

** edit-indirect (separedit),

sometimes edit-indirect seems to remember separedit comment-removal

** ein

*** font-locking

try to write a function that "updates" font-locking on all (markdown/code) cells

^ may be unncessary with outline-minor-faces-mode and removing all font attributes on markdown faces

*** firestarter + jupytext on save sync?

may not be necessary if we use jupyter-ascending

*** last execution time in ein

https://github.com/millejoh/emacs-ipython-notebook/blob/old-master/lisp/ein-timestamp.el

*** WAIT code-cells
:LOGBOOK:
- State "WAIT"       from              [2022-07-02 Sat 11:47]
:END:

cons: outputs aren't saved; this is not using polymode so that markdown isn't
supported (see https://github.com/polymode/polymode/issues/305 also)

*** fence-edit,




*** TODO Unpin ein

*** Create folding for ein notebooks using origami

https://github.com/elp-revive/origami.el

See for examples: https://github.com/elp-revive/origami.el/blob/master/origami-parsers.el
*** DONE undo is disabled?
:LOGBOOK:
- State "DONE"       from              [2022-09-27 Tue 15:09]
:END:

[2022-09-04T01:34:19]: Warning (ein): Disabling undo for undo-fu-only-undo Disable showing Disable logging

*** unknown errors on login


[2022-09-04T01:34:12]: Wrong type argument: ein:$notebook, nil: defaulting language to python [2 times]



** polymode (justfile?)
** https://framagit.org/steckerhalter/discover-my-major

** Insert item below isn't good

(+org/insert-item-below 1) will not respect content like (+org/insert-item-above 1) or (for headings, ) org-insert-heading-respect-content

We could try to create +org/insert-item-below with -above + shift down

We could create a better org-return-dwim using (org-at-item-p), (org-in-item-p) and friends

** KILL Better hydras?
:LOGBOOK:
- State "KILL"       from              [2022-09-03 Sat 14:40]
:END:

Punt for now: pretty/major-hydra is quite good

*** See if we can use https://gitlab.com/jjzmajic/hercules.el to make simpler hydras

*** Use transient to make expand-region more like easy-mark

https://www.reddit.com/r/emacs/comments/f3o0v8/anyone_have_good_examples_for_transient/

The problem with easy-mark is that it takes another key combo (C-SPC) to make an
active region (for replacing or moving or wrapping).

The problem with expand-region is that you can't start the region and then jump
to a particular kind of expansion, you have to cycle through
er/try-expand-alist.

However, if we can wrap a transient around set-mark-command, then we could use
er/mark-<foo> to recreate easy-mark, with active region.

** https://github.com/minad/consult/wiki#isearch-like-backwardforward-consult-line

** Figure out how to use dired efficiently

*** dired-sidebar
*** dirvish

https://github.com/alexluigit/dirvish
** Tramp issues

*** Figure out how to efficiently handle vterm, find-file in the presence of tramp

(+vterm/here seems to look for default-directory -- maybe we can fix that)

*** KILL treemacs freaks out in tramp?
:LOGBOOK:
- State "KILL"       from              [2022-09-03 Sat 14:41]
:END:

** Ideas from [[https://github.com/zzamboni/dot-doom/blob/master/doom.org][zzamboni]]
*** Jump to matching parens
*** variable pitch fonts & mixed fonts
*** kill whole line instead of emptying it
*** autosave and backup (disabled in doom)
*** confirm-kill-emacs
*** auto-restore emacs on startup?
*** org speed keys
** org-mode:
*** [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] -- Need to set org-super-agenda-groups
*** DONE org-mode company tweaks (see [[*Company backends][Company backends]])
:LOGBOOK:
- State "DONE"       from              [2022-07-02 Sat 11:24]
:END:

*** [[https://old.reddit.com/r/orgmode/comments/8n45ds/why_highlighting_text_is_so_painful_in_orgmode/dztalak/][Change emphasis colors/etc in org-mode]]
*** Escaping in org-mode https://emacs.stackexchange.com/a/16746/31740
*** org-mode Latex previewers:


https://github.com/yangsheng6810/org-latex-impatient
https://old.reddit.com/r/emacs/comments/k6rq84/display_equations_inline_with_mathpreview/
https://github.com/fuxialexander/emacs-webkit-katex-render



*** DONE org-appear (toggle visibility of emphasis markers)

*** figure out org-capture (into Notes todo, into emacs config.org todo, project todo)


https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html

*** one more implementation of org-tangle

https://github.com/trev-dev/org-tangle-config.el

*** Use org-remark instead of annotate
** [[https://sideshowcoder.com/2020/07/02/opening-sourcegraph-from-emacs/][Sourcegraph links via git-link]]
** https://github.com/tecosaur/emacs-everywhere
** harpoon bookmarks

** toml formatter using prettier and apheleia
** https://github.com/EricCrosson/unkillable-scratch

** DONE [[https://emacs.stackexchange.com/a/28391/31740][Set font size based on monitor/scaling?]]

*** See https://github.com/mnp/dispwatch and doom/*font* functions
** DONE maple-minibuffer (mini-frame replacement)
** DONE bufler (ibuffer replacement)
** DONE Pyright
:LOGBOOK:
- State "DONE"       from              [2022-07-02 Sat 11:18]
:END:

try lsp-pyright instead of mspyls. Previously didn't work with attrs, but now it
+seems to have some support+. Whoops, misspoke:
https://github.com/microsoft/pyright/issues/146 pyright still doesn't have attrs
support.

For LSP it's ok if we ignore all LSP errors and only use it for type hints etc -
for which it seems to work better than mspyls

- [ ] Figure out how to get pyright to watch fewer files?
- [ ] Revisit lsp completion with pyright: https://github.com/emacs-lsp/lsp-pyright/issues/16#issuecomment-676501575
- [ ] poetry and pyright: https://github.com/emacs-lsp/lsp-pyright/issues/24
- [X] Set up semantic for tabnine: https://www.tabnine.com/semantic, but see if we can use current language server instead of pyls (pyright or pylance?)


** KILL Pylance
:LOGBOOK:
- State "KILL"       from              [2022-07-02 Sat 11:18]
:END:

- [ ] try pylance: https://github.com/emacs-lsp/lsp-mode/issues/1863#issuecomment-652740357 (slower release cycle?)

** js-mode with tide instead of rjsx mode

https://www.reddit.com/r/emacs/comments/ca6q7v/emacs_for_web_dev_rjsx_webmode_tide_js2etc/
https://www.reddit.com/r/emacs/comments/9tr2vn/web_development_with_emacs_tips_and_tricks/
https://github.com/mooz/js2-mode
https://www.reddit.com/r/emacs/comments/bo741n/react_react_native_environment_setup/

** http://emacsrocks.com/
** http://whattheemacsd.com/
** https://github.com/grettke/help/blob/master/help.pdf
** Make rubocop fast async
https://emacs.stackexchange.com/questions/29086/non-shell-command-on-region

use apheleia?
** exwm
* Config file headers

Doom Emacs uses three config files:

- =init.el= defines which of the existing Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#modules][modules]] are loaded. A Doom module is a bundle of packages, configuration and commands, organized into a unit that can be toggled easily from this file.
- =packages.el= defines which [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#package-management][packages]] should be installed, beyond those that are installed and loaded as part of the enabled modules.
- =config.el= contains all [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom][custom configuration]] and code.

There are other files that can be loaded, but theses are the main ones. The load order of different files is [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#load-order][defined depending on the type of session]] being started.

All the config files are generated from this Org file, to try and make its meaning as clear as possible. All =package!= declarations are written to =packages.el=, all other LISP code is written to =config.el=.

We start by simply defining the standard headers used by the three files. These headers come from the initial files generated by =doom install=, and contain either some Emacs-LISP relevant indicators like =lexical-binding=, or instructions about the contents of the file.

** init.el
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

;; https://github.com/hlissner/doom-emacs/issues/5682
(defvar comp-deferred-compilation-deny-list nil)
#+end_src

#+RESULTS[18cf4f787585341b87168f71d76d5c343964a351]:
: comp-deferred-compilation-deny-list

** packages.el
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src

#+RESULTS[5aa8a8040c0f63c76b60db387e2d9489831d8696]:

** config.el

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:

;; On ubuntu this would be set in Tweaks, but on mac we have to set it here
(setq! doom-font (font-spec :family "Iosevka Nerd Font Mono"))
;;  doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq! org-directory (file-truename "~/org/"))

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src


* Themes

#+begin_src emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:


#+end_src

*** modus

#+begin_src emacs-lisp :tangle packages.el
(package! modus-themes :recipe (:host github :repo "protesilaos/modus-themes"))
#+end_src

https://protesilaos.com/emacs/modus-themes

#+begin_src emacs-lisp
(setq!
  modus-themes-disable-other-themes t
  modus-themes-italic-constructs t
  modus-themes-bold-constructs t
  modus-themes-mixed-fonts nil
  modus-themes-variable-pitch-ui nil
  modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}
  )
(setq! modus-themes-common-palette-overrides
  '(
     ;;(bg-region bg-dim)

     (fg-region unspecified)
     (border-mode-line-active unspecified)
     (border-mode-line-inactive unspecified)
     (fg-mode-line-active fg-main)
     (border-mode-line-active blue-intense)
     (bg-tab-bar bg-main)
     (bg-tab-current bg-cyan-intense)
     (bg-tab-other bg-inactive)
     (bg-paren-match bg-magenta-intense)
     (prose-done green-intense)
     (prose-todo red-intense)
     (bg-term-black bg-term-black-bright)
     (fg-term-black fg-term-black-bright)
     ;; headings
     (fg-heading-1 fg-main)
     (bg-heading-1 bg-dim)
     (overline-heading-1 border)
     )
  )
(setq doom-theme 'modus-vivendi-tinted)
#+end_src

*** COMMENT doom theme

#+begin_src emacs-lisp
(custom-set-faces!
  '(font-lock-keyword-face :slant italic)
  '(font-lock-doc-face :slant italic)
  '(font-lock-comment-face :slant italic)
  )

;; (doom-themes-treemacs-config); not using treemacs
(doom-themes-org-config)
(doom-themes-visual-bell-config)
#+end_src
**** COMMENT doom one:

#+begin_src emacs-lisp
(setq doom-theme 'doom-one
      doom-one-brighter-comments nil
      doom-one-brighter-modeline t)
#+end_src

**** COMMENT tokyo night


#+begin_src emacs-lisp
(setq doom-theme 'doom-tokyo-night
  doom-tokyo-night-brighter-modeline nil
  doom-tokyo-night-brighter-comments t
  doom-tokyo-night-comment-bg t
  )
#+end_src
**** COMMENT doom-dark+


#+begin_src emacs-lisp
(setq doom-theme 'doom-dark+
  doom-dark+-blue-modeline t)
#+end_src
* Doom modules


This code is written to the =init.el= to select which modules to load. Written
here as-is for now, as it is quite well structured and clear.

** Active
:PROPERTIES:
:CREATED:  [2024-03-22 Fri 11:05]
:END:
#+begin_src emacs-lisp :tangle init.el
(doom! :input
  ;;chinese
  ;;japanese
  ;;layout            ; auie,ctsrnm is the superior home row

  :completion
  ;; TODO: test doom corfu implementation instead of our custom one
  ;; company           ; the ultimate code completion backend
  (corfu +orderless)  ; complete with cap(f), cape and a flying feather!

  ;;helm              ; the *other* search engine for love and life
  ;;ido               ; the other *other* search engine...
  ;;ivy               ; a search engine for love and life
  (vertico +icons)           ; the search engine of the future

  :ui
  ;;deft              ; notational velocity for Emacs
  doom              ; what makes DOOM look the way it does
  doom-dashboard    ; a nifty splash screen for Emacs
  doom-quit         ; DOOM quit-message prompts when you quit Emacs

  ;; emojify-mode makes scroll slow!
  ;;(emoji +unicode)  ; 🙂
  hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
  hydra
  indent-guides     ; highlighted indent columns
  ;;ligatures         ; ligatures and symbols to make your code pretty again
  ;;minimap           ; show a map of the code on the side

  ;; +light is nice, but see https://github.com/hlissner/emacs-hide-mode-line/issues/9
  (modeline);; +light)          ; snazzy, Atom-inspired modeline, plus API
  ;; nav-flash         ; blink cursor line after big motions
  ;;neotree           ; a project drawer, like NERDTree for vim
  ophints           ; highlight the region an operation acts on
  ;; (popup +defaults)   ; tame sudden yet inevitable temporary windows
  ;;tabs              ; a tab bar for Emacs
  treemacs          ; a project drawer, like neotree but cooler

  ;; See [[*Why not use unicode-fonts][Why not use unicode-fonts]] <2022-03-23 Wed>
  ;; unicode           ; extended unicode support for various languages
  ;; +pretty was slowing down scrolling
  ;; diff-hl is pretty and fast
  ;;(vc-gutter);; +pretty)         ; vcs diff in the fringe
  vi-tilde-fringe   ; fringe tildes to mark beyond EOB
  ;;window-select     ; visually switch windows
  ;; workspaces        ; tab emulation, persistence & separate workspaces
  ;;zen               ; distraction-free coding or writing

  :editor
  ;; (evil +everywhere); come to the dark side, we have cookies
  ;; file-templates    ; auto-snippets for empty files
  fold              ; (nigh) universal code folding
  (format +onsave)  ; automated prettiness (apheleia)
  ;;god               ; run Emacs commands without modifier keys
  ;;lispy             ; vim for lisp, for people who don't like vim
  ;;multiple-cursors  ; editing in many places at once
  ;;objed             ; text object editing for the innocent
  ;;parinfer          ; turn lisp into python, sort of
  ;;rotate-text       ; cycle region at point between text candidates
  ;; snippets          ; my elves. They type so I don't have to
  ;;word-wrap         ; soft wrapping with language-aware indent

  :emacs
  dired             ; making dired pretty [functional]
  electric          ; smarter, keyword-based electric-indent
  ;;ibuffer         ; interactive buffer management
  undo              ; persistent, smarter undo for your inevitable mistakes
  vc                ; version-control and Emacs, sitting in a tree

  :term
  ;;eshell            ; the elisp shell that works everywhere
  ;;shell             ; simple shell REPL for Emacs
  ;;term              ; basic terminal emulator for Emacs
  vterm             ; the best terminal emulation in Emacs

  :checkers
  syntax              ; tasing you for every semicolon you forget
  ;;(spell +flyspell) ; tasing you for misspelling mispelling
  ;;grammar           ; tasing grammar mistake every you make

  :tools
  ;;ansible
  ;;biblio            ; Writes a PhD for you (citation needed)
  ;;debugger          ; FIXME stepping through code, to help you add bugs
  direnv                ;uses https://github.com/purcell/envrc
  ;; docker
  editorconfig      ; let someone else argue about tabs vs spaces
  ;; ein               ; tame Jupyter notebooks with emacs
  eval     ; run code, run (also, repls) ;; +overlay disabled
  ;;gist              ; interacting with github gists
  ;;(lookup +docsets)              ; navigate your code and its documentation
  (lsp +peek)               ; M-x vscode
  (magit +forge)             ; a git porcelain for Emacs
  ;;make              ; run make tasks from Emacs
  ;;pass              ; password manager for nerds
  ;; pdf               ; pdf enhancements <-- pdf-tools + org-noter: this crashes emacs on `i` in a pdf file
  ;;prodigy           ; FIXME managing external services & code builders
  ;;rgb               ; creating color strings
  ;;taskrunner        ; taskrunner for all your projects
  ;;terraform         ; infrastructure as code
  ;;tmux              ; an API for interacting with tmux
  ;;upload            ; map local to remote projects via ssh/ftp

  :os
  (:if IS-MAC macos)  ; improve compatibility with macOS
  ;;tty               ; improve the terminal Emacs experience

  :lang
  ;;agda              ; types of types of types of types...
  ;;beancount         ; mind the GAAP
  (cc +lsp)         ; C > C++ == 1
  ;;clojure           ; java with a lisp
  ;;common-lisp       ; if you've seen one lisp, you've seen them all
  ;;coq               ; proofs-as-programs
  ;;crystal           ; ruby at the speed of c
  ;;csharp            ; unity, .NET, and mono shenanigans
  data              ; config/data formats
  ;;(dart +flutter)   ; paint ui and not much else
  ;;dhall
  ;;elixir            ; erlang done right
  ;;elm               ; care for a cup of TEA?
  emacs-lisp        ; drown in parentheses
  ;;erlang            ; an elegant language for a more civilized age
  ;;ess               ; emacs speaks statistics
  ;;factor
  ;;faust             ; dsp, but you get to keep your soul
  ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
  ;;fsharp            ; ML stands for Microsoft's Language
  ;;fstar             ; (dependent) types and (monadic) effects and Z3
  ;;gdscript          ; the language you waited for
  (go +lsp)         ; the hipster dialect
  ;;(haskell +lsp)    ; a language that's lazier than I am
  ;;hy                ; readability of scheme w/ speed of python
  ;;idris             ; a language you can depend on
  json              ; At least it ain't XML
  ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
  (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
  ;;julia             ; a better, faster MATLAB
  ;;kotlin            ; a better, slicker Java(Script)
  ;;latex             ; writing papers in Emacs has never been so fun
  ;;lean              ; for folks with too much to prove
  ;;ledger            ; be audit you can be
  lua               ; one-based indices? one-based indices
  markdown          ; writing docs for people to ignore
  ;;nim               ; python + lisp at the speed of c
  ;;nix               ; I hereby declare "nix geht mehr!"
  ;;ocaml             ; an objective camel

  ;; +pretty is quite slow! (org-superstar)
  (org +dragndrop +roam2);; +pretty)        ; organize your plain life in plain text
  ;;php               ; perl's insecure younger brother
  ;;plantuml          ; diagrams for confusing people more
  ;;purescript        ; javascript, but functional

  ;; +poetry is slow
  (python +lsp +pyright)            ; beautiful is better than ugly

  ;;qt                ; the 'cutest' gui framework ever
  ;;racket            ; a DSL for DSLs
  ;;raku              ; the artist formerly known as perl6
  ;;rest              ; Emacs as a REST client
  ;;rst               ; ReST in peace
  ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
  rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
  ;;scala             ; java, but good
  ;;(scheme +guile)   ; a fully conniving family of lisps
  sh                ; she sells {ba,z,fi}sh shells on the C xor
  ;;sml
  ;;solidity          ; do you need a blockchain? No.
  ;;swift             ; who asked for emoji variables?
  ;;terra             ; Earth and Moon in alignment for performance.
  ;;web               ; the tubes
  yaml              ; JSON, but readable
  ;;zig               ; C, but simpler

  :email
  ;;(mu4e +org +gmail)
  ;;notmuch
  ;;(wanderlust +gmail)

  :app
  ;;calendar
  ;;emms
  ;;everywhere        ; *leave* Emacs!? You must be joking
  ;;irc               ; how neckbeards socialize
  ;;(rss +org)        ; emacs as an RSS reader
  ;;twitter           ; twitter client https://twitter.com/vnought

  :config
  literate         ; for literate configs, (we prefer to use our own org-mode hook)
  (default +bindings));; +smartparens))
#+end_src

** COMMENT Latest

Use `ediff-regions-listwise` to merge the latest version of this with the block
above.

#+begin_src bash :results output :wrap SRC emacs-lisp
curl https://raw.githubusercontent.com/doomemacs/doomemacs/master/templates/init.example.el
#+end_src

#+RESULTS:
#+begin_SRC emacs-lisp
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;(corfu +orderless)  ; complete with cap(f), cape and a flying feather!
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       lookup              ; navigate your code and its documentation
       ;;lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_SRC



* startup profiling/debugging

** profiling code

https://github.com/hlissner/doom-emacs/issues/4498


#+begin_src emacs-lisp :tangle packages.el
(package! benchmark-init)
#+end_src

doom-debug-p renamed to init-file-debug (https://github.com/doomemacs/doomemacs/commit/14b239542414db812b32f9eca4fb58016d93d687)
~emacs --debug-init~ to do profiling

according to the doom emacs issues, this block should be in init.el, but that
doesn't work.. so it's at the beginning of config.el and commented out.

#+begin_src emacs-lisp
(when init-file-debug
  ;; https://github.com/dholm/benchmark-init-el/issues/15#issuecomment-766083560
  (define-advice define-obsolete-function-alias (:filter-args (ll) fix-obsolete)
    (let ((obsolete-name (pop ll))
          (current-name (pop ll))
          (when (if ll (pop ll) "1"))
          (docstring (if ll (pop ll) nil)))
      (list obsolete-name current-name when docstring)))
  ;; (require 'benchmark-init-modes)
  (require 'benchmark-init)
  (add-hook 'doom-first-input-hook #'benchmark-init/deactivate))
#+end_src

** COMMENT debugging

#+begin_src emacs-lisp :tangle packages.el
(package! bug-hunter)
#+end_src


* Disabled/unpinned packages

[[file:~/.emacs.d/lisp/packages.el][file:~/.emacs.d/lisp/packages.el]] see Pinned package versions

#+begin_src emacs-lisp :tangle packages.el

;; magit-todos: was slow on the startup, unused
(disable-packages! magit-todos)
(disable-packages! which-key)
(disable-packages! dired-git-info)
(disable-packages! highlight-indent-guides)

;; (package! transient :pin "55d5d41b48d7f7bc1ecf1f90c012d7821dff5724")


;; updates to a version that has org-store-link compatibility instead of 6633d82c6e3c921c486ec284cb6542f33278b605
(unpin! helpful)

;; https://github.com/doomemacs/doomemacs/issues/7244#issuecomment-1643370848
(package! magit :pin "26be78e")
(package! forge :pin "dc4e9ca")
#+end_src

* Basic config

** Timestamped \*Messages\*

https://old.reddit.com/r/emacs/comments/16tzu9/anyone_know_of_a_reasonable_way_to_timestamp/
#+begin_src emacs-lisp
;; timestamps in *Messages*

(require 'ts)
(defalias 'message-plain (symbol-function 'message))
(defun message (fmt-string &rest args)
  (let ((message-truncate-lines t))
    (apply
     'message-plain
     (concat (ts-format "[%Y-%m-%dT%T]: ") fmt-string)
     args)))
#+end_src

** General
#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Venky Iyer"
      user-mail-address "indigoviolet@gmail.com")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;; For some reason Doom disables auto-save and backup files by default. Let's reenable them.
(setq auto-save-default t
      make-backup-files t)

;; Disable exit confirmation.
;; (setq confirm-kill-emacs nil)

(setq confirm-nonexistent-file-or-buffer 'after-completion)

;; indent anywhere, no completion on tab
(setq tab-always-indent t)

(setq scroll-preserve-screen-position 'always)

;; gets pageup/pagedown to ends of buffer
(setq scroll-error-top-bottom t)

;; https://stackoverflow.com/a/19782939/14044156
(setq suggest-key-bindings nil)

;; ;; truncates lines so that when you scroll toward the end of one, the line
;; ;; itself moves to the left independently of the rest of the text.
;; (setq auto-hscroll-mode 'current-line)
(setq auto-hscroll-mode t) ; not 'current-line

;; line wrapping
;;
(global-visual-line-mode t)
(add-hook! '(prog-mode-hook bufler-list-mode-hook)
           (defun vi/truncate-lines ()
             (setq-local truncate-partial-width-windows t)
             (visual-line-mode -1)))

;; truncate-lines t)
;;
(setq message-truncate-lines t)


;; https://www.masteringemacs.org/article/demystifying-emacs-window-manager
(setq switch-to-buffer-obey-display-actions t)

;; (global-git-gutter-mode t)

;; (repeat-mode 1)

;; (setq server-socket-dir "~/.emacs.d/server")
(require 'server)
(unless (server-running-p)
  (server-start))

;; https://pragmaticemacs.wordpress.com/2016/11/07/add-the-system-clipboard-to-the-emacs-kill-ring/
;; Save whatever’s in the current (system) clipboard before
;; replacing it with the Emacs’ text.
;; https://github.com/dakrone/eos/blob/master/eos.org
(setq save-interprogram-paste-before-kill t)

(defvar vi/home-dir (expand-file-name "~/")
  "The home directory path.")

;; https://github.com/emacs-lsp/lsp-mode#performance
;; vterm as well
(setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq process-adaptive-read-buffering nil)
#+end_src

** uniquify


#+begin_src emacs-lisp
(setq! uniquify-buffer-name-style 'post-forward
  uniquify-after-kill-buffer-p t
  uniquify-min-dir-content 3
  uniquify-separator " | "
  uniquify-strip-common-prefix t)

#+end_src
** whitespace


#+begin_src emacs-lisp
;; (global-whitespace-mode +1)
(setq! whitespace-style '(face tabs tab-mark trailing))
(add-hook! (prog-mode org-mode text-mode) (whitespace-mode t))
#+end_src


** specpdl size

https://old.reddit.com/r/emacs/comments/9jp9zt/anyone_know_what_variable_binding_depth_exceeds/
#+begin_src emacs-lisp
(setq max-specpdl-size 25000)
#+end_src

** Custom.el handling

#+begin_src emacs-lisp
;; (setq custom-file (make-temp-file "emacs-custom"))
(setq custom-file (expand-file-name "custom.el" doom-private-dir))
;; (setq custom-file "/tmp/emacs-custom")

(load custom-file 'noerror)
#+end_src

** dir-locals.el safe Variables

Turn off "don't remember risky variables" feature

#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/a/44604
;; This actually just skips them instead of setting them regardless
;; (advice-add 'risky-local-variable-p :override #'ignore)


(setq enable-local-variables :all)
#+end_src

** Prevent *Warnings* buffer from popping up


#+begin_src emacs-lisp
(setq warning-minimum-level :error)
#+end_src

** Unadvice functions

https://emacs.stackexchange.com/a/24658 -- not sure if this works?

#+begin_src emacs-lisp
(defun advice-unadvice (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))
#+end_src
** persistent scratch


#+begin_src emacs-lisp :tangle packages.el
(package! persistent-scratch)
#+end_src


#+begin_src emacs-lisp
(use-package! persistent-scratch
  :after-call doom-first-buffer-hook
  :custom
  (persistent-scratch-save-file (concat doom-emacs-dir "persistent-scratch"))
  (persistent-scratch-backup-directory (concat doom-emacs-dir "/backups"))
  (persistent-scratch-backup-file-name-format "persistent-scratch-%Y-%m-%d--%H-%M-%S-%N")
  :config
  (persistent-scratch-setup-default)
  )
#+end_src

** backups




#+begin_src emacs-lisp
(defun vi/backup-enable-predicate (filename)
  "Enable backup for files in specific directories and their subdirectories"
  (let ((dirs '("~/.config/doom/" "~/")))
    (cl-some (lambda (dir)
               (string-prefix-p (file-truename dir) (file-truename filename)))
             dirs)))
(defvar --backup-directory (concat doom-emacs-dir "/backups"))
(if (not (file-exists-p --backup-directory))
        (make-directory --backup-directory t))

(setq backup-directory-alist `(("." . ,--backup-directory)))
(setq make-backup-files t               ; backup of a file the first time it is saved.
  backup-inhibited nil
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
  kept-old-versions 25               ; oldest versions to keep when a new numbered backup is made (default: 2)
  kept-new-versions 25              ; newest versions to keep when a new numbered backup is made (default: 2)

  backup-enable-predicate #'vi/backup-enable-predicate
      )

(defun vi/backup-files ()
  "Find backup files for a specified file."
  (interactive)
  (let* ((filename (read-file-name "Enter file name: "))
         (backup-files (file-backup-file-names filename)))
    (if backup-files
      (let ((backup-file (completing-read "Select backup file: " backup-files)))
        (find-file backup-file))
      (message "No backup files found for %s" filename))))
#+end_src


* Global keybindings


#+begin_src emacs-lisp
(map! "M-i" #'delete-indentation
      "M-t" #'beginning-of-buffer
      "M-z" #'end-of-buffer
  "C-S-W" #'delete-region                 ;can use M-w C-w for kill-region
  "<escape>" #'keyboard-escape-quit
      "C-x k" #'kill-buffer-and-window
      "<f5>" (cmd! (revert-buffer t t)))
#+end_src

** digit-argument

Unbind digit-argument keys across multiple maps -- we never use this and it's
occupying keyspace

#+begin_src emacs-lisp
(dolist (num (number-sequence 0 9))
  (dolist (prefix (list "C-" "M-" "C-M-" "ESC "))
    (let ((k (concat prefix (format "%s" num))))
      (map! :map (global-map splash-screen-keymap) k nil)
      )))
#+end_src


** Eval

#+begin_src emacs-lisp :tangle packages.el
(package! pp+ :recipe (:host github :repo "emacsmirror/pp-plus"))
#+end_src

https://old.reddit.com/r/emacs/comments/qfhzjg/make_better_use_of_cx_ce/


#+begin_src emacs-lisp
(use-package! pp+
  :commands (pp-eval-expression pp-eval-last-sexp)
  :custom
  (pp-max-tooltip-size nil) ;; (cons 40 20)) ;; tooltips are slowww
  :config
  (global-set-key [remap eval-expression] 'pp-eval-expression)
  ;; (global-set-key [remap eros-eval-last-sexp] 'pp-eval-last-sexp)
  (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp))
#+end_src

* (Disable) Mouse

#+begin_src emacs-lisp :tangle packages.el
(package! disable-mouse)
#+end_src

#+begin_src emacs-lisp
(use-package! disable-mouse
  :after-call doom-first-input-hook
  :config
  ;;(global-disable-mouse-mode)
  )
#+end_src

* Chords

https://dzone.com/articles/rare-letter-combinations-and


#+begin_example
❯ curl -Ov https://www.johndcook.com/unordered_bigram_frequencies.csv
❯ rg --pcre2 '^([A-Z])\1' unordered_bigram_frequencies.csv
29:JJ,0
43:KK,0
69:QQ,0
90:VV,0
96:WW,0
111:YY,0
135:HH,0.001
154:UU,0.001
197:AA,0.003
212:XX,0.003
215:ZZ,0.003
274:BB,0.011
299:II,0.023
302:GG,0.025
331:DD,0.043
378:NN,0.073
383:CC,0.083
400:MM,0.096
421:RR,0.121
426:PP,0.137
431:FF,0.146
442:TT,0.171
457:OO,0.21
526:EE,0.378
535:SS,0.405
572:LL,0.577
#+end_example


#+begin_src emacs-lisp :tangle packages.el
(package! key-chord)
#+end_src

#+begin_src emacs-lisp
;; distributed with use-package? TODO errors -- use key-chord-define-global directly
;; (use-package! use-package-chords)

(use-package! key-chord
  :after-call doom-first-input-hook
  :custom

  ;; Max time delay between two key presses to be considered a key chord
  (key-chord-two-keys-delay 0.2) ; default 0.1

  ;; Max time delay between two presses of the same key to be considered a key chord.
  ;; Should normally be a little longer than `key-chord-two-keys-delay'.
  (key-chord-one-key-delay 0.4) ; default 0.2
  (key-chord-safety-interval-forward 0.0)
  :config (key-chord-mode 1)
  )
#+end_src

* Colors/display
** dim other buffers

+Leads to all kinds of hell -- errors everywhere. unclear what this is conflicting with.
+https://github.com/mina86/auto-dim-other-buffers.el/issues/32+

#+begin_src emacs-lisp :tangle packages.el
(package! auto-dim-other-buffers)
#+end_src

#+begin_src emacs-lisp
(use-package! auto-dim-other-buffers
  :after-call doom-first-buffer-hook
  :config
  (auto-dim-other-buffers-mode t)
  )
#+end_src
** Rainbow
:LOGBOOK:
- State "KILL"       from "DONE"       [2022-01-26 Wed 17:28]
- State "DONE"       from "WAIT"       [2022-01-26 Wed 17:28]
- State "WAIT"       from "TODO"       [2022-01-26 Wed 17:28]
- State "KILL"       from "DONE"       [2022-01-26 Wed 17:28]
- State "DONE"       from "WAIT"       [2022-01-26 Wed 17:28]
- State "WAIT"       from "TODO"       [2022-01-26 Wed 17:28]
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! rainbow-mode)
(package! rainbow-delimiters)
(package! rainbow-identifiers)
#+end_src


#+begin_src emacs-lisp
(use-package! rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :custom
  (rainbow-delimiters-max-face-count 9)

  :config
  (set-face-foreground 'rainbow-delimiters-depth-1-face "white")
  (set-face-foreground 'rainbow-delimiters-depth-2-face "cyan")
  (set-face-foreground 'rainbow-delimiters-depth-3-face "yellow")
  (set-face-foreground 'rainbow-delimiters-depth-4-face "green")
  (set-face-foreground 'rainbow-delimiters-depth-5-face "orange")
  (set-face-foreground 'rainbow-delimiters-depth-6-face "purple")
  (set-face-foreground 'rainbow-delimiters-depth-7-face "white")
  (set-face-foreground 'rainbow-delimiters-depth-8-face "cyan")
  (set-face-foreground 'rainbow-delimiters-depth-9-face "yellow")
  (set-face-foreground 'rainbow-delimiters-unmatched-face "red"))


(use-package! rainbow-identifiers
  :init
  ;; Use C-u what-cursor-position to figure out what face
  ;; https://stackoverflow.com/questions/1242352/get-font-face-under-cursor-in-emacs
  (setq rainbow-identifiers-faces-to-override '(font-lock-type-face
                                                font-lock-variable-name-face
                                                font-lock-function-name-face
                                                font-lock-function-name-face
                                                font-lock-constant-face
                                                ;; font-lock-string-face

                                                js2-function-call
                                                js2-object-property
                                                js2-object-property-access

                                                ))

  ;; :config
  ;; (setq rainbow-identifiers-face-count 50)
  ;; (setq rainbow-identifiers-cie-l*a*b*-color-count 50)
  ;; (setq rainbow-identifiers-choose-face-function #'rainbow-identifiers-cie-l*a*b*-choose-face)


  :config
  (setq rainbow-identifiers-face-count 222)
  ;; (setq rainbow-identifiers-choose-face-function (quote rainbow-identifiers-cie-l*a*b*-choose-face))
  (setq rainbow-identifiers-choose-face-function (quote rainbow-identifiers-predefined-choose-face))

  (defmacro vi-rainbow-identifiers--define-faces ()
    (let ((faces '())
          ;; Light colors don't matter, but we need them to define the face
          (light-colors [
                         ;; "#78683f" "#43783f" "#3f7178" "#513f78" "#783f5a"
                         ;; "#707e4f" "#4f7e67" "#4f5c7e" "#7a4f7e" "#7e544f"
                         ;; "#783778" "#784437" "#5e7837" "#37785e" "#374478"

                         ;; 219 colors derived from list-colors-display with dark colors removed
                         "#0000af" "#0000d7" "#0000ee" "#0000ff" "#005f00" "#005f5f" "#005f87"
                         "#005faf" "#005fd7" "#005fff" "#008700" "#00875f" "#008787" "#0087af"
                         "#0087d7" "#0087ff" "#00af00" "#00af5f" "#00af87" "#00afaf" "#00afd7"
                         "#00afff" "#00cd00" "#00cdcd" "#00d700" "#00d75f" "#00d787" "#00d7af"
                         "#00d7d7" "#00d7ff" "#00ff00" "#00ff5f" "#00ff87" "#00ffaf" "#00ffd7"
                         "#00ffff" "#5c5cff"
                         ;; "#5f0000" "#5f005f"
                         ;; "#5f0087"
                         ;; "#5f00af"
                         ;; "#5f00d7"
                         ;; "#5f00ff"
                         "#5f5f00" "#5f5f5f" "#5f5f87" "#5f5faf" "#5f5fd7" "#5f5fff"
                         "#5f8700" "#5f875f" "#5f8787" "#5f87af" "#5f87d7" "#5f87ff" "#5faf00"
                         "#5faf5f" "#5faf87" "#5fafaf" "#5fafd7" "#5fafff" "#5fd700" "#5fd75f"
                         "#5fd787" "#5fd7af" "#5fd7d7" "#5fd7ff" "#5fff00" "#5fff5f" "#5fff87"
                         "#5fffaf" "#5fffd7" "#5fffff" "#7f7f7f"
                         ;; "#870000"
                         "#87005f"
                         ;; "#870087"
                         "#8700af"
                         ;; "#8700d7"
                         ;; "#8700ff"
                         "#875f00" "#875f5f" "#875f87" "#875faf"
                         "#875fd7" "#875fff" "#878700" "#87875f" "#878787" "#8787af" "#8787d7"
                         "#8787ff" "#87af00" "#87af5f" "#87af87" "#87afaf" "#87afd7" "#87afff"
                         "#87d700" "#87d75f" "#87d787" "#87d7af" "#87d7d7" "#87d7ff" "#87ff00"
                         "#87ff5f" "#87ff87" "#87ffaf" "#87ffd7" "#87ffff" "#af0000" "#af005f"
                         "#af0087" "#af00af" "#af00d7" "#af00ff" "#af5f00" "#af5f5f" "#af5f87"
                         "#af5faf" "#af5fd7" "#af5fff" "#af8700" "#af875f" "#af8787" "#af87af"
                         "#af87d7" "#af87ff" "#afaf00" "#afaf5f" "#afaf87" "#afafaf" "#afafd7"
                         "#afafff" "#afd700" "#afd75f" "#afd787" "#afd7af" "#afd7d7" "#afd7ff"
                         "#afff00" "#afff5f" "#afff87" "#afffaf" "#afffd7" "#afffff" "#cd0000"
                         "#cd00cd" "#cdcd00" "#d70000" "#d7005f" "#d70087" "#d700af" "#d700d7"
                         "#d700ff" "#d75f00" "#d75f5f" "#d75f87" "#d75faf" "#d75fd7" "#d75fff"
                         "#d78700" "#d7875f" "#d78787" "#d787af" "#d787d7" "#d787ff" "#d7af00"
                         "#d7af5f" "#d7af87" "#d7afaf" "#d7afd7" "#d7afff" "#d7d700" "#d7d75f"
                         "#d7d787" "#d7d7af" "#d7d7d7" "#d7d7ff" "#d7ff00" "#d7ff5f" "#d7ff87"
                         "#d7ffaf" "#d7ffd7" "#d7ffff" "#e5e5e5" "#ff0000" "#ff005f" "#ff0087"
                         "#ff00af" "#ff00d7" "#ff00ff" "#ff5f00" "#ff5f5f" "#ff5f87" "#ff5faf"
                         "#ff5fd7" "#ff5fff" "#ff8700" "#ff875f" "#ff8787" "#ff87af" "#ff87d7"
                         "#ff87ff" "#ffaf00" "#ffaf5f" "#ffaf87" "#ffafaf" "#ffafd7" "#ffafff"
                         "#ffd700" "#ffd75f" "#ffd787" "#ffd7af" "#ffd7d7" "#ffd7ff" "#ffff00"
                         "#ffff5f" "#ffff87" "#ffffaf" "#ffffd7" "#ffffff"
                         ])
          (dark-colors [
                        ;; Original 15
                        ;; "#9999bb" "#bb99b4" "#bba699" "#a6bb99" "#99bbb4"
                        ;; "#e0d0a0" "#a3e0a0" "#a0d6e0" "#b6a0e0" "#e0a0bc"
                        ;; "#a7c0b9" "#a7aac0" "#c0a7bd" "#c0afa7" "#b3c0a7"

                        ;; 219 colors derived from list-colors-display with dark colors removed
                        "#0000af" "#0000d7" "#0000ee" "#0000ff" "#005f00" "#005f5f" "#005f87"
                        "#005faf" "#005fd7" "#005fff" "#008700" "#00875f" "#008787" "#0087af"
                        "#0087d7" "#0087ff" "#00af00" "#00af5f" "#00af87" "#00afaf" "#00afd7"
                        "#00afff" "#00cd00" "#00cdcd" "#00d700" "#00d75f" "#00d787" "#00d7af"
                        "#00d7d7" "#00d7ff" "#00ff00" "#00ff5f" "#00ff87" "#00ffaf" "#00ffd7"
                        "#00ffff" "#5c5cff"
                        ;; "#5f0000" too dark
                        ;; "#5f005f" too dark
                        ;; "#5f0087"
                        ;; "#5f00af" "#5f00d7"
                        ;; "#5f00ff"
                        "#5f5f00" "#5f5f5f" "#5f5f87" "#5f5faf" "#5f5fd7" "#5f5fff"
                        "#5f8700" "#5f875f" "#5f8787" "#5f87af" "#5f87d7" "#5f87ff" "#5faf00"
                        "#5faf5f" "#5faf87" "#5fafaf" "#5fafd7" "#5fafff" "#5fd700" "#5fd75f"
                        "#5fd787" "#5fd7af" "#5fd7d7" "#5fd7ff" "#5fff00" "#5fff5f" "#5fff87"
                        "#5fffaf" "#5fffd7" "#5fffff" "#7f7f7f"
                        ;; "#870000"  too dark
                        "#87005f"
                        ;; "#870087"
                        "#8700af"
                        ;; "#8700d7"
                        ;; "#8700ff"
                        "#875f00" "#875f5f" "#875f87" "#875faf"
                        "#875fd7" "#875fff" "#878700" "#87875f" "#878787" "#8787af" "#8787d7"
                        "#8787ff" "#87af00" "#87af5f" "#87af87" "#87afaf" "#87afd7" "#87afff"
                        "#87d700" "#87d75f" "#87d787" "#87d7af" "#87d7d7" "#87d7ff" "#87ff00"
                        "#87ff5f" "#87ff87" "#87ffaf" "#87ffd7" "#87ffff" "#af0000" "#af005f"
                        "#af0087" "#af00af" "#af00d7" "#af00ff" "#af5f00" "#af5f5f" "#af5f87"
                        "#af5faf" "#af5fd7" "#af5fff" "#af8700" "#af875f" "#af8787" "#af87af"
                        "#af87d7" "#af87ff" "#afaf00" "#afaf5f" "#afaf87" "#afafaf" "#afafd7"
                        "#afafff" "#afd700" "#afd75f" "#afd787" "#afd7af" "#afd7d7" "#afd7ff"
                        "#afff00" "#afff5f" "#afff87" "#afffaf" "#afffd7" "#afffff" "#cd0000"
                        "#cd00cd" "#cdcd00" "#d70000" "#d7005f" "#d70087" "#d700af" "#d700d7"
                        "#d700ff" "#d75f00" "#d75f5f" "#d75f87" "#d75faf" "#d75fd7" "#d75fff"
                        "#d78700" "#d7875f" "#d78787" "#d787af" "#d787d7" "#d787ff" "#d7af00"
                        "#d7af5f" "#d7af87" "#d7afaf" "#d7afd7" "#d7afff" "#d7d700" "#d7d75f"
                        "#d7d787" "#d7d7af" "#d7d7d7" "#d7d7ff" "#d7ff00" "#d7ff5f" "#d7ff87"
                        "#d7ffaf" "#d7ffd7" "#d7ffff" "#e5e5e5" "#ff0000" "#ff005f" "#ff0087"
                        "#ff00af" "#ff00d7" "#ff00ff" "#ff5f00" "#ff5f5f" "#ff5f87" "#ff5faf"
                        "#ff5fd7" "#ff5fff" "#ff8700" "#ff875f" "#ff8787" "#ff87af" "#ff87d7"
                        "#ff87ff" "#ffaf00" "#ffaf5f" "#ffaf87" "#ffafaf" "#ffafd7" "#ffafff"
                        "#ffd700" "#ffd75f" "#ffd787" "#ffd7af" "#ffd7d7" "#ffd7ff" "#ffff00"
                        "#ffff5f" "#ffff87" "#ffffaf" "#ffffd7" "#ffffff"
                        ]))
      (dotimes (i 212)
        (push `(defface ,(intern (format "rainbow-identifiers-identifier-%d" (1+ i)))
                 '((((class color) (background dark)) :foreground ,(aref dark-colors i))
                   ;; doesn't matter, we don't use light background
                   (((class color) (background light)) :foreground ,(aref light-colors i)))
                 ,(format "Identifier face #%d" (1+ i))
                 :group 'rainbow-identifiers-faces)
              faces))
      `(progn ,@faces)))
  (vi-rainbow-identifiers--define-faces)

  :hook
  ((prog-mode . rainbow-identifiers-mode)
  (yaml-mode . rainbow-identifiers-mode)
    (yaml-ts-mode . rainbow-identifiers-mode)

    )
  )
#+end_src

** ansi colors

Changes the colors used for mapping from SGR codes to emacs colors, in the
function ~ansi-color-apply~ in ansi-colors.el

These are controlled by the variable ~ansi-color-normal-colors-vector~~ which
lists a bunch of faces like ~ansi-color-red~

This is used in ein:tb buffers to (presumably) display some server-side
traceback in emacs, and ansi-color-yellow is particularly hard to read.
(:background yellow3)

#+begin_src emacs-lisp
(custom-set-faces!
  '(ansi-color-yellow :background "orange4")
  )
#+end_src

** COMMENT Solaire-mode

gives "unreal" (as defined by solaire-mode-real-buffer-fn returning nil) buffers
a darker background

*** vterm

solaire breaks ~rich~ (test with ~python -m rich.diagnose~), and therefore ~nbterm~

Hence we turn off solaire-mode in vterm by calling vterm buffers "real"

#+begin_src emacs-lisp
(defun vi/solaire-real-buffer-p ()
  (if (memq major-mode '(vterm-mode)) t
    (solaire-mode-real-buffer-p))
  )
(setq solaire-mode-real-buffer-fn #'vi/solaire-real-buffer-p)
#+end_src
** hl-line


#+begin_src emacs-lisp

;; https://christiantietze.de/posts/2022/03/hl-line-priority/
(setq hl-line-overlay-priority -100)
#+end_src

*** COMMENT hl-line+

#+begin_src emacs-lisp :tangle packages.el
(package! hl-line+ :recipe (:host github :repo "emacsmirror/hl-line-plus"))
#+end_src



#+begin_src emacs-lisp
(use-package! hl-line+
  :hook
  (window-scroll-functions . hl-line-flash)
  (focus-in . hl-line-flash)
  (post-command . hl-line-flash)

  :custom
  ;;(global-hl-line-mode nil)
  (hl-line-flash-show-period 0.5)
  ;; (hl-line-inhibit-highlighting-for-modes '(dired-mode))
  )
#+end_src


** cursor


#+begin_src emacs-lisp
(blink-cursor-mode)

;; Addition to nav-flash
;; (dolist (command '(scroll-up-command scroll-down-command previous-line next-line
;;                    recenter-top-bottom other-window))
;;   ;; (advice-add command :after #'pulse-line)
;;   (advice-add command :after #'+nav-flash-delayed-blink-cursor-h)
;;   )
#+end_src

*** pulsar


#+begin_src emacs-lisp :tangle packages.el
(package! pulsar)
#+end_src


#+begin_src emacs-lisp
(use-package! pulsar
  :custom
  (pulsar-pulse t)
  (pulsar-delay 0.05)
  (pulsar-iterations 3)
  (pulsar-face 'pulsar-red)
  (pulsar-highlight-face 'pulsar-yellow)
  :config
  (pulsar-global-mode 1)
  :hook (
          ;;(consult-after-jump . pulsar-recenter-top)
          (consult-after-jump . pulsar-reveal-entry)

          )
  :bind (
          ("C-x l" . pulsar-highlight-dwim)
          ("C-l" . pulsar-recenter-middle)
          )
  )

(custom-set-faces! '(pulsar-red :background "red"))
#+end_src
*** COMMENT centered

#+begin_src emacs-lisp :tangle packages.el
(package! centered-cursor-mode)
#+end_src


#+begin_src emacs-lisp
(global-centered-cursor-mode)
#+end_src

** font lock

Does this make things faster?
#+begin_src emacs-lisp
(setq font-lock-maximum-decoration nil)
#+end_src
** COMMENT tabs


#+begin_src emacs-lisp
(tab-bar-mode 1)                           ;; enable tab bar
(global-tab-line-mode t)
(setq tab-bar-show t)
(setq tab-bar-close-button-show nil)       ;; hide tab close / X button
(setq tab-bar-new-button-show nil)       ;; hide tab close / X button
(setq tab-bar-tab-hints nil)                 ;; show tab numbers
(setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator))
(setq tab-bar-auto-width nil)

(setq tab-line-close-button-show nil)       ;; hide tab close / X button
(setq tab-line-new-button-show nil)       ;; hide tab close / X button

#+end_src


*** switching tabs

https://github.com/alphapapa/bufler.el/issues/84

- [] filter out hidden buffers and special tabs?
- [] cycle?
- wrap bufler's tabs function to be stable?

#+begin_src emacs-lisp
(defun vi/tab-line-first-buffer ()
  (seq-first (bufler-workspace-buffers)))

(defun vi/tab-line-last-buffer ()
  (let* (
          (bufs (bufler-workspace-buffers))
          (len (seq-length bufs))
          )
    (seq-elt bufs (- len 1))))

;; these select the first/last buffer on the tab-line of the next tab so that bufler-tabs-mode won't revert back
(defun vi/next-tab ()
  (interactive)
  (progn (tab-bar-switch-to-next-tab) (switch-to-buffer (vi/tab-line-first-buffer))))

(defun vi/prev-tab ()
  (interactive)
  (progn (tab-bar-switch-to-next-tab) (switch-to-buffer (vi/tab-line-last-buffer))))

;; these switch to the next buffer on the tab-line and then to the next tab when the last tab-line buffer is reached
(defun vi/next-tab-buffer ()
  (interactive)
  (if (eq (current-buffer) (vi/tab-line-last-buffer))
    (vi/next-tab)
    (tab-line-switch-to-next-tab)))

(defun vi/prev-tab-buffer ()
  (interactive)
  (if (eq (current-buffer) (vi/tab-line-first-buffer))
    (vi/prev-tab)
    (tab-line-switch-to-prev-tab)))


#+end_src
** highlights


#+begin_src emacs-lisp :tangle packages.el
(package! goggles :recipe (:host github :repo "minad/goggles"))
#+end_src


#+begin_src emacs-lisp
;; (volatile-highlights-mode -1)
(use-package! goggles
  :hook ((prog-mode text-mode org-mode) . goggles-mode)
  :config
  (setq-default goggles-pulse t)) ;; set to nil to disable pulsing
#+end_src
** diff-hl


#+begin_src emacs-lisp :tangle packages.el
(package! diff-hl)
#+end_src


#+begin_src emacs-lisp
(global-diff-hl-mode)
(add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

#+end_src

* Parens

** with parens-mode

#+begin_src emacs-lisp
  (after! paren
    (setq show-paren-style 'expression)
    (setq show-paren-priority -25)
    (setq show-paren-delay 0.5)
    (custom-set-faces!
      ;; these are modus operandi faces
      '(show-paren-match :inherit bg-paren-match)
      '(show-paren-match-expression :inherit bg-paren-expression)
      '(show-paren-mismatch :weight bold :underline t :slant normal)
      ))
;; https://github.com/doomemacs/doomemacs/issues/6223
  (remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+end_src

** COMMENT with smartparens-mode

show-smartparens mode is slower than show-paren mode

#+begin_src emacs-lisp
(after! smartparens
  (show-smartparens-global-mode t)
  (setq sp-show-pair-delay 5)
  (setq sp-show-pair-match-priority -50)
  (custom-set-faces!
    '(sp-show-pair-match-content-face :background "darkgreen"))
  )
#+end_src

** wrap region

#+begin_src emacs-lisp :tangle packages.el
(package! wrap-region)
#+end_src

#+begin_src emacs-lisp
(use-package! wrap-region
  :after-call doom-first-input-hook
  :config
  (wrap-region-add-wrapper "~" "~" nil '(org-mode))
  (wrap-region-add-wrapper "'" "'" nil '(prog-mode))
  (wrap-region-add-wrapper "\"" "\"" nil '(prog-mode))
  :hook ((prog-mode . wrap-region-mode)
          (org-mode . wrap-region-mode))
  )
#+end_src

* COMMENT environment

#+begin_src emacs-lisp :tangle packages.el
(package! exec-path-from-shell)
#+end_src
* Garbage collection

#+begin_src emacs-lisp
(use-package! gcmh
    :custom
    (gcmh-verbose t)
    (gcmh-idle-delay '15)
    (gcmh-high-cons-threshold 10000000000)
  )

(defun vi/maybe-gc ()
  (interactive)
  (unless (frame-focus-state) (garbage-collect)))

(add-function :after
  after-focus-change-function
  (lambda () (run-with-timer 15 nil #'vi/maybe-gc)))

#+end_src
* Elisp

** Indentation

#+begin_src emacs-lisp
(use-package! emacs
    :after-call doom-first-buffer-hook
    :custom
    (lisp-body-indent 4)
    (lisp-indent-offset 2))
#+end_src

** Libraries
https://xenodium.com/modern-elisp-libraries/

TODO: Look into seq, map, cl- instead of dash/ht


#+begin_src emacs-lisp :tangle packages.el
(package! dash)
(package! s)
(package! f)
(package! ht)
(package! ts)
#+end_src



** Snippets

*** Find version of an installed package
#+begin_example elisp
(with-current-buffer (find-file-noselect (locate-library "consult.el"))
  (lm-version))
#+end_example

*** Debug hooks

#+begin_src emacs-lisp
(defun vi/call-logging-hooks (command &optional verbose)
  "Call COMMAND, reporting every hook run in the process.
Interactively, prompt for a command to execute.

Return a list of the hooks run, in the order they were run.
Interactively, or with optional argument VERBOSE, also print a
message listing the hooks."
  (interactive "CCommand to log hooks: \np")
  (let* ((log nil)
         (logger (lambda (&rest hooks)
                   (setq log (append log hooks nil)))))
    (vi/with-advice 'run-hooks :before logger
                    (call-interactively command))
    (when verbose
      (message
       (if log "Hooks run during execution of %s:"
         "No hooks run during execution of %s.")
       command)
      (dolist (hook log)
        (message "> %s" hook)))
    log))


(defmacro vi/with-advice (func where adfunc body)
  `(unwind-protect
       (progn
         (advice-add ,func ,where ,adfunc '((name . "vi/with-advice")))
         ,body)
     (advice-remove ,func "vi/with-advice")))
#+end_src

* Find file - mark readonly

#+begin_src emacs-lisp :tangle packages.el
(package! hardhat :recipe (:host github :repo "rolandwalker/hardhat"))
#+end_src

Notes:

- If a file is incorrectly marked read-only by hardhat, check variable ~~hardhat-reasons~~ (buffer-local), or ~hardhat-status~
- ~hardhat-computed-regexps~ is _cached_. Clear using ~(puthash major-mode nil hardhat-computed-regexps)~ -- see the hook below
- hardhat will only act after _the first interactive command in the buffer_

#+begin_src emacs-lisp
(use-package! hardhat
  :after-call doom-first-file-hook
  :config
  (add-to-list 'hardhat-fullpath-protected-regexps "/node_modules/")
  (add-to-list 'hardhat-fullpath-protected-regexps "/site-packages/")
  (add-to-list 'hardhat-fullpath-protected-regexps "/straight/repos/")

  ;; We want to edit Jupytext files via ein/Jupyter
  (add-to-list 'hardhat-bof-content-protected-regexps '(python-mode . "^# +jupytext:"))

  ;; ignoramus-file-exact-names matches this
  ;; hardhat-fullpath-editable-regexps doesn't match it in all cases (eg. yadm/repo.git/COMMIT_EDITMSG)
  (add-to-list 'hardhat-basename-editable-regexps "\\`COMMIT_EDITMSG\\'")

  ;; (setq ignoramus-file-exact-names (remove "COMMIT_EDITMSG" ignoramus-file-exact-names))

  ;; clear the cache upon toggling
  (add-hook! 'hardhat-mode-hook (puthash major-mode nil hardhat-computed-regexps))
  (global-hardhat-mode 1)
  )
#+end_src
* Auto saving and backups

https://pragmaticemacs.wordpress.com/2016/05/23/auto-save-and-backup-every-save/

#+begin_src emacs-lisp
;; Every 20 characters
(setq! auto-save-interval 20)
#+end_src

** backups

#+begin_src emacs-lisp
(setq! kept-new-versions 20
       vc-make-backup-files t
       kept-old-versions 0)
#+end_src

* modeline

Debugging: look at mode-line-format, mode-line-misc-info

TODO: would like to add a segment like anzu for iterm, ctrlf

#+begin_src emacs-lisp

(setq doom-emoji-fallback-font-families nil)
(after! doom-modeline
  (setq mode-line-default-help-echo nil
    doom-modeline-checker-simple-format nil
    show-help-function nil
    doom-modeline-vcs-max-length 24
    ;; doom-modeline-icon nil
    ;; doom-modeline-major-mode-color-icon nil
    doom-modeline-persp-name nil)

  (doom-modeline-def-segment purpose
    ;; Purpose-mode segment
    (when (and (boundp 'purpose-mode) purpose-mode (doom-modeline--active) (not doom-modeline--limited-width-p))
      (format (if (purpose-window-purpose-dedicated-p) "[%s]*" "[%s]") (purpose-window-purpose))))


  (doom-modeline-def-segment vi/window-info
    ;; Useful for debugging: show window name in the modeline
    (concat (doom-modeline-spc) (format "%s" (get-buffer-window))))

  (doom-modeline-def-segment recursion-depth
    "Recursive-edit depth indicator. Used in yadm-status"
    (let ((rd (recursion-depth)))
      (when (> rd 0)
        (concat (doom-modeline-spc)
          (propertize
            (concat
              " "
              (doom-modeline-icon 'faicon "nf-fa-recycle" nil nil
                :face 'all-the-icons-dsilver
                :height 0.9
                :v-adjust 0.0)
              (format " %s " rd))
            'face 'doom-modeline-warning
            'help-echo "Recursive-edit: C-] to quit")
            ))))


  ;; best to name this 'main, since main gets set as the default in
  ;; doom-modeline. other names don't seem to take effect as default..
  (doom-modeline-def-modeline 'main
    '(bar buffer-info-simple selection-info remote-host recursion-depth check matches)
    '(debug repl process lsp vcs minor-modes major-mode misc-info))

  (doom-modeline-def-modeline 'org-src
   '(bar buffer-info-simple selection-info matches)
    '(debug lsp minor-modes major-mode))

  (doom-modeline-def-modeline 'vcs
    '(bar buffer-info-simple selection-info remote-host recursion-depth)
    '( debug github process vcs minor-modes major-mode misc-info))


  ;; don't think we need this, since we modified 'main
  ;;(add-hook! '(prog-mode-hook org-mode-hook) (doom-modeline-set-modeline 'main))
  )
#+end_src



** minor modes
#+begin_src emacs-lisp :tangle packages.el
(package! minions)
#+end_src

#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-minor-modes t)
  (minions-mode)
  )
#+end_src

*** mode minder

#+begin_src emacs-lisp :tangle packages.el
(package! mode-minder :recipe (:host github :repo "jdtsmith/mode-minder"))
#+end_src

#+begin_src emacs-lisp
(use-package! mode-minder)
#+end_src



* window/Buffer management


** delete-other-windows

#+begin_src emacs-lisp
(setq ignore-window-parameters t)
#+end_src
** Dedupe windows


#+begin_src emacs-lisp
(defun vi/dedup-window-op (w table)
  (let ((b (window-buffer w)))
    ;; (message (format "%s" b))
    (if (ht-contains? table b)
        (progn
          (message (format "Deleting %s %s" w b))
          (delete-window w)
         )
      (ht-set! table b t))
    ))


(defun vi/dedup-windows()
  (interactive)
  (let ((table (ht-create)))
    (--each (window-list-1) (vi/dedup-window-op it table))
    ))
#+end_src

** Movement


#+begin_src emacs-lisp :tangle packages.el
(package! windmove)
#+end_src

#+begin_src emacs-lisp
(use-package! windmove
  :after-call doom-first-buffer-hook
  :custom
  (windmove-wrap-around nil)
  :config
  (windmove-default-keybindings 'shift)
  )
#+end_src

*** COMMENT Windmove conflicts

org-replace-disputed-keys is supposed to not affect date selection, but it
messes it up somehow. It's easier to get windmove to not use shift, instead
using ctrl.

https://orgmode.org/manual/Conflicts.html
Don't use disputed keys in org: conflicts with windmove. Putting this in
(use-package! org :init) doesn't appear to work
If you do this,
> When set, Org moves the following key bindings in
> Org files, and in the agenda buffer—but not during date selection.
>
> S-UP ⇒ M-p	S-DOWN ⇒ M-n
> S-LEFT ⇒ M--	S-RIGHT ⇒ M-+
> C-S-LEFT ⇒ M-S--	C-S-RIGHT ⇒ M-S-+


#+begin_src emacs-lisp
https://orgmode.org/org.html#Conflicts
(setq org-replace-disputed-keys t)
(after! (org windmove)
  (add-hook! 'org-shiftup-final-hook #'windmove-up)
  (add-hook! 'org-shiftleft-final-hook #'windmove-left)
  (add-hook! 'org-shiftdown-final-hook #'windmove-down)
  (add-hook! 'org-shiftright-final-hook #'windmove-right)
  )
#+end_src



** Splitting

#+begin_src emacs-lisp
(defun vi/split-window-horizontally ()
  (interactive)
  (split-window-horizontally)
  (balance-windows))
(defun vi/split-window-vertically ()
  (interactive)
  (split-window-vertically)
  (balance-windows))
(defun vi/delete-window ()
  (interactive)
  (delete-window)
  (balance-windows))

(defadvice delete-window (after restore-balance activate)
  (balance-windows))

(map! :g
      "C-x |" #'vi/split-window-horizontally
      "C-x _" #'vi/split-window-vertically
  "C-x -" #'balance-windows
      "C-x /" #'vi/delete-window)

;; https://emacs.stackexchange.com/a/40517
;; control splitting to prefer vertical? (see split-window-sensibly)
(setq split-height-threshold 80)
(setq split-width-threshold 30)
#+end_src

*** Keep windows balanced
#+begin_src emacs-lisp
;; (defadvice split-window-below (after restore-balance-below activate)
;;   (balance-windows))

;; (defadvice split-window-right (after restore-balance-right activate)
;;   (balance-windows))

;; (defadvice delete-window (after restore-balance activate)
;;   (balance-windows))
#+end_src

** Switching

#+begin_src emacs-lisp

(defmacro minibuffer-quit-and-run (&rest body)
  "Quit the minibuffer and run BODY afterwards."
  `(progn
     (put 'quit 'error-message "")
     (run-at-time nil nil
                  (lambda ()
                    (put 'quit 'error-message "Quit")
                    ,@body))
     (minibuffer-keyboard-quit)))


(map! "M-k" #'consult-buffer)
;; (map! :g
;;   "M-<right>" #'next-buffer
;;   "M-<left>" #'previous-buffer
;;   )

;; (map! :map org-mode-map
;;   "M-<right>" nil
;;   "M-<left>" nil
;; )

(setq! switch-to-prev-buffer-skip
  (lambda (win buf bury) (doom-special-buffer-p buf)))

;; (map! "M-k" #'purpose-switch-buffer-with-purpose)
;; (map! "M-k" #'vi/persp-consult-buffer)
;; (map! :map minibuffer-local-map "M-k" (cmd! (minibuffer-quit-and-run (consult-buffer))))
#+end_src

** Restore

#+begin_src emacs-lisp :tangle packages.el
(package! winner)
#+end_src

See [[*digit-argument][digit-argument]] for unbinding

#+begin_src emacs-lisp
(use-package! winner
  :config
  (winner-mode)
  :bind
  ;; relies on unbinding digit-argument
  ("M-9" . winner-undo)
  ("M-0" . winner-redo)
  )
#+end_src

*** zygospore

Reversible C-x 1: if there are multiple windows, it does a winner-undo. Otherwise, delete-other-windows.

Inspired by https://github.com/LouisKottmann/zygospore.el

#+begin_src emacs-lisp
(defun vi/zygospore ()
  (interactive)
  (if (= (count-windows) 1) (winner-undo) (delete-other-windows)))

(map! :g "C-x 1" #'vi/zygospore)
#+end_src

** COMMENT zoom


#+begin_src emacs-lisp :tangle packages.el
(package! zoom) ;; :recipe (:host github :repo "cyrus-and/zoom"))
#+end_src


https://github.com/doomemacs/doomemacs/issues/2225

#+begin_src emacs-lisp
(use-package! zoom
  ;; :hook (doom-first-buffer . zoom-mode)
  :custom
  (zoom-size '(0.618 . 0.618))
  (zoom-ignored-major-modes '(undo-tree-visualizer-mode vundo--mode))
  (zoom-ignore-predicates (list (lambda () (< (count-lines (point-min) (point-max)) 20))))
  )
#+end_src

** burly


#+begin_src emacs-lisp :tangle packages.el
(package! burly)
#+end_src



#+begin_src emacs-lisp
(defhydra hydra-burly (:color blue :hint nil)
  "
Burly Commands
--------------
_b_: Open bookmarks    _s_: Save layout
_r_: Restore layout    _n_: New layout
_q_: Quit
"
  ("b" burly-open-bookmark)
  ("s" burly-bookmark-windows)
  ("r" burly-open-bookmark)
  ("n" burly-reset-window-layout)
  ("q" nil :color blue))
#+end_src

** bufler

#+begin_src emacs-lisp :tangle packages.el
(package! bufler)
#+end_src

Bufler groups:

- Constructs a tree, buffers are the leaves.
- Each buffer is assigned its path from the root to the leaf; so bufler-groups
  is ultimately a function like ~(buf) -> [node]~, where each ~node~ is a string.
- Each type function is ~(buf) -> node~; they assign one step along this path.
  eg. ~auto-*, *-match, dir, hidden~
- A list of type functions will therefore return ~[node]~ - the simple case.
- ~group*()~ functions define branching in this logic: if a buffer "matches" the
  group, it is then "captured" by this group and recurses into the type
  functions within that group for the remainder of its path.
- "Matching" a group can mean:

  ~group(T1 T2...)~ -> if T1 returns non-nil
  ~group-and(T1 T2...)~ -> if all T* return non-nil
  ~group-or(T1 T2...)~ -> if any of T* return non-nil

  Note that T* above are returning steps in ~[node]~.

  Any node == nil is dropped.

- Since groups will capture, their order matters, since buffers will recurse
  into the first group they match.

- ~bufler-filter-name-regexps~ and ~bufler-filter-buffer-modes~ can specify rules to
  match buffers to the hidden entirely; ~bufler-filter-buffer-fns~ implement the
  above filters via ~bufler--buffer-{mode,name}-filtered-p~


#+begin_src emacs-lisp
(use-package! bufler
  :after-call doom-first-buffer-hook
  :custom
  (bufler-vc-state nil)
  (bufler-columns '("Name" "VC" "Path" "Mode"))
  (bufler-filter-name-regexps '("\\*Compile-Log\\*"
                                 "\\*Disabled Command\\*"
                                 ;; "\\*Org [^z-a]+Output\\*"
                                 ))
  (bufler-filter-buffer-modes '(bufler-list-mode
                                 ;; calendar-mode
                                 magit-diff-mode
                                 magit-process-mode
                                 magit-revision-mode
                                 magit-section-mode
                                 ;; special-mode
                                 timer-list-mode))
  (bufler-filter-buffer-fns
    '(bufler--buffer-hidden-p bufler--buffer-mode-filtered-p bufler--buffer-name-filtered-p)
    )
  (bufler-groups
    (bufler-defgroups
      ;; suppressed above by bufler--buffer-hidden-p
      ;; (group (hidden))
      (group
        ;; Group all Ein buffers
        (name-match "*Ein*" (rx bos (or " *ein" "*ein"))))
      (group (mode-match "*Vterm*" (rx bos "vterm-")))
      (group
        ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
        (group-or "*Help/Info*"
          (mode-match "*Help*" (rx bos "help-"))
          (mode-match "*Info*" (rx bos "info-"))))
      (group
        ;; Subgroup collecting all special buffers (i.e. ones that are not
        ;; file-backed), except `magit-status-mode'/dired buffers (which are allowed to fall
        ;; through to other groups, so they end up grouped with their project buffers).
        (group-and "*Special*"
          (lambda (buffer)
            (unless (or (funcall (mode-match "Magit" (rx bos "magit-status")) buffer)
                      (funcall (mode-match "Dired" (rx bos "dired")) buffer)
                      (funcall (auto-file) buffer))
              "*Special*"))
          )
        (group
          ;; Subgroup collecting these "special special" buffers
          ;; separately for convenience.
          (name-match "**Extra-Special**"
            (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
        (group
          ;; Subgroup collecting all other Magit buffers, grouped by directory.
          (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
          (auto-directory)
          )
        ;; Remaining special buffers are grouped automatically by mode.
        (auto-mode))
      ;; (group-and "Remaining specials?" (auto-special))
      ;; All buffers under "~/.emacs.d" (or wherever it is).
      (dir user-emacs-directory)
      (group
        ;; Subgroup collecting buffers in `org-directory'
        (dir org-directory)
        (group
          ;; Subgroup collecting indirect Org buffers, grouping them by file.
          ;; This is very useful when used with `org-tree-to-indirect-buffer'.
          (auto-indirect)
          (auto-file)
          )
        ;; Group remaining buffers by whether they're file backed, then by mode.
        (group-not "*special*" (auto-file))
        (auto-mode)
        )
      (group
        ;; Subgroup collecting buffers in a projectile project.
        ;; (auto-projectile)

        (auto-project)
        (group (filename-match "venv" (rx ".venv/")))
        (auto-mode)
        )

      ;; Group remaining buffers by directory, then major mode.
      (auto-directory)
      (auto-mode)
      )
    )
  :config
  ;; (bufler-workspace-tabs-mode)

  ;; Note: tab-bar doesn't always update immediately
  ;; (add-hook! '(doom-switch-buffer-hook doom-switch-window-hook consult-after-jump-hook)
  ;;   (defun vi/bufler-workspace-focus-buffer ()
  ;;     (when (not (eq major-mode #'minibuffer-mode))
  ;;       ;; (message (format "Focusing %s %s" (current-buffer) (bufler-workspace-focus-buffer (current-buffer))))))
  ;;       (bufler-workspace-focus-buffer (current-buffer))))
  ;;   )

  :bind
  ("C-x C-b" . bufler)
  )

(after! bufler
  (bufler-define-buffer-command revert "Revert buffer."
    (lambda (buffer)
      (when (buffer-file-name buffer)
        (with-current-buffer buffer
          (revert-buffer)))))
  (map! :mode bufler-list-mode "v" #'bufler-list-buffer-revert)

  )
#+end_src

** Popups


https://github.com/karthink/popper/issues/38
#+begin_src emacs-lisp :tangle packages.el
(package! popper :recipe (:host github :repo "karthink/popper" :branch "local-mode-line-format"))
#+end_src


#+begin_src emacs-lisp
(use-package! popper
  :init
  (setq popper-mode-line " POP ")
  (setq popper-reference-buffers
        '(
             ;; "\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          "\\*doom eval\\*"
          help-mode
          comint-mode
          helpful-mode
          python-pytest-mode
          ;; bufler-list-mode

          ;; we want to use a custom doom-modeline segment vterm-copy-mode
          ;; vterm-mode ;; https://github.com/karthink/popper/issues/38

          flycheck-error-list-mode
          flycheck-projectile-error-list-mode
          inferior-python-mode
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))

(after! popper
  (add-hook! 'doom-escape-hook
             (defun vi/close-popup()
               ;; Return nil so the rest of the hooks do run
               (progn (popper-close-latest) nil))))
#+end_src
** COMMENT purpose

#+begin_src emacs-lisp :tangle packages.el
(package! window-purpose)
#+end_src


#+begin_src emacs-lisp
(use-package! window-purpose
  :custom
  (purpose-user-mode-purposes '(
                                (prog-mode . prog) (org-mode . prog)
                                ;; Protect the minibuffer from opening things while previewing
                                (minibuffer-mode . minibuf)
                                (vterm-mode . term)))
  (purpose-user-regexp-purposes '(
                                  ;; Ein has some hidden buffers with the
                                  ;; appropriate prog mode, but we want them in
                                  ;; the same window
                                  ("\\` ?\\*ein" . ein)
                                  ("\\` " . hidden)
                                  ("\\*" . special)
                                  ))
  (purpose-use-default-configuration nil)
  :after-call doom-first-buffer-hook
  :config

  (purpose-compile-user-configuration)

  ;; Dedicate all non-general windows so that they don't get other-purpose
  ;; buffers in them
  (defun vi/dedicate-if-purpose (&optional win)
    (let ((win (or win (get-buffer-window))))
      ;; (message (format "Fired dedication hook %s" win))
      (when (and
             ;; not already dedicated
             (not (purpose-window-purpose-dedicated-p win))
             ;; and not 'general
             (not (eq (purpose-window-purpose win) default-purpose)))
        ;; (message (format "Dedicating %s" win))
        (purpose-set-window-purpose-dedicated-p win t)
        )))

  ;; I tried window-buffer-change-functions (got reset to doom-run-switch-buffer-hooks), purpose-display-buffer-functions --
  ;; they didn't seem to work, but not sure
  (add-hook! '(doom-switch-buffer-hook doom-switch-window-hook) #'vi/dedicate-if-purpose)

  (purpose-mode)
  )

;; If we want consult preview to not open in different windows according to purpose
(after! (consult window-purpose)
  (defun without-purpose-advice (orig-fun &rest args)
    (without-purpose (apply orig-fun args)))
  (advice-add 'consult--with-preview-1 :around #'without-purpose-advice))

(after! (embark window-purpose)
  (map! :map embark-become-file+buffer-map "B" #'purpose-switch-buffer-overload)
  (map! "C-;" #'iedit-mode)
  )
#+end_src

** COMMENT persp customizations

persp-mode is built in with doom but let's specify it anyway

#+begin_src emacs-lisp :tangle packages.el
(package! persp-mode)
(unpin! persp-mode)
#+end_src

*** COMMENT auto persps for projectile

We don't need auto-persps for projectile; we can create those via doom easily

#+begin_src emacs-lisp :tangle packages.el
(package! persp-mode-projectile-bridge :recipe (:host github :repo "Bad-ptr/persp-mode-projectile-bridge.el"))
#+end_src

#+begin_src emacs-lisp
(use-package! persp-mode-projectile-bridge
    :after-call doom-first-buffer-hook
    :custom
    (persp-mode-projectile-bridge-persp-name-prefix "[p] ")
    :config
    (persp-mode-projectile-bridge-mode 1)
    )
#+end_src

*** auto persps

#+begin_src emacs-lisp
(after! persp-mode
  (persp-def-auto-persp "vterm"
    :parameters '((dont-save-to-file . t))
    :mode 'vterm-mode
    :dyn-env '(after-switch-to-buffer-functions ;; prevent recursion
                (persp-add-buffer-on-find-file nil)
                persp-add-buffer-on-after-change-major-mode)
    :hooks '(after-switch-to-buffer-functions)
    :on-match #'vi/set-auto-persp-on-match
    :switch 'frame)
  (persp-def-auto-persp "ein"
    :parameters '((dont-save-to-file . t))
    :buffer-name "*ein:"
    :dyn-env '(after-switch-to-buffer-functions ;; prevent recursion
                (persp-add-buffer-on-find-file nil)
                persp-add-buffer-on-after-change-major-mode)
    :hooks '(after-switch-to-buffer-functions)
    :on-match #'vi/set-auto-persp-on-match
    :switch 'frame)
  )
#+end_src

#+begin_src emacs-lisp
(defun vi/persp-consult-buffer()
    (interactive)
    (with-persp-buffer-list () (consult-buffer)))
#+end_src

**** Reset auto persp

One problem is that these auto perspectives don't restrict which buffers can be
added to them. So it would be nice to reset them; how to do that?

persp-buffer-list will contain all the manually added buffers

persp-buffer-match-auto-persp-p doesn't work: https://github.com/Bad-ptr/persp-mode.el/issues/135

We could use the :after-match function to set some buffer-local variable
tracking all perspectives that were set auto.

Note that this won't work with persp-mode-projectile-bridge (look at
~persp-mode-projectile-bridge-find-perspective-for-buffer~ for how to handle it -- we'll need a custom ~matches-auto-persp-p~, and test ~safe-persp-parameters~ for ~persp-mode-projectile-bridge t~ )?

#+begin_src emacs-lisp
(defun vi/set-auto-persp (persp buf)
  ;; track the auto persps that this buf belongs to, in a buffer local hash
  (with-current-buffer buf
    (-let ((ap (or (bound-and-true-p vi--auto-persps) (ht-create))))
        (progn
            (ht-set! ap (safe-persp-name persp) t)
            (setq-local vi--auto-persps ap))
        )
    ))

(defun vi/set-auto-persp-on-match (state)
  ;; on-match hook for persp-def-auto-persp
    (-let ((persp (alist-get 'persp state))
              (buffer (alist-get 'buffer state)))
        (vi/set-auto-persp persp buffer))
    state)

(defun vi/matches-auto-persp-p (persp buf)
  ;; replacement for persp-buffer-match-auto-persp-p that actually works, using our own vi--auto-persps machinery
  (with-current-buffer buf
    (and (buffer-local-boundp 'vi--auto-persps buf) (ht-contains? vi--auto-persps persp))
    ))

(defun vi/persp-auto-buffer-list()
  ;; persp-buffer-list filtered for buffers belonging to the current auto persp
  (let ((persp (safe-persp-name (get-current-persp))))
    (--filter (vi/matches-auto-persp-p persp it) (persp-buffer-list))
    )
  )

(defun vi/reset-auto-persp-windows()
  ;; reset current (auto) persp to only buffers matching it
    (interactive)
    (delete-other-windows)
    (--each (vi/persp-auto-buffer-list) (display-buffer-pop-up-window it ()))
  )
#+end_src


** recentf

Load recentf files on startup

#+begin_src emacs-lisp
(add-hook! 'doom-first-input-hook #'recentf-mode)
#+end_src
** buffer expose
:PROPERTIES:
:CREATED:  [2023-10-23 Mon 15:13]
:END:


#+begin_src emacs-lisp :tangle packages.el
(package! buffer-expose)
#+end_src

*** home grown
:PROPERTIES:
:CREATED:  [2023-10-23 Mon 15:29]
:END:


#+begin_src emacs-lisp
(defun vi/get-buffers-by-predicate (pred)
  "Return a list of buffers that satisfy the given predicate."
  (seq-filter pred (buffer-list)))

(defun is-prime (n)
  "Check if N is a prime number."
  (if (< n 2)
      nil
    (not (cl-some (lambda (x) (= 0 (% n x))) (number-sequence 2 (floor (sqrt n)))))))

(defun closest-factors-based-on-frame (n w h)
  "Find the closest factors of N based on frame dimensions W x H."
  (message "n=%s w=%s h=%s" n w h)
  (if (< n 4)
      (list 1 n)
    (let ((aspect-ratio (/ (float w) h))
           (best-diff 9999999)
           (best-factors nil))
      (dotimes (i (floor (sqrt n)))
        (let* ((rows (1+ i))
                (cols (ceiling (/ (float n) rows)))
                (grid-aspect-ratio (/ (float cols) rows))
                (diff (abs (- aspect-ratio grid-aspect-ratio))))
          (when (and (< diff best-diff)
                  (> rows 1))  ; Avoid 1xn grids
            (setq best-diff diff)
            (setq best-factors (list rows cols)))))
      best-factors)))

(defun split-window-multiple-ways (x y)
  "Split the current frame into a grid of X columns and Y rows."
  (interactive "nColumns: \nnRows: ")
  ;; one window
  (delete-other-windows)
  (dotimes (i (1- x))
      (split-window-horizontally)
      (dotimes (j (1- y))
	(split-window-vertically))
      (other-window y))
  (dotimes (j (1- y))
    (split-window-vertically))
  (balance-windows))

(autoload 'windmove-find-other-window "windmove"
"Return the window object in direction DIR.

\(fn dir &optional arg window)")

(declare-function windmove-find-other-window "windmove" (dir &optional arg window))

(defun get-window-in-frame (x y &optional frame)
  "Find Xth horizontal and Yth vertical window from top-left of FRAME."
  (let ((orig-x x) (orig-y y)
        (w (frame-first-window frame)))
    (while (and (windowp w) (> x 0))
      (setq w (windmove-find-other-window 'right 1 w)
            x (1- x)))
    (while (and (windowp w) (> y 0))
      (setq w (windmove-find-other-window 'down 1 w)
            y (1- y)))
    (unless (windowp w)
      (error "No window at (%d, %d)" orig-x orig-y))
    w))

(defun set-window-buffer-in-frame (x y buffer &optional frame)
  "Set Xth horizontal and Yth vertical window to BUFFER from top-left of FRAME."
  (set-window-buffer (get-window-in-frame x y frame) buffer))

(defun vi/layout-buffers-in-grid (buffer-list)
  "Layout buffers in a grid."
  (let* ((total-buffers (length buffer-list))
         (is-total-buffers-prime (is-prime total-buffers))
         (w (frame-width))
         (h (frame-height))
         (factors (closest-factors-based-on-frame (if is-total-buffers-prime
                                                      (1+ total-buffers)
                                                    total-buffers) w h))
         (rows (car factors))
         (cols (cadr factors))
         (counter 0))

    (if is-total-buffers-prime
        (setq buffer-list (append buffer-list (list (generate-new-buffer " *dummy*")))))

    (message "%s %s %s %s" total-buffers rows cols factors)

    ;; Use your function to split the window into a grid
    (split-window-multiple-ways cols rows)

    (balance-windows)

    ;; Populate windows with buffers
    (dotimes (y rows)
      (dotimes (x cols)
        (when (< counter total-buffers)
          (set-window-buffer-in-frame x y (nth counter buffer-list))
          (setq counter (1+ counter)))))

    ;; Cleanup
    (when is-total-buffers-prime
      (kill-buffer " *dummy*"))))


(defun vi/tile-buffers-for-mode (mode)
  "Tile all buffers with the given major mode."
  (let ((buffers (vi/get-buffers-by-predicate (lambda (buf)
                                                (with-current-buffer buf
                                                  (eq major-mode mode))))))
    (delete-other-windows)
    (vi/layout-buffers-in-grid buffers)))


(defun vi/tile-vterm-buffers ()
  "Tile all vterm buffers."
  (interactive)
  (vi/tile-buffers-for-mode 'vterm-mode))


(defun vi/get-project-buffers ()
  "Get all non-* buffers in the current project."
  (let ((project-root (projectile-project-root)))
    (if project-root
        (vi/get-buffers-by-predicate
         (lambda (buf)
           (and (not (string-prefix-p "*" (buffer-name buf)))
                (string-prefix-p project-root (or (buffer-file-name buf) "")))))
      (progn
        (message "Project root is nil")
        '()))))


(defun vi/tile-project-buffers ()
  "Tile all non-* buffers in the current project."
  (interactive)
  (let ((project-buffers (vi/get-project-buffers)))
    (if project-buffers
      (vi/layout-buffers-in-grid project-buffers)
      (message "No project buffers found."))))

;; TODO: make package https://chat.openai.com/share/7dfa1e04-31f2-459d-bb47-a914a85e9889

(defun vi/fix-window-size ()
  "Change process window size."
  (interactive)
  (message "fixing window size")
  (when (derived-mode-p 'comint-mode)
    (let ((process (get-buffer-process (current-buffer))))
      (unless (eq nil process)
        (set-process-window-size process (window-height) (window-width))))))

(defun vi/toggle-window-dedicated ()
  "Toggle whether the current active window is dedicated or not"
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
         (set-window-dedicated-p window
           (not (window-dedicated-p window))))
       "Window '%s' is dedicated"
     "Window '%s' is normal")
   (current-buffer)))

#+end_src

* Fonts

** Fontsets
*** Notes

- Emacs uses fontsets, which are a bundle of fonts, so that missing glyphs in
  one font can fall through to others.
  https://archive.casouri.cat/note/2021/fontset/index.html
- there are three defined automatically (https://www.gnu.org/software/emacs/manual/html_node/emacs/Defining-Fontsets.html)
  - fontset-startup (which I guess is based on the environment where Emacs runs;
    in our case it picks up fonts from Gnome. the "default" face uses this
    currently)
  - fontset-default (is the fallback)
  - fontset-standard (is only used when selected explicitly). Based on ~standard-fontset-spec~
- It is possible to define mappings for individual glyphs, ranges of glyphs,
  scripts, charsets etc to a font (-spec) using ~set-fontset-font~.
- The ~unicode-fonts~ package, which Doom sets up using ~:ui unicode~ does this for
  you for a large subset of Unicode blocks. It has a bunch of fonts configured
  by default (~unicode-fonts-block-font-mapping~), and then filters that list for
  the ones on your system, and finally calls ~set-fontset-font~ appropriately.
- ~doom-font~ and ~doom-unicode-font~ are Doom-specific settings; when unicode-fonts
  is used, Doom makes ~doom-unicode-font~ the priority for all blocks in
  ~unicode-fonts-block-font-mapping~
- When ~use-default-font-for-symbols~ is non-nil, Emacs uses the default font for
  symbols, but then identifies a fallback for each missing glyph
  (https://emacs.stackexchange.com/a/62056). This can mean that different glyphs
  come from different fonts, and in some contexts (eg. ~vundo~,
  https://github.com/casouri/vundo/issues/12#issuecomment-1075991819), they can
  interact poorly.

http://idiocy.org/emacs-fonts-and-fontsets.html
https://www.emacswiki.org/emacs/FontSets
http://xahlee.info/emacs/emacs/emacs_list_and_set_font.html
https://emacs.stackexchange.com/questions/5689/force-a-single-font-for-all-unicode-glyphs
https://en.wikipedia.org/wiki/Unicode_block

**** Why not use :ui unicode-fonts

unicode-fonts seems to be best tuned if you want a number of different
scripts/languages to be visible (eg. ~view-hello-file~).

We don't care so much about this, instead we want various glyphs and icon fonts
to work together, and this seems to add complexity and hide what is happening.

So it may be simpler to use ~set-fontset-font~ directly.

In fact, in practice, ~view-hello-file~ looks a lot better with unicode-fonts
turned off!


*** Fonts for various unicode ranges

- We want to use "patched" fonts (see https://github.com/ryanoasis/nerd-fonts),
  which include a bunch of nice glyphs in their unused slots, and can be used in
  terminal prompts etc.
- ~all-the-icons~ provides some icon fonts which get used in treemacs, vertico
  buffers etc.
- We want to be able to select a specific font for our coding, without regard to
  whether this has all symbol ranges represented.
- We want to force specific Unicode blocks/ranges to use a single font to avoid
  inconsistencies b/w glyphs (eg. vundo).

**** Notes on font-startup fontset

- When you ~describe-fontset~, pay attention to "REQUESTED" and [OPENED] -- Emacs
  is trying to find fonts with specific glyphs that match some font-spec in the
  fontset. It is unclear to me how this search is ranked, but it usually returns
  Gnome's monospace font first -- which is why Emacs runs with that for most
  symbols.

*** COMMENT prevent using system font

This doesn't prevent fontset-startup from getting created, but Emacs no longer
responds to changes in the system monospace text font. Actually it's nice to
have Emacs use the system monospace font, so this is commented.

#+begin_src emacs-lisp
(add-hook! 'after-setting-font-hook (setq font-use-system-font nil))
#+end_src


*** COMMENT Base config

Test on ~view-hello-file~. As of <2022-03-24 Thu> emoji doesn't work

#+begin_src emacs-lisp
(add-hook! after-setting-font
  (defun vi/set-fontsets ()
    ;; Prevent emacs from using the default font for symbols and punctuation; this
    ;; will cause fontsets to be used.
    (setq use-default-font-for-symbols nil)

    ;; Next we want to set Google's Noto Sans fonts (like Noto Sans Cherokee, Noto
    ;; Sans Armenian) to be the backup, since they represent a lot of different
    ;; scripts; but there doesn't seem to be a way to specify a font-family prefix
    ;; like "Noto Sans*". So we use the foundry name :GOOG, and cross our fingers.
    ;; See https://gist.github.com/alanthird/7152752d384325a83677f4a90e1e1a05 for
    ;; a more explicit setting
    ;;
    ;; default for fontset-startup, we append so that it's at the end
    (set-fontset-font "fontset-startup" nil (font-spec :foundry "GOOG") nil 'append)

    ;; default for fontset-default (which is the fallback for fontset-startup)
    (set-fontset-font t nil (font-spec :foundry "GOOG"))
    )
  )
#+end_src

*** COMMENT Per block Config

Edit <2022-03-24 Thu>: See
https://github.com/casouri/vundo/issues/12#issuecomment-1078557737 for why I
turned this off -- there's a smaller fix in [[*vundo][vundo]]

We are deliberately using this separate from the :ui module, since all we want
is the unicode block info in ~unicode-fonts-blocks~. We are not calling
~(unicode-fonts-setup)~

#+begin_src emacs-lisp :tangle packages.el
(package! unicode-fonts)
#+end_src

#+begin_src emacs-lisp

;; We use unicode-fonts for the definition of Unicode block ranges
(use-package! unicode-fonts
  :config

  ;; Set Symbola for a bunch of blocks used in vundo so they are all the same
  ;; font (https://github.com/casouri/vundo/issues/12#issuecomment-1075991819)
  (dolist (unicode-block '(
                           "Box Drawing"
                           "Geometric Shapes"
                           "Geometric Shapes Extended"))
    (let* (
           (char-range (cdr (assoc unicode-block unicode-fonts-blocks)))
           (start (car char-range))
           (end (cadr char-range)))
      (set-fontset-font "fontset-startup" (cons start end) (font-spec :family "Symbola"))))
)
#+end_src


** Adjust for display size change

#+begin_src emacs-lisp :tangle packages.el
(package! dispwatch :recipe (:host github :repo "mnp/dispwatch"))
#+end_src


#+begin_src emacs-lisp
(defun vi/set-font-size (sz)
  (font-put doom-font :size sz)
  ;; (setq! doom-font (font-spec :size sz))
  (doom/reload-font)
  (message "Setting font size to: %s" sz)
  sz
  )

;; see (dispwatch--get-display)
;; Can be run manually like (vi/adjust-font-size-for-display '(3440 . 1440))
;; See https://github.com/doomemacs/doomemacs/issues/6131#issuecomment-1051576882
(defun vi/adjust-font-size-for-display (disp)
  (message "rejiggering for %s" disp)
  (cond ((equal disp '(3440 . 1440))   ; LG monitor
          (vi/set-font-size 16.0))
    ((equal disp '(3000 . 2000))    ; laptop @ 100%, 200%
      (vi/set-font-size 13.0))
    ((equal disp '(4800 . 3200))    ; laptop @ 125%
      (vi/set-font-size 14.0))
    ((equal disp '(4002 . 2668))    ; laptop @ 150%
      (vi/set-font-size 14.0))
    ((equal disp '(3426 . 2284))    ; laptop @ 175%
      (vi/set-font-size 13.0))
    ((equal disp '(1710 . 1107))         ;macbook air 15"
      (vi/set-font-size 15.0))
    ((equal disp '(1920 . 1080))    ; asus monitor
      (vi/set-font-size 12.0))
    (t (message "Unknown display size %sx%s" (car disp) (cdr disp)))))

(defun vi/trigger-dispwatch ()
  (interactive)
  (vi/adjust-font-size-for-display
    ;; extract dotted pair from display info
    (apply #'cons (-take-last 2 (nth 1 dispwatch-current-display))))
  )
(add-hook! 'doom-first-buffer-hook #'vi/trigger-dispwatch)

(use-package! dispwatch
  :after-call doom-first-buffer-hook
  :config
  (dispwatch-mode 1)
  (add-hook! 'dispwatch-display-change-hooks #'vi/adjust-font-size-for-display)
  )
#+end_src

* Kill/Yank/Mark regions


#+begin_src emacs-lisp :tangle packages.el
;; (package! hungry-delete)
#+end_src

** COMMENT visible mark
sr.ht is down

#+begin_src emacs-lisp :tangle packages.el
(package! visible-mark)
#+end_src


#+begin_src emacs-lisp
(use-package! visible-mark
  :custom
  (visible-mark-max 1)
  :config
  (global-visible-mark-mode t)
  )
#+end_src
** expand region



#+begin_src emacs-lisp :tangle packages.el
(package! expand-region)
#+end_src

#+begin_src emacs-lisp
;; (use-package! hungry-delete
;;   :after-call doom-first-input-hook
;;   :config
;;   (global-hungry-delete-mode))

(use-package! expand-region
  :commands (er/mark-inside-pairs er/mark-inside-quotes er/mark-outside-pairs er/mark-outside-quotes)
  )
#+end_src

** easy-kill base

#+begin_src emacs-lisp
(use-package! easy-kill
  :custom

  ;; Used for first marking
  (easy-mark-try-things '(line symbol forward-line-edge sexp)) ;see easy-kill-alist
  (easy-kill-try-things '(line symbol forward-line-edge sexp)) ;see easy-kill-alist
  :bind (
          ([remap kill-ring-save] . easy-kill) ; M-w
          ;; easy-mark supposedly sets the region immediately but it breaks
          ;; sometimes. Also doesn't use easy-kill-selection face
          ([remap set-mark-command] . easy-mark) ;C-SPC

          ;; ("M-SPC" . easy-mark)
          )

  :config
  (custom-set-faces! '(easy-kill-selection :inherit modus-themes-mark-sel))

  ;; These take arguments
  (setq easy-kill-cycle-ignored '(string-to-char-forward string-up-to-char-forward))

  ;; easy-kill/mark will cycle through things in this order (except for easy-kill-cycle-ignored)
  (setq easy-kill-alist
    '(
       (?l line "\n")
       (?w word " ")
       (?s symbol " ")               ;added from extras
       ;; (?W WORD " ")
       (?< inside-pairs "");added from extras
       (?> outside-pairs "");added from extras
       (?\' inside-quotes "");added from extras
       (?\" outside-quotes "");added from extras
       (?$ forward-line-edge "")
       (?^ backward-line-edge "")
       (?d defun "\n\n")
       (?b buffer "")
       (?x sexp "\n")
       (?L list "\n")
       (?f string-to-char-forward "")
       (?F string-up-to-char-forward "")
       (?D defun-name " ")
       (?B buffer-file-name)))
  )

#+end_src


#+begin_src emacs-lisp :tangle packages.el
(package! easy-kill :recipe (:host github :repo "leoliu/easy-kill"))
#+end_src

** easy-kill-extras


#+begin_src emacs-lisp :tangle packages.el
(package! easy-kill-extras)
(package! multiple-cursors)
#+end_src

#+begin_src emacs-lisp
;; Here we integrate some  expand-region marking as easy-kill candidates
(after! easy-kill
  (use-package! easy-kill-extras
    :demand t                           ; don't wait for autoload via :bind
    :init
    (setq easy-kill-ace-jump-enable-p nil)
    :config
    (require 'extra-things)
    ;; (require 'easy-kill-mc)
    ;; Integrate `expand-region' functionality with easy-kill
    :bind (:map easy-kill-base-map
            ("o" . easy-kill-er-expand)
            ("i" . easy-kill-er-unexpand))

    ;; (define-key easy-kill-base-map (kbd "o") 'easy-kill-er-expand)
    ;; (define-key easy-kill-base-map (kbd "i") 'easy-kill-er-unexpand)
    )

  (defsubst vi/did-mark (mark-fn)
    ;; Did mark-fn succeed in setting the mark?
    ;; Remove any existing mark
    (deactivate-mark)
    ;; Catch scan-error and deactivate-mark if we do
    (save-excursion
      (condition-case nil
          (progn (funcall mark-fn) (region-active-p))
        (scan-error (deactivate-mark)))))

  (defmacro vi/er-easy-kill (thing)
    ;; create a function easy-kill-on-<thing> which tests er/mark-<thing> to see
    ;; if it set the region, and if so, adjusts the easy kill candidate.
    `(defun ,(intern (concat "easy-kill-on-" thing)) (_n)
         (when (vi/did-mark #',(intern (concat "er/mark-" thing)))
           (easy-kill-adjust-candidate ',(intern thing) (mark) (point))
           )
    ))

  (vi/er-easy-kill "symbol")
  (vi/er-easy-kill "inside-pairs")
  (vi/er-easy-kill "outside-pairs")
  (vi/er-easy-kill "inside-quotes")
  (vi/er-easy-kill "outside-quotes")

  )
#+end_src

** no yanking whitespace

*** COMMENT stackoverflow solution
https://stackoverflow.com/a/69307156/14044156
#+begin_src emacs-lisp
(defun night/h-kill-skip-whitespace (orig-fn string &optional rest)
  (message string)
  (message rest)
  (let* (
         (string-raw (substring-no-properties string))
         (space-p (not (string-match-p "[^ \t\n\r]" string-raw))))
    (cond
     ((not space-p)
      (apply orig-fn string rest))
     (t
      (message "skipped whitespace kill")
     ))))


(advice-add 'kill-new :around #'night/h-kill-skip-whitespace)
#+end_src

*** clean-kill-ring
https://github.com/NicholasBHubbard/clean-kill-ring.el

#+begin_src emacs-lisp :tangle packages.el
(package! clean-kill-ring :recipe (:host github :repo "NicholasBHubbard/clean-kill-ring.el"))
#+end_src

#+begin_src emacs-lisp
(use-package! clean-kill-ring
  :after-call doom-first-input-hook
  :config
  (clean-kill-ring-mode)
  )
#+end_src
** move-text


#+begin_src emacs-lisp :tangle packages.el
(package! move-text)
#+end_src


#+begin_src emacs-lisp
(use-package! move-text
  :config
  (move-text-default-bindings)          ;M-<up>, M-<down>

  (remove-hook 'org-metadown-hook #'org-babel-pop-to-session-maybe)
  (remove-hook 'org-metaup-hook #'org-babel-load-in-session-maybe)

  ;; messes with moving headings
  ;; (add-hook! 'org-metadown-hook (progn (apply #'move-text-down (move-text-get-region-and-prefix)) t))
  ;; (add-hook! 'org-metaup-hook (progn (apply #'move-text-up (move-text-get-region-and-prefix)) t))
  )
#+end_src

* undo

** doom undo-fu
#+begin_src emacs-lisp
(setq! undo-limit 67108864) ; 64mb.
(setq! undo-strong-limit 100663296) ; 96mb.
(setq! undo-outer-limit 1006632960) ; 960mb.

(after! undo-fu
  (setq! undo-fu-allow-undo-in-region t)
  (map! "C--" #'undo "M--" #'redo "C-/" #'undo)
  (map! :map undo-fu-mode-map "C-/" nil)
  (map! :map undo-fu-mode-map "C-x u" nil)
  ;; (vhl/ext/undo-fu/on)
  )
#+end_src

** vundo
#+begin_src emacs-lisp
(use-package! vundo
  :custom
  (vundo-roll-back-on-quit nil)
  (vundo-glyph-alist vundo-unicode-symbols)
  ;; (vundo-glyph-alist vundo-ascii-symbols)
  :config
  ;; different fonts at different sizes mess up the alignment in vundo
  ;; Iosevka 13 seems to be ok
  ;; (set-face-attribute 'vundo-default nil :family "DejaVu Sans Mono")

  ;; https://github.com/casouri/vundo/issues/56
  (defun vi/vundo-diff ()
    (interactive)
    (let* ((orig vundo--orig-buffer)
            (source (vundo--current-node vundo--prev-mod-list))
            (dest (vundo-m-parent source)))
      (if (or (not dest) (eq source dest))
        (message "vundo diff not available.")
	(let ((buf (make-temp-name (concat (buffer-name orig) "-vundo-diff"))))
          (vundo--move-to-node source dest orig vundo--prev-mod-list)
          (with-current-buffer (get-buffer-create buf)
	    (insert-buffer orig))
          (vundo--refresh-buffer orig (current-buffer) 'incremental)
          (vundo--move-to-node dest source orig vundo--prev-mod-list)
          (vundo--refresh-buffer orig (current-buffer) 'incremental)
          (diff-buffers buf orig)
          (kill-buffer buf)))))

  :bind (
          ("C-x u" . vundo)
          :map vundo-mode-map (("d" . #'vi/vundo-diff))
          )
  )

(add-hook! 'vundo-mode-hook
  #'hide-mode-line-mode
  (visual-line-mode -1)
  (setq window-size-fixed t)
  ;; (buffer-face-set '(:family "DejaVu Sans Mono"))
  )
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! vundo)
#+end_src
** Go to Last change

#+begin_src emacs-lisp :tangle packages.el
(package! goto-chg :recipe (:host github :repo "emacs-evil/goto-chg"))
#+end_src


#+begin_src emacs-lisp
(use-package! goto-chg
  :bind (
          ("C-." . goto-last-change)
          ("C-," . goto-last-change-reverse)
          :map org-mode-map ("C-," . nil)
  ))
;; (after! org
;;   ;; goto-last-change-reverse
;;   (map! :map org-mode-map "C-," nil)
;;   )
#+end_src
** point


#+begin_src emacs-lisp :tangle packages.el
(package! point-undo :recipe (:host github :repo "emacsmirror/point-undo"))
#+end_src

#+begin_src emacs-lisp
(use-package! point-undo
  :bind(
         ("s-." . point-undo)
         ("s-," . point-redo)
         ))
#+end_src

** COMMENT Undo-fu local

ein disables undo if C-/ is bound to anything but basic undo
https://github.com/millejoh/emacs-ipython-notebook/issues/841#issuecomment-1129176534

doom-emacs defines a global undo-fu-mode (minor-mode) which is activated on
doom-first-buffer. This means that it is turned on in the ein notebook buffers,
but it's not enough to turn it off via ein:notebook-mode-hook -- that's too
late, ein has already disabled undo.

so we define a non-global vi/undo-fu-mode and turn it on selectively.

#+begin_src emacs-lisp
(map! "C--" #'undo "M--" #'redo "C-/" #'undo)
(map! :map undo-fu-mode-map "C-/" nil)

;; copied from doom's undo/config.el
(use-package! undo-fu
  :custom
  (setq! undo-limit 80000000)
  :unless (featurep! +tree)
  :config
  (define-minor-mode vi/undo-fu-mode
    "Enables `undo-fu' for the current session."
    :keymap (let ((map (make-sparse-keymap)))
              ;; (define-key map [remap undo] #'undo-fu-only-undo)
              ;; (define-key map [remap redo] #'undo-fu-only-redo)
              ;; (define-key map (kbd "C-_")     #'undo-fu-only-undo)
              ;; (define-key map (kbd "M-_")     #'undo-fu-only-redo)
              ;; (define-key map (kbd "C-M-_")   #'undo-fu-only-redo-all)
              (define-key map (kbd "C-x r u") #'undo-fu-session-save)
              (define-key map (kbd "C-x r U") #'undo-fu-session-recover)

              ;; Diff from undo-fu-mode
              (define-key map (kbd "C--")     #'undo-fu-only-undo)
              (define-key map (kbd "M--")     #'undo-fu-only-redo)
              (define-key map (kbd "C-M--")   #'undo-fu-only-redo-all)

              map)
    :predicate t
    :init-value nil
    :global nil)                       ;;only difference from doom-emacs' undo-fu-mode is that this isn't global
  )

;; We don't want this because it turns on in ein and ein disables undo if it is
;; bound to anything but the simple emacs undo, it is global
(remove-hook! 'doom-first-buffer-hook #'undo-fu-mode)
(add-hook! (prog-mode org-mode text-mode) #'vi/undo-fu-mode)
(add-hook! vi/undo-fu-mode #'global-undo-fu-session-mode)
#+end_src


** COMMENT undo-hl
seems to make things slow?

#+begin_src emacs-lisp :tangle packages.el
(package! undo-hl :recipe (:host github :repo "casouri/undo-hl"))
#+end_src


#+begin_src emacs-lisp
(use-package! undo-hl
  :after-call doom-first-buffer-hook
  :hook (prog-mode . undo-hl-mode)
  )
#+end_src

* Snippets

#+begin_src emacs-lisp :tangle packages.el
(package! yankpad :recipe (:host github :repo "Kungsgeten/yankpad"))
(package! yasnippet)
#+end_src

#+begin_src emacs-lisp
(after! yasnippet
  (setq yas-wrap-around-region t)
  (yas-global-mode 1))

(use-package! yankpad
  :commands (yankpad-insert);;  company-yankpad)
  :custom
  (yankpad-file "~/.config/doom/yankpad.org")
  :config
  (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand)
  )
#+end_src

* Fill

** unfill paragraphs
#+begin_src emacs-lisp :tangle packages.el
(package! unfill)
#+end_src

#+begin_src emacs-lisp
(use-package! unfill
  :bind ("M-a" . unfill-paragraph))
#+end_src

** COMMENT Fill function arguments

We don't use this in practice...

#+begin_src emacs-lisp :tangle packages.el
(package! fill-function-arguments)
#+end_src

#+begin_src emacs-lisp
(use-package! fill-function-arguments
  :after-call doom-first-input-hook
  ;; :hook
  ;; (prog-mode . (lambda () (local-set-key (kbd "M-q") #'fill-function-arguments-dwim)))
  ;; (emacs-lisp-mode . (lambda ()
  ;;                      (setq-local fill-function-arguments-first-argument-same-line t)
  ;;                      (setq-local fill-function-arguments-second-argument-same-line t)
  ;;                      (setq-local fill-function-arguments-last-argument-same-line t)
  ;;                      (setq-local fill-function-arguments-argument-separator " ")))
  )
#+end_src

* Comments

** Boxing
#+begin_src emacs-lisp :tangle packages.el
(package! rebox2)
#+end_src

#+begin_src emacs-lisp
(use-package! rebox2
  :commands (rebox-dwim)
  :config
  (setq rebox-style-loop '(13 15 23 25 16 17 26 27 11 21))
  :bind
  (
   ;; ("M-:" . rebox-dwim)
   :map rebox-mode-map ("M-q" . nil)
   )
  ;; (define-key rebox-mode-map (kbd "M-q") nil)
  )
#+end_src

** Editing comments

*** COMMENT poporg
#+begin_src emacs-lisp
(package! poporg)

(defun python-mode-poporg-hook ()
  (setq-local poporg-edit-hook '(sql-mode))
  )

(use-package! poporg
  :custom
  ;; don't match * in common prefix - this will break C-style comments
  ;; poporg but it is necessary to retain org headings
  (poporg-comment-skip-regexp "[[:space:]]*")
  :hook (python-mode . python-mode-poporg-hook)
  :bind ("M-\\" . poporg-dwim)
  )
#+end_src

*** separedit

#+begin_src emacs-lisp :tangle packages.el
(package! separedit)
#+end_src


#+begin_src emacs-lisp
(use-package! separedit
  :custom
  (separedit-remove-trailing-spaces-in-comment t)
  (separedit-default-mode 'org-mode)
  :bind ("M-\\" . separedit)
  )

(after! edit-indirect
  ;; https://github.com/Fanael/edit-indirect/issues/6
  (require 's)
  (require 'dash)

  (defvar edit-indirect--left-margin 0)

  (defun vbe:compute-left-margin (code)
    "Compute left margin of a string of code."
    (-min
      (-map #'(lambda (line) (length (car (s-match "^\\s-*" line))))
        (-remove 's-blank? (s-lines code)))))

  (defun vbe:after-indirect-edit-remove-left-margin ()
    "Remove left-margin and save it into a local variable."
    (let ((lm (vbe:compute-left-margin (buffer-substring (point-min) (point-max)))))
      (indent-rigidly (point-min) (point-max) (* -1 lm))
      (setq-local edit-indirect--left-margin lm)))

  (defun vbe:after-indirect-edit-restore-left-margin ()
    "Restore left-margin before commiting."
    (indent-rigidly (point-min) (point-max) edit-indirect--left-margin))

  (add-hook 'edit-indirect-after-creation-hook #'vbe:after-indirect-edit-remove-left-margin)
  (add-hook 'edit-indirect-before-commit-hook #'vbe:after-indirect-edit-restore-left-margin))


#+end_src

* Indentation

** Guides

*** COMMENT Highlight indent guides
Doom emacs's version :ui indent-guides sets up hooks for org-mode which interact badly with org-indent-modern

#+begin_src emacs-lisp :tangle packages.el
(package! highlight-indent-guides)
#+end_src

#+begin_src emacs-lisp
(use-package! highlight-indent-guides
  :after-call doom-first-buffer-hook
  :custom
  (highlight-indent-guides-auto-enabled nil)
  (highlight-indent-guides-delay 1)
  (highlight-indent-guides-method 'character)
  :config
  :hook (prog-mode . highlight-indent-guides-mode)
  )

(add-hook! highlight-indent-guides-mode
  (custom-set-faces!
    '(highlight-indent-guides-character-face :foreground "#2b3045") ;bg-inactive
    ))

#+end_src

*** indent bars

#+begin_src emacs-lisp :tangle packages.el
(package! indent-bars :recipe (:host github :repo "jdtsmith/indent-bars"))
#+end_src


#+begin_src emacs-lisp
;; (remove-hook! 'text-mode-hook #'highlight-indent-guides-mode)
;; (remove-hook! 'prog-mode-hook #'highlight-indent-guides-mode)
(use-package! indent-bars
  :custom
  ;; stipples not supported on mac os build
  (indent-bars-prefer-character t)
  :hook ((prog-mode text-mode conf-mode) . indent-bars-mode))
#+end_src

** Shift regions

#+begin_src emacs-lisp
;; Shift the selected region right if distance is postive, left if
;; negative

(defun vi/shift-region (distance)
  (let ((mark (mark)))
    (save-excursion
      (indent-rigidly (region-beginning) (region-end) distance)
      (push-mark mark t t)
      ;; Tell the command loop not to deactivate the mark
      ;; for transient mark mode
      (setq deactivate-mark nil))))

(defun vi/shift-right ()
  (interactive)
  (vi/shift-region 1))

(defun vi/shift-left ()
  (interactive)
  (vi/shift-region -1))

(map! :g "M->" #'vi/shift-right)
(map! :g "M-<" #'vi/shift-left)
#+end_src

* Movement


#+begin_src emacs-lisp :tangle packages.el
(package! mwim)
#+end_src


#+begin_src emacs-lisp
(use-package! mwim
  :bind
  ("C-a" . mwim-beginning)
  ("C-e" . mwim-end)
  )
#+end_src

* Search/Filtering

** isearch
#+begin_src emacs-lisp
(after! isearch
  ;; Show match/total in isearch prompt
  (setq isearch-lazy-count t
        isearch-lazy-highlight t))
#+end_src

** smartscan
#+begin_src emacs-lisp :tangle packages.el
(package! smartscan)
#+end_src


#+begin_src emacs-lisp
(use-package! smartscan
  :after-call doom-first-buffer-hook
  :config
  (global-smartscan-mode 1)

  ;; M-p, M-n interfere in git-rebase mode
  (add-hook! git-rebase-mode (smartscan-mode -1))
  )
#+end_src
** regex-based searching, using python/pcre

#+begin_src emacs-lisp :tangle packages.el
(package! visual-regexp)
(package! visual-regexp-steroids)
#+end_src

** Jumping


#+begin_src emacs-lisp :tangle packages.el
(package! smart-jump)
(package! rg)                           ;For smart-jump-find-references-with-rg
#+end_src


#+begin_src emacs-lisp
;; better-jumper is built into doom
(use-package! smart-jump
  :after-call prog-mode-hook            ; don't defer till bind?
  :custom
  (smart-jump-find-references-fallback-function #'smart-jump-find-references-with-rg)
  (smart-jump-bind-keys nil)
  :config

  ;; this sets up hooks with the :modes, so it won't work without revert-buffer
  ;; since we use :bind to load this package (see :after-call above)
  ;; (smart-jump-register :modes 'prog-mode
  ;;                      :jump-fn #'+lookup/definition
  ;;                      :pop-fn 'xref-pop-marker-stack
  ;;                      :refs-fn #'+lookup/references
  ;;                      :heuristic 'error
  ;;                      :refs-heuristic 'error
  ;;                      :should-jump t
  ;;                      :before-jump-fn #'better-jumper-set-jump
  ;;                      :order 2
  ;;                      :async t)

  (smart-jump-register :modes 'lsp-mode
                       :jump-fn 'lsp-find-definition
                       :pop-fn 'xref-pop-marker-stack
                       :refs-fn 'lsp-find-references
                       :heuristic 'point
                       :refs-heuristic 'point
                       :before-jump-fn #'better-jumper-set-jump
                       :should-jump t
                       :order 1
                       :async t)

  (smart-jump-setup-default-registers)
  :bind (("M-." . smart-jump-go)
          ;; seems to work with smart-jump without calling better-jumper-set-jump?
          ;; also advicing smart-jump with better-jumper-set-jump seems to break
          ("M-," . better-jumper-jump-backward)
          ("M-?" . smart-jump-references)
          )
  :commands (smart-jump-go smart-jump-back smart-jump-references)
  )

(after! dumb-jump
  (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
  (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t))

(setq xref-show-xrefs-function #'consult-xref)
(setq xref-show-definitions-function #'consult-xref)

#+end_src

** tags
:PROPERTIES:
:CREATED:  [2023-11-17 Fri 17:09]
:END:


#+begin_src emacs-lisp :tangle packages.el
(package! citre)
#+end_src


#+begin_src emacs-lisp
;; https://git.sr.ht/~northyear/dotemacs/tree/e9b75ccce4e840525c4ec664777694e21c69bc6e/item/site-lisp/consult-citre.el
;; stored in .config/doom/lisp
(load! "lisp/consult-citre.el")
#+end_src

** embark


#+begin_src emacs-lisp
(after! embark
  ;; since we disabled which-key
  (advice-remove 'embark-completing-read-prompter '+vertico--embark-which-key-prompt-a)
  ;; try out embark-mixed-indicator which is more verbose than embark-which-key-indicator
  (setq! embark-indicators '(embark--vertico-indicator embark-minimal-indicator embark-highlight-indicator embark-isearch-highlight-indicator))
  )
#+end_src

*** targets for buffer/file

https://github.com/oantolin/embark/issues/231#issuecomment-854390476

#+begin_src emacs-lisp
(after! embark
  (defun embark-target-this-buffer-file ()
    (cons 'this-buffer-file (or (buffer-file-name) (buffer-name))))

  (add-to-list 'embark-target-finders #'embark-target-this-buffer-file 'append)

  (add-to-list 'embark-keymap-alist '(this-buffer-file . this-buffer-file-map))

  (defvar-keymap this-buffer-file-map
    :doc"Commands to act on current file or buffer."
    :parent embark-general-map
    "l" #'load-file
    "b" #'byte-compile-file
    ;; ("S" sudo-find-file)
    ;; ("U" 0x0-upload)
    ;; ("r" rename-file-and-buffer)
    ;; ("d" diff-buffer-with-file)
    "=" #'ediff-buffers
    "C-=" #'ediff-files
    "!" #'shell-command
    "&" #'async-shell-command
    "x" #'consult-file-externally
    ;; ("C-a" mml-attach-file)
    "c" #'copy-file
    "k" #'kill-buffer
    "z" #'bury-buffer
    "|" #'embark-shell-command-on-buffer
    "g" #'revert-buffer
    )
  )
#+end_src
** consult customization

# TODO: filter out dired-sidebar

#+begin_src emacs-lisp
(after! consult
  ;; (add-hook! 'consult-after-jump-hook #'recenter-top-bottom)
  (add-hook! 'consult-after-jump-hook #'recenter)
  (add-hook! 'consult-after-jump-hook #'pulse-momentary-highlight-one-line)

  (setq! consult-fontify-max-size 1024)   ;https://github.com/minad/consult/issues/329

  (defalias 'consult-line-thing-at-point 'consult-line)
  (consult-customize consult-line-thing-at-point :initial (thing-at-point 'symbol))

  (map! "C-s" #'consult-line "C-r" #'vertico-repeat)               ;deliberately not setting initial


  (setq consult-line-start-from-top nil)
  (setq consult-line-point-placement 'match-beginning)

  )
#+end_src

*** consult-dir
#+begin_src emacs-lisp
(after! consult-dir
  ;; (setq consult-dir-project-list-function #'consult-dir-projectile-dirs)

  ;; this is normally find-file, but it's perhaps more useful to find any file
  ;; (setq consult-dir-default-command #'+vertico/consult-fd)
  (setq consult-dir-default-command #'consult-dir-dired)

  ;; https://github.com/karthink/consult-dir/issues/20#issuecomment-1193087091
  (map! :map minibuffer-local-map "C-c b" #'embark-become)
  (map! :map embark-become-file+buffer-map
        "d" #'dired
        "S" #'+vertico/consult-fd
        "D" #'consult-dir)
  )
#+end_src

*** COMMENT vicb



https://github.com/doomemacs/doomemacs/issues/1213

We put this file directly in .config/doom/lisp (.doom.d) so that we can edit locally, and added to yadm

#+begin_src emacs-lisp :tangle packages.el
;; (package! vi-consult-buffers :recipe (:host github :repo "indigoviolet/vi-consult-buffers"))
#+end_src

#+begin_src emacs-lisp
(load! "lisp/vi-consult-buffers/vicb.el")

(use-package! vicb
  :after consult
  :config
  (vicb-setup)

  ;; delay previews so that these don't affect recency ranking
  ;; https://github.com/minad/consult#live-previews
  (eval `(consult-customize ,@consult-buffer-sources :preview-key '(:debounce 0.8 any)))
  )

;; (after! '(consult vicb)
;;   ;; (consult-customize consult-buffer :group nil :sort t)
;;   )
#+end_src


*** COMMENT projectile


#+begin_src emacs-lisp
(after! (consult projectile)
   (setq consult-project-function (lambda (_) (projectile-project-root)))
   )
#+end_src


*** COMMENT consult-projectile

+This is not very useful in practice:+ doom has built in support for project
switching that works better with workspaces; but we can use just the find-file
function, which is better than +doom-project-find-file

#+begin_src emacs-lisp :tangle packages.el
(package! consult-projectile :recipe (:host gitlab :repo "OlMon/consult-projectile"))
#+end_src


#+begin_src emacs-lisp
(use-package! consult-projectile)

(after! consult-projectile
  (setq consult-buffer-sources
    '(consult--source-modified-buffer
       consult--source-project-buffer
       consult--source-buffer
       consult--source-recent-file
       consult-projectile--source-projectile-buffer
       consult-projectile--source-projectile-file
       consult-projectile--source-projectile-project
       consult--source-hidden-buffer
       +vertico--consult-org-source)))

#+end_src

*** consult-project-extra

#+begin_src emacs-lisp :tangle packages.el
(package! consult-project-extra)
#+end_src


#+begin_src emacs-lisp
(use-package! consult-project-extra
  :config
  (setq consult-buffer-sources
    '(consult--source-modified-buffer
       consult-project-extra--source-buffer
       consult--source-project-buffer
       consult--source-buffer
       consult--source-recent-file
       ;; consult-projectile--source-projectile-buffer
       ;; consult-projectile--source-projectile-file
       ;; consult-projectile--source-projectile-project

       consult-project-extra--source-file
       consult-project-extra--source-project
       ;; consult--source-hidden-buffer
       +vertico--consult-org-source))

  ;; consult-project-buffer calls consult-project-function(t) but doom-project-root, the default value of consult-project-function doesn't take t
  (setq! consult-project-function (lambda (_) (doom-project-root)))
  )

#+end_src





*** COMMENT consult-jump-project

This looks great but has no projectile support

#+begin_src emacs-lisp :tangle packages.el
(package! consult-jump-project :recipe (:host github :repo "jdtsmith/consult-jump-project"))
#+end_src



** Orderless

https://github.com/oantolin/orderless#interactively-changing-the-configuration
https://github.com/minad/vertico#completion-styles-and-tab-completion

https://old.reddit.com/r/emacs/comments/o9pue1/changing_consultline_matching_with_orderless/
#+begin_src emacs-lisp
(after! orderless
  ;; https://github.com/minad/consult/issues/237
  (defun consult-basic-all-completions (string table pred _point)
    ;; Ignore the disambiguation prefix
    (let ((completion-regexp-list (list (concat "\\`[\x100000-\x10FFFD]*" (regexp-quote string)))))
      (all-completions "" table pred)))

  (defun consult-basic-try-completion (string table pred _point)
    ;; Ignore the disambiguation prefix
    (let ((completion-regexp-list (list (concat "\\`[\x100000-\x10FFFD]*" (regexp-quote string)))))
      (try-completion "" table pred)))

  (add-to-list 'completion-styles-alist
    '(consult-basic
       consult-basic-try-completion consult-basic-all-completions
       "Consult-compatible basic completion."))


  ;; (orderless-define-completion-style orderless+initialism
  ;;   (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))
  (setq completion-styles '(orderless)
    completion-category-defaults nil
    completion-category-overrides
    '((file (styles partial-completion))  ;; orderless+initialism))
       ;; (consult-location (styles consult-basic)) ;consult-line
       ;; (buffer (styles orderless+initialism))
       ;; (consult-multi (styles orderless+initialism))
       ;; (command (styles orderless+initialism))
       ;; (variable (styles orderless+initialism))
       ;; (symbol (styles orderless+initialism))
       )
    orderless-matching-styles '(orderless-literal orderless-regexp))
  )

(after! vertico
  (defun vi/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local orderless-matching-styles '(orderless-literal)
      orderless-style-dispatchers nil))

  ;; (define-key minibuffer-local-completion-map (kbd "C-l") #'vi/match-components-literally)
    (map! :map vertico-map
      "C-l" #'vi/match-components-literally)
      ;;"M-j" #'vertico-quick-jump)

  )
#+end_src
* Narrowing


#+begin_src emacs-lisp :tangle packages.el
(package! recursive-narrow)
#+end_src


#+begin_src emacs-lisp
(use-package! recursive-narrow
  :commands (hydra-narrow/body recursive-narrow-or-widen-dwim recursive-widen)
  :config
  (defhydra hydra-narrow (:exit t :columns 2)
    "Narrow"
    ("n" recursive-narrow-or-widen-dwim "narrow")
    ("w" recursive-widen "widen")
    )
  )
#+end_src
* Folding

** outline
- bicycle doesn't seem to do anything more than outline-cycle and outline-cycle-buffer

*** outline faces

- clutters in prog-mode, but probably useful in ein:notebook-mode

#+begin_src emacs-lisp :tangle packages.el
(package! outline-minor-faces :recipe (:host github :repo "tarsius/outline-minor-faces"))
#+end_src


#+begin_src emacs-lisp
(use-package! outline
  :custom
  (outline-minor-mode-cycle t)
  (outline-minor-mode-use-buttons 'in-margins)
  :after-call doom-first-buffer-hook
  ;; :hook (
  ;;         (prog-mode . outline-minor-mode)
  ;;        )
  :bind (:map outline-minor-mode-map
         ([C-tab] . outline-cycle)
         ("C-<iso-lefttab>" . outline-hide-other) ;C-S-<tab>
         ([s-tab] . outline-cycle-buffer)); win-tab
  )

(after! outline
  ;; Customize the distracting folding markers.
  (set-display-table-slot
   standard-display-table
   'selective-display
   (let ((face-offset (* (face-id 'shadow) (lsh 1 22))))
     (vconcat (mapcar (lambda (c) (+ face-offset c)) " ➤"))))
  )
#+end_src

*** COMMENT outline-magic


#+begin_src emacs-lisp :tangle packages.el
(package! outline-magic)
#+end_src

*** yaml

#+begin_src emacs-lisp
;; https://gist.github.com/leoc/f8c0868051003c4ea6eff638bc614575

(defun leoc/yaml-outline-level ()
  (s-count-matches "\\([ ]\\{2\\}\\)" (match-string 0)))

(defun leoc/yaml-outline-regexp ()
  (rx
    (seq
      bol
      (group (zero-or-more "  ")
        (or (group
              (seq (or (seq "\"" (*? (not (in "\"" "\n"))) "\"")
                     (seq "'" (*? (not (in "'" "\n"))) "'")
                     (*? (not (in ":" "\n"))))
                ":"
                (?? (seq
                      (*? " ")
                      (or (seq "&" (one-or-more nonl))
                        (seq ">-")
                        (seq "|"))
                      eol))))
          (group (seq
                   "- "
                   (+ (not (in ":" "\n")))
                   ":"
                   (+ nonl)
                   eol)))))))



(setq-hook! 'yaml-mode-hook outline-level 'leoc/yaml-outline-level)
(setq-hook! 'yaml-mode-hook outline-regexp (leoc/yaml-outline-regexp))
(map! :map yaml-mode-map
  "|" nil
  ":" nil
  ">" nil
  "-" nil
  "." nil
  [backspace] nil
  )
(add-hook! 'yaml-mode-hook #'outline-minor-mode #'outline-minor-faces-mode #'lsp)


#+end_src

*** Python

https://old.reddit.com/r/emacs/comments/e2u5n9/code_folding_with_outlineminormode/
#+begin_src emacs-lisp
(setq-hook! 'python-mode-hook outline-regexp (python-rx (* space) (or defun decorator)))
#+end_src




** COMMENT ts-fold

TODO: keybindings, but best if we have cycling like outline-cycle https://github.com/jcs-elpa/ts-fold/issues/29

See implementation of `outline-cycle` or `outline-cycle-buffer` to diy this

WARN: ts-fold might be causing some font rendering glitches, at least with Iosevka and ts-fold-indicators-mode
WARN: ts-fold-close-all is surprisingly slow
WARN: ts-fold-indicators-mode is very slow

#+begin_src emacs-lisp :tangle packages.el
(package! ts-fold :recipe (:host github :repo "jcs-elpa/ts-fold"))
#+end_src


#+begin_src emacs-lisp
(add-hook! 'tree-sitter-mode-hook #'fringe-mode #'ts-fold-mode) ;; #'ts-fold-indicators-mode)
#+end_src
** COMMENT fold-this

TODOs:

- fold-this persistent mode only operates on buffers backed by files (https://github.com/magnars/fold-this.el/blob/master/fold-this.el#L298)
  - Only saves locations for the folded overlay
- Only saves on killing buffer/emacs (https://github.com/magnars/fold-this.el/blob/master/fold-this.el#L377)
- Written to operate on all buffers at once (https://github.com/magnars/fold-this.el/blob/master/fold-this.el#L294)
- perhaps it's worth changing to update the alist for the current buffer when folds are modified?
- maybe it can be expanded to handle folding for ein notebooks, but the alist format would have to be cell identifiers.

#+begin_src emacs-lisp :tangle packages.el
(package! fold-this)
#+end_src

#+begin_src emacs-lisp
(add-hook! '(prog-mode-hook ein:notebook-mode-hook) (fold-this-mode fold-this-persistent-mode))
#+end_src
** COMMENT outshine

has unwieldy keybindings. unclear we need this over outline-minor-mode (in the context of ein:notebook)

#+begin_src emacs-lisp :tangle packages.el
(package! outshine)
#+end_src
** COMMENT outli


#+begin_src emacs-lisp :tangle packages.el
(package! outli :recipe (:host github :repo "jdtsmith/outli"))
#+end_src



* Completion

** COMMENT Tabnine

#+begin_src emacs-lisp :tangle packages.el
(package! company-tabnine)
#+end_src

#+begin_src emacs-lisp
(use-package! company-tabnine
  :custom
  (company-tabnine-no-continue t)
  :commands (company-tabnine))
  ;; :config
  ;; ;; https://github.com/TommyX12/company-tabnine#known-issues
  ;; ;; workaround for company-transformers
  ;; (setq company-tabnine--disable-next-transform nil)
  ;; (defun my-company--transform-candidates (func &rest args)
  ;;   (if (not company-tabnine--disable-next-transform)
  ;;       (apply func args)
  ;;     (setq company-tabnine--disable-next-transform nil)
  ;;     (car args)))

  ;; (defun my-company-tabnine (func &rest args)
  ;;   (when (eq (car args) 'candidates)
  ;;     (setq company-tabnine--disable-next-transform t))
  ;;   (apply func args))

  ;; (advice-add #'company--transform-candidates :around #'my-company--transform-candidates)
  ;; (advice-add #'company-tabnine :around #'my-company-tabnine))
#+end_src

** Corfu/Cape

#+begin_src emacs-lisp :tangle packages.el
(package! corfu :recipe (:host github :repo "minad/corfu" :files (:defaults "extensions/*.el")))
(package! cape)
(package! company)                      ; for company-yankpad
(package! popon :recipe (:host codeberg :repo "akib/emacs-popon"))
;; (package! corfu-terminal :recipe (:type git :repo "https://codeberg.org/akib/emacs-corfu-terminal.git"))
#+end_src

#+begin_src emacs-lisp
(use-package! corfu
  :after-call doom-first-buffer-hook
  :custom
  (corfu-auto t)
  (corfu-auto-delay 0.2)
  (corfu-auto-prefix 2)
  (completion-styles '(basic))
  :config
  (custom-set-faces! '(corfu-current :background "ivory4"))
  ;; (global-corfu-mode)
  (corfu-history-mode 1)
  :hook (
          (prog-mode . corfu-mode)
          (org-mode . corfu-mode)
          (conf-mode . corfu-mode)
          (text-mode . corfu-mode)
          )
  )

;; (after! corfu
;;   (setq! corfu-terminal-disable-on-gui nil)
;;   (corfu-terminal-mode)
                                        ;  )

(use-package! cape
  :after corfu
  :config
  (require 'company)
  (defalias 'vi/cape-yankpad (cape-capf-buster (cape-company-to-capf #'company-yankpad)))

                        ;; (apply-partially #'company--multi-backend-adapter
                        ;;   '( ;;company-tabnine
                        ;;      company-yankpad)))))

  ;; (defalias 'vi/cape-tabnine (cape-company-to-capf #'company-tabnine))
  (defalias 'vi/cape-interactive-yankpad (cape-capf-interactive #'vi/cape-yankpad))

  (setq-hook! '(conf-mode-hook text-mode-hook json-mode-hook org-mode-hook ein:notebook-mode-hook)
    completion-at-point-functions
    (list #'vi/cape-yankpad)) ;; #'cape-dabbrev))

  (defun vi/corfu-lsp-setup ()
    ;; Combine LSP via corfu so we can use it in combination with
    ;; company-tabnine and yankpad

    (interactive)
    ;; https://github.com/minad/corfu/wiki

    ;;;; these are set in LSP use-package
    ;; (setq-local lsp-enable-completion-at-point t)
    ;; (setq-local lsp-completion-provider :none)       ;we use corfu (but we do have LSP set up through that)!

    (defun my/orderless-dispatch-flex-first (_pattern index _total)
      (and (eq index 0) 'orderless-flex))

    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
        '(orderless)))

    ;; Optionally configure the first word as flex filtered.
    ;; (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)

    ;; Optionally configure the cape-capf-buster.
    (setq-local completion-at-point-functions (list
                                                (cape-capf-super
                                                  (cape-capf-buster #'lsp-completion-at-point)
                                                  #'vi/cape-yankpad
                                                  ;; #'cape-dabbrev
                                                  )
                                                )))
  (add-hook! 'lsp-completion-mode-hook #'vi/corfu-lsp-setup)
  )
#+end_src


** copilot

*** original package

#+begin_src emacs-lisp :tangle packages.el
(package! copilot
  :recipe (:host github :repo "zerolfx/copilot.el" :files ("*.el" "dist")))
#+end_src

*** COMMENT updated fork

https://robert.kra.hn/posts/2023-02-22-copilot-emacs-setup/#copilot-emacs-packages

#+begin_src emacs-lisp :tangle packages.el
(package! copilot
  :recipe (:host github :repo "rksm/copilot.el" :files ("*.el" "dist")))
#+end_src

*** config

#+begin_src emacs-lisp
(use-package! copilot
  :after corfu
  :custom
  (copilot-idle-delay 0.3)
  :config

  ;; https://github.com/rksm/copilot-emacsd/blob/master/init.el
  (defun rk/copilot-complete-or-accept ()
    "Command that either triggers a completion or accepts one if one
is available. Useful if you tend to hammer your keys like I do."
    (interactive)
    (if (copilot--overlay-visible)
      (progn
        (copilot-accept-completion)
        (open-line 1)
        (next-line))
      (copilot-complete)))

  (defun rk/copilot-tab ()
    "Tab command that will complet with copilot if a completion is
available. Otherwise will try tab-indent."
    (interactive)
    ;; indent-for-tab-command compares last-command to this-command in python-indent-line-function to decide whether to dedent.
    ;; without this, it stops dedenting
    (set 'this-command 'indent-for-tab-command)
    (or (copilot-accept-completion)
      ;; (company-yasnippet-or-completion)
      (indent-for-tab-command)))


  (defun rk/copilot-complete-if-active (next-func n)
    (let ((completed (when copilot-mode (copilot-accept-completion))))
      (unless completed (funcall next-func n))))


  (defun rk/copilot-quit ()
    "Run `copilot-clear-overlay' or `keyboard-quit'. If copilot is
cleared, make sure the overlay doesn't come back too soon."
    (interactive)
    (condition-case err
      (when (copilot--overlay-visible)
        (lexical-let ((pre-copilot-disable-predicates copilot-disable-predicates))
          (setq copilot-disable-predicates (list (lambda () t)))
          (copilot-clear-overlay)
          (run-with-idle-timer
            0.3
            nil
            (lambda ()
              (setq copilot-disable-predicates pre-copilot-disable-predicates)))))
      (error handler)))

  ;; (advice-add 'keyboard-quit :before #'rk/copilot-quit)
  (add-hook! 'doom-escape-hook
    (defun vi/rk/copilot-quit()
      ;; return nil so other hooks can run
      (progn (rk/copilot-quit) nil)))

  ;; complete by pressing right or tab but only when copilot completions are
  ;; shown. This means we leave the normal functionality intact.
  ;;(advice-add 'right-char :around #'rk/copilot-complete-if-active)
  ;; (advice-add 'indent-for-tab-command :around #'rk/copilot-complete-if-active)

  :hook ((prog-mode . copilot-mode) (conf-mode . copilot-mode) (yaml-mode . copilot-mode))
  :bind (
         :map copilot-completion-map
          ;; ("C-g" . 'copilot-clear-overlay)
         ;;("<tab>" . 'copilot-accept-completion)
          ("<right>" . 'copilot-accept-completion)
         ("C-<up>" . 'copilot-previous-completion)
         ("C-<down>" . 'copilot-next-completion)
         ("C-<right>" . 'copilot-accept-completion-by-word)
         ("C-M-<right>" . 'copilot-accept-completion-by-line))
  ;; :bind (;; ("C-TAB" . 'copilot-accept-completion-by-word)
  ;;         ;; ("C-<tab>" . 'copilot-accept-completion-by-word)
  ;;         :map copilot-mode-map
  ;;         ;;;("C-/" . 'rk/copilot-complete-or-accept)
  ;;         ;; :map copilot-completion-map
  ;;         ;; ("C-<tab>" . 'copilot-accept-completion)
  ;;         )
  )

(add-hook! 'copilot-mode-hook (map! :map copilot-mode-map "C-<return>" #'rk/copilot-complete-or-accept))
(add-hook! 'copilot-mode-hook (map! :map prog-mode-map "<tab>" #'rk/copilot-tab))

;; try to turn off keybindings (up/down) that company-mode interferes with
;; (add-hook! prog-mode :append (progn (message "disabling company mode") (company-mode -1) (message "disabled")))
#+end_src

** COMMENT chatgpt

pipx install git+https://github.com/mmabrouk/chatgpt-wrapper
pipx inject chatGPT playwright --include-apps
playwright install
chatgpt install

it also requires a globally accessible python package `epc`.. not sure how to
achieve that easily (https://github.com/joshcho/ChatGPT.el/issues/4)


#+begin_src emacs-lisp :tangle packages.el
(package! chatgpt
  :recipe (:host github :repo "joshcho/ChatGPT.el" :files ("dist" "*.el")))
#+end_src


#+begin_src emacs-lisp
(use-package! chatgpt
  :defer t
  :config
  (unless (boundp 'python-interpreter)
    (defvaralias 'python-interpreter 'python-shell-interpreter))
  (setq chatgpt-repo-path (expand-file-name "straight/repos/ChatGPT.el/" doom-local-dir))
  (set-popup-rule! (regexp-quote "*ChatGPT*")
    :side 'bottom :size .5 :ttl nil :quit t :modeline nil))
#+end_src

** COMMENT chatgpt shell

#+begin_src emacs-lisp :tangle packages.el
(package! chatgpt-shell)
#+end_src


#+begin_src emacs-lisp
(use-package chatgpt-shell
  :custom
  (chatgpt-shell-openai-key
    (lambda ()
      ;; ~/.authinfo.gpg
      (auth-source-pick-first-password :host "api.openai.com")))
  :bind (
          :map shell-maker-map
          (("C-<return>" . comint-send-input) ("<return>" . newline))
          )
  )
#+end_src

** gptel
:PROPERTIES:
:CREATED:  [2024-01-22 Mon 12:01]
:END:


#+begin_src emacs-lisp :tangle packages.el
(package! gptel)
#+end_src


#+begin_src emacs-lisp
(use-package! gptel)

#+end_src

* Iedit

#+begin_src emacs-lisp :tangle packages.el
(package! iedit)
#+end_src

#+begin_src emacs-lisp
(use-package! iedit
  :bind
  ("C-;" . iedit-mode))
#+end_src

* wgrep

#+begin_src emacs-lisp :tangle packages.el
(package! wgrep)
#+end_src


#+begin_src emacs-lisp
(use-package! wgrep
  :commands (wgrep-change-to-wgrep-mode)
  :custom
  (wgrep-auto-save-buffer t)
  )
#+end_src

* COMMENT Which-key

#+begin_src emacs-lisp
;; Allow C-h to trigger which-key before it is done automatically
(after! which-key
  (setq which-key-show-early-on-C-h t)
  )
#+end_src

* Hydra

#+begin_src emacs-lisp :tangle packages.el
(package! pretty-hydra)
(package! major-mode-hydra)
#+end_src

#+begin_src emacs-lisp
(after! major-mode-hydra
  (setq major-mode-hydra-invisible-quit-key "q")

  (defun vi/get-major-mode ()
    (cond
     ((and (boundp 'ein:notebook-mode) ein:notebook-mode) 'ein:notebook-mode)
     (major-mode)
     ))

  (defun vi/major-mode-hydra ()
    (interactive)
    (major-mode-hydra-dispatch (vi/get-major-mode)))
  )

(defun vi/revert-buffer ()
  (interactive)
  (find-alternate-file (buffer-file-name)))
#+end_src

** Global hydra
#+begin_src emacs-lisp
(pretty-hydra-define global-hydra (:exit t :quit-key ("q" "C-g"))
  ("Searching"
    (;; ("f" +vertico/consult-fd "fd")
      ("s" +default/search-project "rg in project")
      ("t" consult-citre "tags search")
      ("l" consult-line "Line isearch")
      )
    "Buffers/files"
    (("b" consult-buffer "Buffers")
      ;; ("P" consult-projectile-find-file "Project files")
      ;; ("M-P" projectile-save-project-buffers "Save Project Buffers")
      ("T" dirvish-side)
      ("R" vi/revert-buffer "Revert")
      ("M-k" vi/force-kill-buffer "Force kill")
      )
    "Intra-buffer"
    (
      ("o" consult-outline "outlIne")
      ("i" consult-imenu "Imenu")
      ;; ("." push-mark-command "Push Mark")
      ;; ("m" consult-mark "consult-mark")
      ;; ("M" consult-global-mark "global-mark")
      ;;("f" fold-active-region "fold region")
      )
    "vterms"
    (
      ("v" vi/tile-vterm-buffers "vterm-toggle")
      ("V" (vi/vterm-local t) "vterm")
      ;; ("D" detached-list-sessions "Detached list sessions")
      )
    "Modes"
    (;; ("a" hydra-annotate/body "Annotate")
      ("SPC" vi/major-mode-hydra "Major")
      ("c" flycheck-hydra/body "flycheck")
      ("n" hydra-narrow/body "narrow")
      ;; ("e" ein-global-hydra/body "EIN")
      ;; ("p" org-pomodoro "Pomodoro")
      ("M-m" minions-minor-modes-menu "Minor modes")
      )
    "Actions"
    (
      ("M-y" yankpad-insert "yankpad")
      ("g" magit-status-here "magit")
      ("M-\\" edit-indirect-region "edit indirect region")
      ("d" dirvish-dwim "dired" )
      ;; ("r" consult-notes-org-roam-find-node "find node")
      ("r" consult-org-roam-file-find "find node")
      ("M-l" org-store-link "store link")
      ;; ("A" org-agenda-list "Agenda")
      ("a" vi/align-comments "Align comments")
      ("W" vi/dedup-windows "Dedupe windows")
      ("w" hydra-burly/body "Windows")
      ("P" prodigy "Prodigy")
      )
    )
  )

(key-chord-define-global "hh" #'global-hydra/body)
(key-chord-define-global "jj" #'vi/major-mode-hydra)
#+end_src

* Org

** org-mode package
#+begin_src emacs-lisp :tangle packages.el
;; Pinning for unfolding org-mode overlays while searching
;; https://github.com/doomemacs/doomemacs/issues/6478#issuecomment-1293505404
(package! org :pin "971eb6885ec996c923e955730df3bafbdc244e54")
;; (package! org :pin "6001313b8f8bc2c717b44070d6e7b19afc6125ec")
#+end_src

** org-mode config
#+begin_src emacs-lisp
(after! org
  ;; Add created timestamps to all headings (https://stackoverflow.com/questions/12262220/add-created-date-property-to-todos-in-org-mode/13285957#13285957)
  ;; (require 'org-expiry)
  ;; (org-expiry-insinuate)
  ;; (setq org-expiry-inactive-timestamps t)

  ;; hide org markup indicators
  (setq org-hide-emphasis-markers t
        ;; Insert Org headings at point, not after the current subtree (this is enabled by default by Doom).
        org-insert-heading-respect-content nil
        org-cycle-separator-lines 0
        org-attach-id-dir ".attach"
        org-blank-before-new-entry '((heading . never) (plain-list-item . never))
        org-startup-folded t
        org-startup-indented t
        org-startup-numerated nil
        org-startup-align-all-tables t
        ;; Leads to 'File mode specification error: (user-error Not at a table)' in some org files
        ;; replace with #+startup: shrink
        ;;        org-startup-shrink-all-tables t
        org-log-into-drawer t
        org-src-window-setup 'current-window
        org-src-preserve-indentation nil
        org-edit-src-content-indentation 0
        org-num-skip-commented t
        org-M-RET-may-split-line t
        ;; https://old.reddit.com/r/orgmode/comments/fagcaz/show_schedule_and_deadlines_for_standard_todo_list/
        org-agenda-files '("~/org/personal.org")
        org-refile-targets '(
                             ("~/org/personal.org" . (:maxlevel . 1))
                             ("~/org/ml.org" . (:maxlevel . 1))
                             ("~/org/work.org" . (:maxlevel . 1))
                             ("~/org/learning.org" . (:maxlevel . 1))
                             )
        org-agenda-entry-types '(:deadline :scheduled)
        org-agenda-skip-scheduled-if-done t
        org-todo-keywords '((sequence "TODO(t)" "WAIT(w!)" "REVISIT(r!)" "|" "DONE(d!)" "KILL(k!)" ))
        org-todo-keyword-faces '(("WAIT" . +org-todo-onhold)
                                 ("SOMEDAY" . +org-todo-project)
                                 ("KILL" . +org-todo-cancel))
        org-use-fast-todo-selection 'expert

        ;; https://github.com/radian-software/ctrlf/issues/118
        org-fold-core-style 'overlays)

  (major-mode-hydra-define org-mode (:quit-key ("q" "C-g") :title "test")
    ("Subtree"
     (("k" org-cut-subtree "cut")
      ("y" org-paste-subtree "paste")
      ("<up>" org-promote-subtree "promote" :exit nil)
      ("<down>" org-demote-subtree "demote" :exit nil)
      )
     "Src"
     (("/" org-babel-demarcate-block "split src block")
      ("T" org-babel-tangle "tangle")
       ("\\" org-edit-src-code "edit")
      )
     "Roam/Links"
     (
      ("N" org-id-get-create "Make into node")
      ("s" consult-notes-search-in-all-notes "search notes")
      ;; ("l" org-store-link "store link")
      ("i" org-insert-link "insert link")
      ("t" org-roam-tag-add "tag")
      ("X" org-roam-extract-subtree "Extract to node")
      ("w" org-roam-refile "refile")
      )
     "Misc"
     (
      ;; https://stackoverflow.com/a/6156444
      ;; '(4) is prefix (C-u)
      ;; '(16) is double-prefix C-u C-u
      ("x" (org-toggle-checkbox '(4)) "List [x]")
      ("*" org-toggle-heading "Toggle heading")
      ("-" org-toggle-item "Toggle item")
      ("Y" org-download-clipboard "pbpaste")
      )
     )
    )
  )
#+end_src


*** COMMENT Electric pairs

To remove:
(sp-local-pair 'org-mode "~" nil :actions :rem)

https://smartparens.readthedocs.io/en/latest/pair-management.html

#+begin_src emacs-lisp
(after! smartparens

 (sp-local-pair 'org-mode "~" "~")
 ;; (sp-local-pair 'org-mode "=" "=")
 ;; (sp-local-pair 'org-mode "$" "$")
 )
#+end_src

*** show delimiters

#+begin_src emacs-lisp :tangle packages.el
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))
#+end_src


#+begin_src emacs-lisp
(use-package! org-appear
 :after org
 :custom (
          (org-appear-autoemphasis t)
          (org-appear-autolinks t)
          (org-appear-autosubmarkers t)
          (org-appear-autoentities t)
          )
 :hook (org-mode . org-appear-mode)
 )
#+end_src

*** tangle on save

***** COMMENT Use auto-tangle

+Fails with /sudo tangle files https://github.com/yilkalargaw/org-auto-tangle/issues/9+

Fails with `:comments both` and certain modes:
https://github.com/yilkalargaw/org-auto-tangle/issues/11, but so does "Custom
async tangle" below.

The "After save hook" version is synchronous and has no problems.

+<2022-07-08 Fri> Pinned to c208036 to see if 'max-lisp-eval-depth' errors were caused by https://github.com/yilkalargaw/org-auto-tangle/commit/5b6071c5649ed648c97cd2deebf74fe633f7f0d0+

Also see https://tecosaur.github.io/emacs-config/config.html#asynchronous-config-tangling

We'd like to set a timeout and fall through to synchronous tangle?

#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle :recipe (:host github :repo "yilkalargaw/org-auto-tangle"))
#+end_src

#+begin_src emacs-lisp
(use-package! org-auto-tangle
 :after org
 :config
 (setq org-auto-tangle-default t)      ;this doesn't work with :custom
 :hook (org-mode . org-auto-tangle-mode))
#+end_src

***** COMMENT After save hook
#+begin_src emacs-lisp
(add-hook! org-mode :append
 (add-hook! after-save :append :local #'org-babel-tangle))
#+end_src

****** COMMENT Fall through from auto-tangle to org-babel-tangle

See https://github.com/yilkalargaw/org-auto-tangle/issues/9#issuecomment-1048465648 && https://github.com/yilkalargaw/org-auto-tangle/issues/11

For such situations, we may want #+auto_tangle: nil to cause the
org-babel-tangle after save hook to get set. Here's some example code to get
started:

#+begin_src emacs-lisp
(let ((will_auto_tangle (let (
                           (auto_tangle_extracted_assoc
                            ;; uniquify auto_tangle; org-collect-keywords capitalizes; returns ("AUTO_TANGLE" . "nil") or ("AUTO_TANGLE" . "t")
                            (assoc "AUTO_TANGLE" (org-collect-keywords '("auto_tangle") '("auto_tangle"))))
                           )
                           (if
                               (eq auto_tangle_extracted_assoc nil)    ;not found
                               org-auto-tangle-default           ;default
                             (cdr auto_tangle_extracted_assoc)         ;else whatever was found
                             )
                           )
                           ))
                                       ;can be nil or "nil" or "t" or t, convert "nil" to nil
                           (if (equal will_auto_tangle "nil") nil will_auto_tangle)
 )
#+end_src
*** Images


#+begin_src emacs-lisp :tangle packages.el
(package! org-download)
#+end_src

#+begin_src emacs-lisp
(after! org
 (setq org-download-method 'directory
       org-download-image-dir "org-images"
       org-download-heading-lvl nil
       org-download-timestamp "%Y%m%d-%H%M%S_"
       org-startup-with-inline-images t
       org-image-actual-width 300))
#+end_src
*** Reformatting an Org buffer

(originally:
https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/ A
function that reformats the current buffer by regenerating the text from its
internal parsed representation. Quite amazing.)

#+begin_src emacs-lisp
(after! org
 (defun vi/org-reformat-buffer ()
   (interactive)
   (when (y-or-n-p "Really format current buffer? ")
     (let ((document (org-element-interpret-data (org-element-parse-buffer))))
       (erase-buffer)
       (insert document)
       (goto-char (point-min))))))
#+end_src

*** Useful functions

***** misc
#+begin_src emacs-lisp
(after! org
 ;; http://emacs.stackexchange.com/a/10712/115
 (defun modi/org-delete-link ()
   "Replace an Org link of the format [[LINK][DESCRIPTION]] with DESCRIPTION.
If the link is of the format [[LINK]], delete the whole Org link.

In both the cases, save the LINK to the kill-ring.

Execute this command while the point is on or after the hyper-linked Org link."
   (interactive)
   (when (derived-mode-p 'org-mode)
     (let ((search-invisible t) start end)
       (save-excursion
         (when (re-search-backward "\\[\\[" nil :noerror)
           (when (re-search-forward "\\[\\[\\(.*?\\)\\(\\]\\[.*?\\)*\\]\\]"
                                    nil :noerror)
             (setq start (match-beginning 0))
             (setq end   (match-end 0))
             (kill-new (match-string-no-properties 1)) ;Save link to kill-ring
             (replace-regexp "\\[\\[.*?\\(\\]\\[\\(.*?\\)\\)*\\]\\]" "\\2"
                             nil start end)))))))

 (defun modi/lower-case-org-keywords ()
   "Lower case Org keywords and block identifiers.

Example: \"#+TITLE\" -> \"#+title\"
        \"#+BEGIN_EXAMPLE\" -> \"#+begin_example\"

Inspiration:
https://code.orgmode.org/bzg/org-mode/commit/13424336a6f30c50952d291e7a82906c1210daf0."
   (interactive)
   (save-excursion
     (goto-char (point-min))
     (let ((case-fold-search nil)
           (count 0))
       ;; Match examples: "#+FOO bar", "#+FOO:", "=#+FOO=", "~#+FOO~",
       ;;                 "‘#+FOO’", "“#+FOO”", ",#+FOO bar",
       ;;                 "#+FOO_bar<eol>", "#+FOO<eol>".
       (while (re-search-forward "\\(?1:#\\+[A-Z_]+\\(?:_[[:alpha:]]+\\)*\\)\\(?:[ :=~’”]\\|$\\)" nil :noerror)
         (setq count (1+ count))
         (replace-match (downcase (match-string-no-properties 1)) :fixedcase nil nil 1))
       (message "Lower-cased %d matches" count))))
)
#+end_src

***** Archive all done tasks
#+begin_src emacs-lisp
(after! org
 ;; https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command
 (defun vi/org-archive-done-tasks ()
   (interactive)
   (org-map-entries
    (lambda ()
      (org-archive-subtree)
      (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
    "/DONE" 'tree))
)
#+end_src

***** COMMENT org-return-dwim
https://github.com/alphapapa/unpackaged.el#org-return-dwim

+Bound to "M-RET" in org-mode-map+ some weird error with org-at-heading-p

#+begin_src emacs-lisp
(after! org
 (defun unpackaged/org-element-descendant-of (type element)
   "Return non-nil if ELEMENT is a descendant of TYPE.
TYPE should be an element type, like `item' or `paragraph'.
ELEMENT should be a list like that returned by `org-element-context'."
   ;; MAYBE: Use `org-element-lineage'.
   (when-let* ((parent (org-element-property :parent element)))
     (or (eq type (car parent))
         (unpackaged/org-element-descendant-of type parent))))

 ;;;###autoload
 (defun unpackaged/org-return-dwim (&optional default)
   "A helpful replacement for `org-return'.  With prefix, call `org-return'.

On headings, move point to position after entry content.  In
lists, insert a new item or end the list, with checkbox if
appropriate.  In tables, insert a new row or end the table."
   ;; Inspired by John Kitchin: http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/
   (interactive "P")
   (if default
       (org-return)
     (cond
      ;; Act depending on context around point.

      ;; NOTE: I prefer RET to not follow links, but by uncommenting this block, links will be
      ;; followed.

      ;; ((eq 'link (car (org-element-context)))
      ;;  ;; Link: Open it.
      ;;  (org-open-at-point-global)
)
      ((org-at-heading-p)
       ;; Heading: Move to position after entry content.
       ;; NOTE: This is probably the most interesting feature of this function.
       (let ((heading-start (org-entry-beginning-position)))
         (goto-char (org-entry-end-position))
         (cond ((and (org-at-heading-p)
                     (= heading-start (org-entry-beginning-position)))
                ;; Entry ends on its heading; add newline after
                (end-of-line)
                (insert "\n\n"))
               (t
                ;; Entry ends after its heading; back up
                (forward-line -1)
                (end-of-line)
                (when (org-at-heading-p)
                  ;; At the same heading
                  (forward-line)
                  (insert "\n")
                  (forward-line -1))
                ;; FIXME: looking-back is supposed to be called with more arguments.
                (while (not (looking-back (rx (repeat 3 (seq (optional blank) "\n")))))
                  (insert "\n"))
                (forward-line -1)))))

      ((org-at-item-checkbox-p)
       ;; Checkbox: Insert new item with checkbox.
       (org-insert-todo-heading nil))

      ((org-in-item-p)
       ;; Plain list.  Yes, this gets a little complicated...
       (let ((context (org-element-context)))
         (if (or (eq 'plain-list (car context))  ; First item in list
                 (and (eq 'item (car context))
                      (not (eq (org-element-property :contents-begin context)
                               (org-element-property :contents-end context))))
                 (unpackaged/org-element-descendant-of 'item context))  ; Element in list item, e.g. a link
             ;; Non-empty item: Add new item.
             (org-insert-item)
           ;; Empty item: Close the list.
           ;; TODO: Do this with org functions rather than operating on the text. Can't seem to find the right function.
           (delete-region (line-beginning-position) (line-end-position))
           (insert "\n"))))

      ((when (fboundp 'org-inlinetask-in-task-p)
         (org-inlinetask-in-task-p))
       ;; Inline task: Don't insert a new heading.
       (org-return))

      ((org-at-table-p)
       (cond ((save-excursion
                (beginning-of-line)
                ;; See `org-table-next-field'.
                (cl-loop with end = (line-end-position)
                         for cell = (org-element-table-cell-parser)
                         always (equal (org-element-property :contents-begin cell)
                                       (org-element-property :contents-end cell))
                         while (re-search-forward "|" end t)))
              ;; Empty row: end the table.
              (delete-region (line-beginning-position) (line-end-position))
              (org-return))
             (t
              ;; Non-empty row: call `org-return'.
              (org-return))))
      (t
       ;; All other cases: call `org-return'.
       (org-return)))))
#+end_src


*** Import from various formats into org

#+begin_src emacs-lisp :tangle packages.el
(package! org-pandoc-import :recipe (:host github :repo "tecosaur/org-pandoc-import" :files ("*.el" "filters" "preprocessors")))
#+end_src

Needs ~brew install pandoc~

#+begin_src emacs-lisp
(use-package! org-pandoc-import :after org)
#+end_src

*** literate calc

#+begin_src emacs-lisp :tangle packages.el
(package! literate-calc-mode)
#+end_src

Let's use this with file-locals instead

#+begin_src emacs-lisp
;; (add-hook! org-mode #'literate-calc-minor-mode)

(after! calc
 ;; converts
 (defalias 'calcFunc-uconv 'math-convert-units)

 ;; usimplify() simplifies units, alias to U
 (defalias 'calcFunc-U 'calcFunc-usimplify)
)
#+end_src


***** COMMENT poly-literate-calc



#+begin_src emacs-lisp :tangle packages.el
(package! poly-literate-calc
 :recipe (:local-repo "lisp/poly-literate-calc" :build (:not compile)));; :host github :repo "indigoviolet/poly-literate-calc"))
#+end_src


#+begin_src emacs-lisp
(use-package! poly-literate-calc)
#+end_src


*** COMMENT super-agenda


#+begin_src emacs-lisp :tangle packages.el
(package! org-super-agenda)
#+end_src


#+begin_src emacs-lisp
(after! org
 (org-super-agenda-mode)
 )
#+end_src
*** sh-mode src blocks

sh-mode uses $SHELL by default: https://list.orgmode.org/87eeg0tz6t.fsf@gmail.com/T/

#+begin_src emacs-lisp
(after! org
 (defun org-babel-bash-mode ()
   (sh-mode)
   (sh-set-shell "bash"))

 (add-to-list 'org-src-lang-modes '("bash" . org-babel-bash))
 )
#+end_src

*** org babel chaining

https://xenodium.com/emacs-chaining-org-babel-blocks/

#+begin_src emacs-lisp
(defun adviced:org-babel-execute-src-block (&optional orig-fun arg info params)
 (let ((body (nth 1 info))
       (include (assoc :include (nth 2 info)))
       (named-blocks (org-element-map (org-element-parse-buffer)
                         'src-block (lambda (item)
                                      (when (org-element-property :name item)
                                        (cons (org-element-property :name item)
                                              item))))))
   (while include
     (unless (cdr include)
       (user-error ":include without value" (cdr include)))
     (unless (assoc (cdr include) named-blocks)
       (user-error "source block \"%s\" not found" (cdr include)))
     (setq body (concat (org-element-property :value (cdr (assoc (cdr include) named-blocks)))
                        body))
     (setf (nth 1 info) body)
     (setq include (assoc :include
                          (org-babel-parse-header-arguments
                           (org-element-property :parameters (cdr (assoc (cdr include) named-blocks)))))))
   (funcall orig-fun arg info params)))

(advice-add 'org-babel-execute-src-block :around 'adviced:org-babel-execute-src-block)
#+end_src

#+results[b30c1b41ccddc21305a1d13530fcaa6911029689]:

*** table of contents

#+begin_src emacs-lisp :tangle packages.el
(package! org-make-toc)
#+end_src

***** COMMENT minor mode

disabled because it is noisy on startup, and used rarely (<2022-03-21 Mon>)
#+begin_src emacs-lisp
(after! org
 (add-hook! org-mode #'org-make-toc-mode))
#+end_src

*** calendar

#+begin_src emacs-lisp
(after! org
  (defmacro vi/org-in-calendar (command)
    (let ((name (intern (format "vi/org-in-calendar-%s" command))))
      `(progn
         (defun ,name ()
           (interactive)
           (org-eval-in-calendar ,command))
         #',name)))

  (map! :map org-read-date-minibuffer-local-map
        "<right>" (vi/org-in-calendar '(calendar-forward-day 1))
        "<left>" (vi/org-in-calendar '(calendar-backward-day 1))
        ">" (vi/org-in-calendar '(calendar-forward-month 1))
        "<" (vi/org-in-calendar '(calendar-backward-month 1))
        "." (vi/org-in-calendar '(calendar-goto-today)))
)
#+end_src
*** Org Roam


- <2022-09-09 Fri> If we set org-roam-directory to ~org-directory~, syncing is
  much faster; but we can't convert things outside of that directory into Nodes

  by doing org-id-get-create. Let's see if this is a problem

- <2022-09-11 Sun> Yes it is a problem: startup is very slow and lots of direnv
  shit, dir-locals gets executed. We might have to use org-roam-refile

#+begin_src emacs-lisp
(use-package! org-roam
  :custom
 ;; (org-roam-directory (getenv "HOME"))
 (org-roam-directory org-directory)
 (org-roam-db-node-include-function (lambda () (not (member "ATTACH" (org-get-tags)))))
 :config
 (org-roam-db-autosync-mode)
 (require 'org-protocol)
 )

(setq! org-roam-directory org-directory)
#+end_src

**** consult-org-roam
:PROPERTIES:
:CREATED:  [2023-08-09 Wed 13:21]
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! consult-org-roam :recipe (:host github :repo "jgru/consult-org-roam"))
#+end_src


#+begin_src emacs-lisp
(use-package! consult-org-roam
   :after org-roam
   :init
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?r)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
  (setq org-roam-node-display-template
    (concat "${title:80} " (propertize "${tags:20}" 'face 'org-tag))
    org-roam-node-annotation-function
    (lambda (node) (marginalia--time (org-roam-node-file-mtime node))))

   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key (kbd "M-.")))
   ;; :bind
   ;; ;; Define some convenient keybindings as an addition
   ;; ("C-c n e" . consult-org-roam-file-find)
   ;; ("C-c n b" . consult-org-roam-backlinks)
   ;; ("C-c n l" . consult-org-roam-forward-links)
   ;; ("C-c n r" . consult-org-roam-search))

#+end_src


**** COMMENT consult-notes



Alternative: https://github.com/jgru/consult-org-roam

#+begin_src emacs-lisp :tangle packages.el
(package! consult-notes :recipe (:host github :repo "mclear-tools/consult-notes"))
#+end_src


#+begin_src emacs-lisp
(use-package! consult-notes
  :commands (consult-notes consult-notes-search-in-all-notes consult-notes-org-roam-find-node consult-notes-org-roam-find-node-relation)
  :config
  (consult-notes-org-roam-mode)
  )
#+end_src

*** COMMENT org-modern-indent

very slow

#+begin_src emacs-lisp :tangle packages.el
(package! org-modern-indent :recipe (:host github :repo "jdtsmith/org-modern-indent"))
#+end_src


#+begin_src emacs-lisp
(add-hook! 'org-mode-hook #'org-modern-indent-mode)
#+end_src
*** COMMENT org-modern

checkboxes are tiny, and they can be fixed by adjusting faces but this just doesn't do much for me

#+begin_src emacs-lisp :tangle packages.el
(package! org-modern)
#+end_src


#+begin_src emacs-lisp
(use-package! org-modern
  :after org
  :custom
  (org-modern-hide-stars nil)           ;adds extra indentation
  :hook (org-mode . global-org-modern-mode))
#+end_src

*** fill paragraph


#+begin_src emacs-lisp
(defun org-back-to-item ()
  (re-search-backward "^ *[-+*]\\|^ *[1-9]+[)\.] " nil nil 1))

(defun org-fill-paragraph-handle-lists (&optional num-paragraphs)
  (interactive "p")
  (save-excursion
    (let ((bound (if mark-active
                     (- (region-end) 2)
                   (progn
                     (org-back-to-item)
                     (while (>= num-paragraphs 0)
                       (call-interactively 'org-mark-element)
                       (setq num-paragraphs (1- num-paragraphs)))
                     (- (region-end) 2)))))
      (while (search-forward "\n" bound t)
        (replace-match " ")))
    (org-fill-paragraph)))

(map! :mode org-mode "C-M-q" #'org-fill-paragraph-handle-lists)
#+end_src

*** colored-text

#+begin_src emacs-lisp :tangle packages.el
(package! org-colored-text :recipe (:host github :repo "indigoviolet/org-colored-text"))
#+end_src

#+begin_src emacs-lisp
(use-package! org-colored-text :after org) ;; :load-path "/home/venky/dev/org-colored-text/")
#+end_src

[[color:green][this text is green]]

*** Export

**** No htmlentities in quotes
#+begin_src emacs-lisp
(after! org
  (setq org-export-with-smart-quotes nil)
  )
#+end_src
**** Github flavored Markdown


#+begin_src emacs-lisp :tangle packages.el
(package! ox-gfm)
#+end_src



* COMMENT emacs-jupyter
** fontification

https://github.com/nnicandro/emacs-jupyter/issues/366#issuecomment-985758277

#+begin_src emacs-lisp
(after! org
  (defun display-ansi-colors ()
    (ansi-color-apply-on-region (point-min) (point-max)))

  (add-hook! org-babel-after-execute #'display-ansi-colors)
  )
#+end_src

** COMMENT envrc interaction

https://github.com/nnicandro/emacs-jupyter/issues/387

doesn't work


#+begin_src emacs-lisp
(after! org
  (add-hook! org-mode
    (defun fix-with-temp-buffer ()
      (inheritenv-add-advice #'with-temp-buffer)
      )
    ))
#+end_src
* COMMENT ein

#+begin_src emacs-lisp :tangle packages.el
;; (package! ein :pin "6063cee")           ;dec 25 2021 - previous working version
(package! ein :pin "87f4448")           ;apr 26 2023
#+end_src

#+begin_src emacs-lisp

(use-package! ein
  :commands (ein:notebooklist-open ein:notebooklist-login)
  :init
  (setq ein:polymode t)
  (setq ein:notebooklist-render-order '(render-opened-notebooks render-directory render-header))
  (setq ein:truncate-long-cell-output 1000)
  (setq ein:cell-max-num-outputs 1000)
  (setq ein:worksheet-enable-undo t)
  (setq ein:markdown-header-scaling nil)    ;this leads to variable pitch faces for
                                        ;markdown headers, which doesn't work so
                                        ;well with fontlocking (and outline-minor-faces-mode)
  (setq ein:output-area-inlined-images t)
  (setq ein:url-or-port '("http://localhost:8888"))
  (setq ein:jupyter-server-command "~/.local/bin/jupyter")
  ;; https://stackoverflow.com/a/67804732/14044156
  (setq ein:jupyter-server-use-subcommand "server")
  (setq ein:jupyter-server-args '("--no-browser" "--port=8889"))
  ;; https://github.com/millejoh/emacs-ipython-notebook/issues/423#issuecomment-458254069
  (setq ein:query-timeout nil)
  :config

  (custom-set-faces!
    '(ein:cell-output-area :background "MidnightBlue" :extend t)
    '(ein:cell-output-area-error :background "OrangeRed4" :extend t)
    '(ein:codecell-input-area-face :background "#23272e" :extend t)
    '(ein:codecell-input-prompt-face :foreground "black" :background "cyan" :extend t)
    ;; '(ein:markdowncell-input-prompt-face :foreground "LightPink" :background "black" :extend t)
    '(ein:markdowncell-input-prompt-face :foreground nil :background nil :extend t)
    '(ein:markdowncell-input-area-face :background nil :extend t)
    '(ein:markdown-header-face-1 :inherit nil)
    '(ein:markdown-header-face-2 :inherit nil)
    '(ein:markdown-header-face-3 :inherit nil)
    '(ein:markdown-header-face-4 :inherit nil)
    '(ein:markdown-header-face-5 :inherit nil)
    '(ein:markdown-header-face-6 :inherit nil)
    ;; '(ein:markdown-header-face :foreground "snow" :weight bold)
    ;; '(ein:markdown-header-face :foreground nil :weight normal)
    )

  (defun vi/ein-toggle-inlined-images ()
    (interactive)
    (setq ein:output-area-inlined-images (if ein:output-area-inlined-images nil t))
    )

  (defun vi/restart-and-execute-all-above ()
    (interactive)
    ;; This is required for lexical-let
    (eval-when-compile (require 'cl))
    (aif (ein:get-notebook)
      (lexical-let ((ws (ein:worksheet--get-ws-or-error)))
        (ein:kernel-delete-session
          (lambda (kernel)
            (ein:events-trigger (ein:$kernel-events kernel) 'status_restarting.Kernel)
            (ein:kernel-retrieve-session kernel 0
              (lambda (kernel)
                (ein:events-trigger (ein:$kernel-events kernel) 'status_restarted.Kernel)
                (ein:worksheet-execute-all-cells-above ws))))
          :kernel (ein:$notebook-kernel it)))
      (message "Not in notebook buffer!"))
    )

  (defun vi/ein:select-cell-text (cell)
    (interactive (list (ein:worksheet-get-current-cell)))
    (let* ((beg (ein:cell-input-pos-min cell))
            (end (ein:cell-input-pos-max cell)))
      (set-mark (goto-char beg))
      (goto-char end))
    )

  (defun vi/revert-notebook ()
    (interactive)
    (aif (ein:get-notebook)
      (let ((nurl (ein:$notebook-url-or-port it))
             (npath (ein:$notebook-notebook-path it)))
        ;; fix disabled undo
        (setq! ein:worksheet-enable-undo t)
        (ein:notebook-close it)
        ;; Reopen, but put it in the same window we were in
        (ein:notebook-open nurl npath nil
          (lambda (nb _)
            (switch-to-buffer (ein:notebook-buffer nb))))
        )))
  )
#+end_src

#+begin_src emacs-lisp
;; ein-hydra
(pretty-hydra-define ein-global-hydra (:exit t :quit-key ("q" "C-g"))
  ("Connect"
    (("b" ein:notebooklist-open "Notebook list")
      ("l" ein:notebooklist-login "Login")
      ("s" ein:jupyter-server-start "Start")
      ("t" ein:jupyter-server-stop "Stop")
      ("C" ein:byte-compile-ein "Byte-compile")
      ))
  )

(major-mode-hydra-define (ein:notebook-mode ein:shared-output-mode) (:quit-key ("q" "C-g") :exit t :foreign-keys run)
  (
    "Reconnect"
    (("r" ein:notebook-reconnect-session-command "Reconnect")
      ("R" ein:notebook-restart-session-command "Restart")
      ("z" ein:notebook-kernel-interrupt-command "interrupt")
      ("v" vi/revert-notebook "Revert")
      ("K" ein:notebook-switch-kernel "Switch Kernel"))
    "Exec"
    (
      ("x" ein:worksheet-execute-all-cells-above "Execute all above")
      ("X" vi/restart-and-execute-all-above "Restart & x")
      )
    "Nav"
    (
      ("p" ein:worksheet-goto-prev-input-km "Prev Cell" :exit nil)
      ("n" ein:worksheet-goto-next-input-km "Next Cell" :exit nil)
      ("SPC" vi/ein:select-cell-text "Select cell")
      ("/" ein:notebook-scratchsheet-open-km "Scratch")
      )
    "Output"
    (
      ("o" ein:worksheet-toggle-output "Toggle output")
      ("O" ein:shared-output-show-code-cell-at-point "Show in shared output")
      ("M-o" (ein:worksheet-set-output-visibility-all (ein:worksheet--get-ws-or-error) t) "Hide all output")
      ("M-O" ein:worksheet-set-output-visibility-all "Show all output")
      )
    "Fix"
    (("i" vi/ein-toggle-inlined-images "Toggle inlined images")
      ;; ("M-f" vi/ein-fix "Fix")
      ("N" ein:notebook-rename-command "Rename")
      )
    "Python"
    (
      ("f" python-black-partial-dwim "Format")
      )
    ))
#+end_src

#+begin_src emacs-lisp
;; (setq scroll-preserve-screen-position t
;;       scroll-conservatively 0
;;       maximum-scroll-margin 0.5
;;       scroll-margin 99999)

;; (defun vi/ein-fix ()
;;   (interactive)
;;   ;; (set-face-extend 'ein:cell-input-area t)
;;   (setq ein:worksheet-enable-undo t)
;;   (buffer-enable-undo)
;;   ;; (turn-on-undo-tree-mode)
;;   )



(setq-hook! 'ein:notebook-mode-hook
  outline-minor-mode-use-buttons t
  outline-regexp "##+"
  )           ;capture markdown headings, excluding level 1 for comments

(add-hook! 'ein:notebook-mode-hook
  #'rainbow-delimiters-mode-disable

  ;; These fail on first load in this hook, but seem to work in poly-ein-mode-hook?

  ;; (outline-minor-faces-mode t)
  ;; (outline-minor-mode t)
  )

(add-hook! 'poly-ein-mode-hook
  ;;(outline-minor-faces-mode t)
  (outline-minor-mode t))               ;we disable outline-minor-mode in prog-mode, but turn it on in ein

;; Unsets M-n in ein polymode (which is normally bound to polymode-map) so that
;; we can use our smartscan-mode bindings
(map! :mode poly-ein-mode
  :map polymode-mode-map
  "M-n" nil)

(map! :map ein:notebook-mode-map
  "C-n" #'ein:worksheet-goto-next-input-km
  "C-p" #'ein:worksheet-goto-prev-input-km
  )


;; (advice-add 'json-parse-buffer :around
;;             (lambda (orig &rest rest)
;;               (while (re-search-forward "\\u0000" nil t)
;;                 (replace-match ""))
;;               (apply orig rest)))
#+end_src



* vterm

#+begin_src emacs-lisp :tangle packages.el
(unpin! vterm)
#+end_src


#+begin_src emacs-lisp

(setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
(use-package! vterm
  :custom
  (vterm-max-scrollback 100000)
  (vterm-buffer-name-string "vterm %s")
  (vterm-enable-manipulate-selection-data-by-osc52 t)
  :bind
  (
    :map vterm-mode-map
    ("M-j" . nil)
    ("M-k" . nil)
    ("M-9" . nil)
    ("M-0" . nil)
    ("M-:" . nil)
    ("S-<left>" . nil)
    ("S-<right>" . nil)
    ("S-<up>" . nil)
    ("S-<down>" . nil)
    ("C-9" . nil)
    ("C-0" . nil)
    ("C-\\" . vterm-send-next-key)
    )
  :config

  (doom-modeline-def-segment vterm-copy-mode
    "Returns 'Copy' when vterm-copy-mode is active"
    (when
      (and (eq major-mode 'vterm-mode) vterm-copy-mode)
      (concat (doom-modeline-spc) "[Copy]")))


  (doom-modeline-def-modeline 'vi/vterm
    '(bar buffer-info-simple vterm-copy-mode selection-info remote-host)
    '(minor-modes major-mode))

  (remove-hook 'vterm-mode-hook #'hide-mode-line-mode)

  ;; This actually doesn't work with popper because it restores it to the old format
  (add-hook! 'vterm-mode-hook (doom-modeline-set-modeline 'vi/vterm)
    ;; (centered-cursor-mode -1)
    ))

;; (defun vi/vterm-copy ()
;; ;; shows in the misc-info segment
;; (add-to-list 'global-mode-string '(:eval (vi/vterm-copy)))

(defun vi/vterm-reset ()
  (interactive)
  (vterm-send-string "tput cnorm"))

(map! :map vterm-mode-map "C-c C-r" #'vi/vterm-reset)

(defun vi/vterm-hooks ()
  ;; linkify urls
  ;; (goto-address-mode)
  ;; Don't highlight trailing whitespace
  (whitespace-mode -1)
  ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Query-Before-Exit.html
  (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)
  )
(add-hook! 'vterm-mode-hook #'vi/vterm-hooks)



#+end_src

** Toggle or create

*** Home grown

#+begin_src emacs-lisp
(setq! vterm-shell "tmux")


(defsubst vi/vterm-dir ()
  ;; TODO: if this is TRAMP, don't return default-directory
  (or (projectile-project-root) default-directory))

(defsubst vi/create-vterm-in-dir (dir)
  (let ((default-directory dir))
    (setq vterm-buf (vterm 't))
    (with-current-buffer vterm-buf
      (setq-local vi/vterm--created-with-dir default-directory))))

(defsubst vi/existing-vterms-created-with (dir)
  (seq-filter
   (lambda (elt)
     (and
      (eq (buffer-local-value 'major-mode elt) #'vterm-mode)
      (buffer-local-boundp 'vi/vterm--created-with-dir elt)
      (file-equal-p dir (buffer-local-value 'vi/vterm--created-with-dir elt))))
   (buffer-list)))

(defun vi/vterm-project-or-here (&optional force-create)
  (interactive)
  (if-let* ((dir (vi/vterm-dir))
            (check-existing (not force-create))
            (existing-vterm (seq-first (vi/existing-vterms-created-with dir))))
      (pop-to-buffer existing-vterm)
    (vi/create-vterm-in-dir dir)))

;; handle opening in tramp
(defun vi/vterm-local (&optional force-create)
  (interactive)
  (if (and (fboundp 'tramp-tramp-file-p) (tramp-tramp-file-p default-directory))
      (progn
        (message "Tramp dir: opening local vterm")
        (let ((default-directory (getenv "HOME")))
          (vterm)))
    (vi/vterm-project-or-here force-create)))

;; (defun vi/vterm-zsh (&optional force-create)
;;   (interactive)
;;   (let ((vterm-shell "zsh"))
;;     (vi/vterm-local force-create)))

#+end_src
*** COMMENT multi-vterm

- <2022-07-10 Sun> +Using +vterm/here, +vterm/toggle instead+ -- this doesn't
  quite work as expected to toggle for a project -- depends on the buffer name
  (vterm-buffer-name-string) being default, and we like to track the directory (https://github.com/doomemacs/doomemacs/issues/6651)

- actually, multi-vterm-project has the same problem^ : https://github.com/suonlight/multi-vterm/issues/22

  See [[*Home grown][Home grown]] for a custom implementation

does this matter - https://github.com/suonlight/multi-vterm/issues/12 - projectile vs project

#+begin_src emacs-lisp :tangle packages.el
(package! multi-vterm :recipe (:host github :repo "suonlight/multi-vterm"))
;; (package! vterm-toggle :recipe (:host github :repo "jixiuf/vterm-toggle"))
#+end_src

#+begin_src emacs-lisp

(use-package! multi-vterm
  :custom
  (multi-vterm-buffer-name "%s")
  :commands (multi-vterm-next multi-vterm multi-vterm-project))
#+end_src

*** COMMENT vterm-toggle

#+begin_src emacs-lisp :tangle packages.el
(package! vterm-toggle :recipe (:host github :repo "jixiuf/vterm-toggle"))
#+end_src

** wrapping issues

https://github.com/akermu/emacs-libvterm/issues/179

- can set `vterm-min-window-width` to 1000 and `toggle-truncate-lines` https://github.com/akermu/emacs-libvterm/issues/435
- but this makes `ls`, `fzf`, `htop` etc weird
- so we can run `stty cols 250` before running such commands
- we cannot get the current emacs window width (https://github.com/akermu/emacs-libvterm/issues/577)
- best we can do is maybe hook `frame-width` to `setenv` so that new vterms have some variable with the full width of emacs, and then use 1/2 or 1/3 of that with `stty`. or hard code 250.

  we might also be able to use `window-min-width` to prevent splitting too much?
  this appears to work with `zoom-mode`.

  Also see https://github.com/cyrus-and/zoom for information on
  `window-size-fixed` and preventing zoom from resizing?


another idea: force vterm buffers to have an enforced min width: https://emacs.stackexchange.com/questions/71018/how-can-i-keep-windows-from-being-shrunk-past-their-fill-columns

and hardcode that as vterm-min-window-width



** sticky shell prompt


#+begin_src emacs-lisp :tangle packages.el
(package! sticky-shell)
#+end_src


** COMMENT tmux-pane


#+begin_src emacs-lisp :tangle packages.el
(package! tmux-pane)
#+end_src


#+begin_src emacs-lisp
(use-package! tmux-pane
  :config
  (tmux-pane-mode))
#+end_src

** COMMENT vterm-extra
:PROPERTIES:
:CREATED:  [2023-11-12 Sun 23:19]
:END:

breaks with tramp?

#+begin_src emacs-lisp :tangle packages.el
(package! vterm-extra :recipe (:host github :repo "Sbozzolo/vterm-extra"))
#+end_src


#+begin_src emacs-lisp
(map! :map vterm-mode-map "C-c C-e" #'vterm-extra-edit-command-in-new-buffer)
#+end_src

* Flycheck

#+begin_src emacs-lisp
(use-package! flycheck
  :after-call doom-first-file-hook
  :custom
  (flycheck-check-syntax-automatically '(mode-enabled save idle-change idle-buffer-switch))
  (flycheck-idle-change-delay 10)
  (flycheck-idle-buffer-switch-delay 5)
  (flycheck-highlighting-style '(conditional 10 level-face (delimiters "" "")))
  (flycheck-global-modes '(prog-mode))
  :config
  ;; Show indicators in the left margin
  (setq flycheck-indication-mode 'left-margin)

  ;; Adjust margins and fringe widths…
  (defun my/set-flycheck-margins ()
    (setq left-fringe-width 8 right-fringe-width 8
      left-margin-width 1 right-margin-width 0)
    (flycheck-refresh-fringes-and-margins))

  ;; …every time Flycheck is activated in a new buffer
  (add-hook! 'flycheck-mode-hook #'my/set-flycheck-margins)
  (global-flycheck-mode -1)
  :hook ((prog-mode . flycheck-mode))
  :pretty-hydra
  (
   (:exit t)
   (
    "Flycheck"
    (
    ("c" flycheck-buffer "check buffer")
    ("l" (consult-lsp-diagnostics t) "file errors")
    ;; ("p" flycheck-projectile-list-errors "project errors")
    ("L" consult-flycheck "consult")
    ("d" (flycheck-mode -1) "Disable Flycheck")
    ("e" (flycheck-mode) "Enable Flycheck")
    ("q" nil "quit")
     )
    )
   )
  )
#+end_src

** COMMENT flycheck-projectile

superceded by consult-lsp-diagnostics for most usage.

this does not look in files that are not open. Easier to open all files via dired (tree, mark, F)

#+begin_src emacs-lisp :tangle packages.el
(package! flycheck-projectile)
#+end_src


** Check directory



#+begin_src emacs-lisp
(defun endless/flycheck-dir (dir)
  "Run flycheck for each file in current directory.
Results are reported in a compilation buffer."
  (interactive "DDirectory: ")
  (displaying-byte-compile-warnings
   (let ((p nil))
     (with-current-buffer (get-buffer-create
                           byte-compile-log-buffer)
       (setq default-directory dir)
       (unless (eq major-mode 'compilation-mode)
         (compilation-mode))
       (goto-char (point-max))
       (let ((inhibit-read-only t))
         (insert "\n\xc\n\n"))
       (setq p (point)))
     (dolist (file (directory-files "./" nil
                                    "\\`[^\\.].*\\'"))
       (endless/-flycheck-file file))
     (with-selected-window (display-buffer
                            byte-compile-log-buffer)
       (goto-char p)
       (recenter 1)))))

(defun endless/-report-error (fmt &rest args)
  "Print an error on `byte-compile-log-buffer'."
  (let ((inhibit-read-only t)
        (fill-prefix "    "))
    (with-current-buffer byte-compile-log-buffer
      (let ((l (point)))
        (insert "\n" (apply #'format fmt args))
        (fill-region (1+ l) (point))))))

(defun endless/-flycheck-file (file)
  "Check FILE and report to `byte-compile-log-buffer'."
  (let ((was-visited (find-buffer-visiting file)))
    (with-current-buffer (or was-visited
                             (progn (find-file file)
                                    (current-buffer)))
      (when (ignore-errors (flycheck-buffer))
        (while (flycheck-running-p)
          (accept-process-output nil 0.1))
        (pcase flycheck-last-status-change
          ((or `errored `suspicious)
           (endless/-report-error
            "%s: Something wrong here!"
            (file-name-nondirectory (buffer-file-name))))
          (`finished
           (dolist (e flycheck-current-errors)
             (endless/-report-error
              "%s:%s:%s:%s: %s"
              (file-name-nondirectory (buffer-file-name))
              (flycheck-error-line e)
              (flycheck-error-column e)
              (flycheck-error-level e)
              (flycheck-error-message e))))))
      (if was-visited
          (bury-buffer was-visited)
        (kill-buffer (current-buffer))))))
#+end_src

* magit/git

#+begin_src emacs-lisp
(after! magit
  ;; Set magit log date formats
  (setq magit-log-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))

  ;; set to 'all, this seems to make commits slow?
  (setq magit-diff-refine-hunk t)
  (setq magit-log-section-commit-count 50)
  (setq magit-status-sections-hook

    '(magit-insert-status-headers
       magit-insert-merge-log
       magit-insert-rebase-sequence
       magit-insert-am-sequence
       magit-insert-sequencer-sequence
       magit-insert-bisect-output
       magit-insert-bisect-rest
       magit-insert-bisect-log
       magit-insert-untracked-files
       magit-insert-unstaged-changes

       magit-insert-staged-changes
       magit-insert-stashes
       magit-insert-unpushed-to-pushremote
       magit-insert-unpulled-from-pushremote
       magit-insert-unpushed-to-upstream
       magit-insert-unpulled-from-upstream
       magit-insert-recent-commits

       ;; forge
       ;; See forge-status-buffer-default-topic-filters
       forge-insert-pullreqs
       forge-insert-issues

       ;; Add ignored files section to magit status
       ;; This makes yadm-status very slow: https://github.com/magit/magit/discussions/4750
       ;; magit-insert-ignored-files


       ))

  ;; https://magit.vc/manual/magit/Status-Header-Sections.html
  (setq magit-status-headers-hook
    '(magit-insert-error-header
       magit-insert-diff-filter-header
       magit-insert-head-branch-header
       magit-insert-upstream-branch-header
       magit-insert-push-branch-header
       magit-insert-tags-header))

  (setq magit-wip-namespace "refs/magit-wip/")

  ;### autoload
  (defun vi/magit-gt-absorb ()
    (interactive)
    (magit-shell-command-topdir "gt absorb"))

  ;### autoload
  (defun vi/magit-gt-submit ()
    (interactive)
    (magit-shell-command-topdir "gt submit"))

  (transient-define-prefix magit-run ()
    "Run git or another command, or launch a graphical utility."
    [["Run git subcommand"
       ("!" "in repository root"   magit-git-command-topdir)
       ("c" "in working directory" magit-git-command)]
      ["Run shell command"
        ("s" "in repository root"   magit-shell-command-topdir)
        ("S" "in working directory" magit-shell-command)]
      ["Launch"
        ("a" "gt absorb" vi/magit-gt-absorb)
        ("P" "gt submit" vi/magit-gt-submit)]])
    ;; ("k" "gitk"                 magit-run-gitk)
    ;; ("a" "gitk --all"           magit-run-gitk-all)
    ;; ("b" "gitk --branches"      magit-run-gitk-branches)
    ;; ("g" "git gui"              magit-run-git-gui)
    ;; ("m" "git mergetool --gui"  magit-git-mergetool)]])


  ;; Protect against accidental pushes to upstream
  ;; https://github.com/magit/magit/wiki/Tips-and-Tricks#ask-for-confirmation-before-pushing-to-originmaster
  (define-advice magit-push-current-to-upstream (:before (args) query-yes-or-no)
    "Prompt for confirmation before permitting a push to upstream."
    (when-let ((branch (magit-get-current-branch)))
      (unless (yes-or-no-p (format "Push %s branch upstream to %s? "
                             branch
                             (or (magit-get-upstream-branch branch)
                               (magit-get "branch" branch "remote"))))
        (user-error "Push to upstream aborted by user"))))
  (add-hook 'magit-process-prompt-functions 'magit-process-git-credential-manager-core)
  )

;; (transient-append-suffix 'magit-run '(0 0 0) ; 0 means add at the end
;;   '("U" "gt submit" vi/magit-gt-submit)
;;   )

;; (with-eval-after-load 'magit
;;   (defun vi/magit-gt-submit ()
;;   (magit-shell-comand "gt submit"))))



(map! :map magit-mode-map
  "s-<tab>" #'magit-section-cycle-diffs
  "M-<tab>" nil
  )

#+end_src

** COMMENT magit-delta

disabled <2023-03-08 Wed> because of https://github.com/dandavison/magit-delta/issues/9

#+begin_src emacs-lisp :tangle packages.el
(package! magit-delta)
#+end_src


#+begin_src emacs-lisp
(use-package! magit-delta
  :hook (magit-mode . magit-delta-mode))
#+end_src

** magit backups (wip)

#+begin_src emacs-lisp
(add-hook! 'doom-first-file-hook #'magit-wip-mode)
#+end_src

<2022-07-11 Mon> Unfortunately this doesn't seem to work in Yadm files because they don't get recognized as git repos by default ([[*Yadm][Yadm]])

also does not track untracked files

** COMMENT git-wip-mode
:PROPERTIES:
:CREATED:  [2023-09-15 Fri 17:13]
:END:


#+begin_src emacs-lisp :tangle packages.el
(package! git-wip-mode :recipe (:host github :repo "bartman/git-wip-mode" :files (defaults "git-wip-mode.el"))
#+end_src

** ediff


#+begin_src emacs-lisp
(defun vi/ediff-setup-windows-plain-merge (buf-A buf-B buf-C control-buffer)
  ;; skip dedicated and unsplittable frames
  (ediff-destroy-control-frame control-buffer)
  (let ((window-min-height 1)
         (with-Ancestor-p (with-current-buffer control-buffer
                            ediff-merge-with-ancestor-job))
         split-window-function
         merge-window-share merge-window-lines
         (buf-Ancestor (with-current-buffer control-buffer
                         ediff-ancestor-buffer))
         wind-A wind-B wind-C wind-Ancestor)
    (with-current-buffer control-buffer
      (setq merge-window-share ediff-merge-window-share
        ;; this lets us have local versions of ediff-split-window-function
        split-window-function ediff-split-window-function))
    (delete-other-windows)
    (set-window-dedicated-p (selected-window) nil)
    (split-window-vertically)
    (ediff-select-lowest-window)
    (ediff-setup-control-buffer control-buffer)

    ;; go to the upper window and split it betw A, B, and possibly C
    (other-window 1)
    (setq merge-window-lines
      (max 2 (round (* (window-height) merge-window-share))))
    (switch-to-buffer buf-A)
    (setq wind-A (selected-window))

    (split-window-vertically (max 2 (- (window-height) merge-window-lines)))
    (if (eq (selected-window) wind-A)
      (other-window 1))

    (setq wind-C (selected-window))
    (switch-to-buffer buf-C)

    (select-window wind-A)
    (funcall split-window-function)

    (if (eq (selected-window) wind-A)
      (other-window 1))
    (switch-to-buffer buf-B)
    (setq wind-B (selected-window))

    (when (and ediff-show-ancestor with-Ancestor-p)
      (select-window wind-B)
      (split-window-horizontally)
      (when (eq (selected-window) wind-B)
        (other-window 1))
      (switch-to-buffer buf-Ancestor)
      (setq wind-Ancestor (selected-window)))

    (balance-windows-area)

    (with-current-buffer control-buffer
      (setq ediff-window-A wind-A
        ediff-window-B wind-B
        ediff-window-C wind-C
        ediff-window-Ancestor wind-Ancestor))

    (ediff-select-lowest-window)
    (minimize-window)
    (ediff-setup-control-buffer control-buffer)
    ))
(defun ediff-copy-both-to-C ()
  (interactive)
  (ediff-copy-diff ediff-current-difference nil 'C nil
                   (concat
                    (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                    (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
(defun add-d-to-ediff-mode-map () (define-key ediff-mode-map "d" 'ediff-copy-both-to-C))
(add-hook 'ediff-keymap-setup-hook 'add-d-to-ediff-mode-map)
(add-hook! 'ediff-cleanup-hook 'ediff-delete-temp-files)
(add-hook! '(ediff-before-setup-hook ediff-before-setup-windows-hook) (setq ediff-window-setup-function #'vi/ediff-setup-windows-plain-merge))

#+end_src
** browse at remote
:PROPERTIES:
:CREATED:  [2023-11-10 Fri 00:20]
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! browse-at-remote :recipe (:host github :repo "rmuslimov/browse-at-remote"))
#+end_src

** git-link

#+begin_src emacs-lisp :tangle packages.el
(package! git-link)
#+end_src


* Yadm
** COMMENT Handle bare repos (yadm/$HOME)

Yadm (yadm.io) keeps its git directory in .local/share/yadm/repo.git (found this
by running =yadm=). This teaches Magit to use the right git directory for $HOME

https://github.com/magit/magit/issues/460#issuecomment-837449105

<2022-07-11 Mon> I think this doesn't actually work for yadm since we keep files in subdirectories of $HOME


#+begin_src emacs-lisp
(defun home-magit-process-environment (env)
  "Add GIT_DIR and GIT_WORK_TREE to ENV when in a special directory.
https://github.com/magit/magit/issues/460 (@cpitclaudel)."
  (let ((default (file-name-as-directory (expand-file-name default-directory)))
        (home (expand-file-name "~/")))
    (when (string= default home)
      (let ((gitdir (expand-file-name "~/.local/share/yadm/repo.git/")))
        (push (format "GIT_WORK_TREE=%s" home) env)
        (push (format "GIT_DIR=%s" gitdir) env))))
  env)

(advice-add 'magit-process-environment
            :filter-return #'home-magit-process-environment)
#+end_src

** COMMENT Another broken approach: using direnv

Similar to [[*Handle bare repos (yadm/$HOME)][Handle bare repos (yadm/$HOME)]], we could try to set GIT_DIR and
GIT_WORK_TREE via $HOME/.envrc, but this is problematic because

1. magit will unset them on startup: https://github.com/magit/magit/wiki/Don't-set-$GIT_DIR-and-alike
2. a new git directory without .envrc will default to the yadm repo, which is scary (actually maybe not: git init in an existing repo is safe..)

** Using Tramp for magit/yadm

doesn't work for commits??

See https://www.reddit.com/r/emacs/comments/gjukb3/yadm_magit/gasc8n6/

#+begin_src emacs-lisp
;; We leave this in so that /yadm:: still works
(use-package! tramp
  :config
  (setq debug-ignored-errors
      (cons 'remote-file-error debug-ignored-errors))
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter")))
                 (tramp-login-env (("SHELL") ("/bin/sh")))
                 (tramp-remote-shell "/bin/sh")
                 (tramp-remote-shell-args ("-c")))))

;; (defun yadm-status ()
;;   (interactive)
;;   (magit-status "/yadm::"))
#+end_src

** Another method, setting git flags

Quit recursive edit using C-]

#+begin_src emacs-lisp
(defun yadm-status ()
  "Magit on dotfiles repo for the duration of a recursive edit."
  (interactive)
  (require 'magit)
  (let ((magit-git-global-arguments
          `(,(concat "--git-dir=" vi/home-dir "/.local/share/yadm/repo.git")
            ,(concat "--work-tree=" vi/home-dir)
          ;; `(,(substitute-env-vars "--git-dir=/home/venky/.local/share/yadm/repo.git")
          ;;    ,(substitute-env-vars "--work-tree=/home/venky")
             ,@magit-git-global-arguments)))
    (magit-status "~")
    (recursive-edit)))
#+end_src

* LSP


#+begin_src emacs-lisp
(use-package! lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")

  :custom
  ;; We prefer to use TabNine::sem

  (lsp-enable-snippet nil)
  ;; https://emacs-lsp.github.io/lsp-mode/page/settings/
  (lsp-auto-configure t)
  (lsp-enable-imenu t)

  ;; controls doc buffers at bottom (this is not eldoc -- which in python-mode is truncated, so useless)
  ;; shows signature automatically inside arg params or <C-c l h s>
  ;; see lsp-ui-doc-mode for on cursor
  (lsp-signature-auto-activate '(:on-trigger-char :on-server-request))
  (lsp-signature-render-documentation nil)
  (lsp-headerline-breadcrumb-enable t)
  (lsp-headerline-breadcrumb-enable-diagnostics t)
  (lsp-keep-workspace-alive nil)
  (lsp-semantic-tokens-enable nil)      ;no semantic highlighting: rainbow-identifiers
  (lsp-symbol-highlighting-skip-current t)
  (lsp-enable-xref nil)
  (lsp-lens-enable t)
  (lsp-idle-delay 0.1)
  ;; (lsp-disabled-clients '((python-mode . '(pyls mspyls))))

    ;; This will disable the flycheck checkers. (we use them directly to have better control)
  ;; (lsp-diagnostics-provider :flycheck)
  (lsp-diagnostic-clean-after-change nil)
  (lsp-file-watch-threshold 10000)
  (lsp-enable-completion-at-point t)
  (lsp-completion-provider :none)       ;disable company-mode

  ;; sideline
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-sideline-show-symbol nil)
  (lsp-ui-sideline-show-diagnostics t)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-delay 0.1)
  ;; peek
  (lsp-ui-peek-enable t)
  ;; imenu
  ;; (lsp-ui-imenu-window-width 30)
  ;; (lsp-ui-imenu-auto-refresh t)


  :config
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.venv\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.mypy_cache\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.ruff_cache\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.pdm-build\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]wandb\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]__pycache__\\'")

  ;; Fix the hint diagnostic to display as faded out, not error  (https://github.com/emacs-lsp/lsp-mode/issues/3104)
  ;; Unrelated error: Invalid face reference: lsp-flycheck-info-unnecessary (https://github.(com/emacs-lsp/lsp-mode/issues/2255)
  (add-hook! 'lsp-diagnostics-updated-hook
             ;; For some reason, this face is only defined after the
             ;; lsp-diagnostics-updated-hook, so this will fail the first time
             ;; through
    (if (facep 'lsp-flycheck-info-unnecessary-face)
        (set-face-attribute 'lsp-flycheck-info-unnecessary-face nil :foreground "gray30" :underline nil))
    )
  
  )

(setq-hook! 'lsp-ui-doc-mode-hook
    ;; doc in childframe
  lsp-ui-doc-enable t
  lsp-ui-doc-include-signature t
  lsp-ui-doc-show-with-cursor t
  lsp-ui-doc-position 'bottom
  lsp-ui-doc-header nil
  lsp-ui-doc-max-height 50
  lsp-ui-doc-max-width 75
  lsp-ui-doc-delay 1)


#+end_src


** COMMENT treemacs/lsp

we prefer to use dired-sidebar

#+begin_src emacs-lisp :tangle packages.el
(package! lsp-treemacs)
#+end_src



#+begin_src emacs-lisp
(use-package! lsp-treemacs
  :after lsp
  :custom
  (lsp-treemacs-sync-mode 1)
  )
#+end_src
* COMMENT Tree sitter

#+begin_src emacs-lisp :tangle packages.el
(package! tree-sitter)
(package! tree-sitter-langs)
#+end_src


tree-sitter is slow as crap (tree-sitter--after-change) -- atleast in ein python cells

#+begin_src emacs-lisp
(add-hook! '(python-mode-hook) #'tree-sitter-mode)

;;; global wants to use it in org-mode and keeps complaining
;; (use-package! tree-sitter
;;   :config (global-tree-sitter-mode))
#+end_src

** COMMENT combobulate

This seems useful, but needs better bindings. We want to navigate to things
quickly (avy seems fine), and move them up/down (only through hydra, not good). Needs further investigation

#+begin_src emacs-lisp :tangle packages.el
(package! combobulate :recipe (:host github :repo "mickeynp/combobulate"))
#+end_src


#+begin_src emacs-lisp
(use-package! combobulate
  :hook ((python-mode . combobulate-mode)
         (js-mode . combobulate-mode)
         (typescript-mode . combobulate-mode)
         )
  )
#+end_src

* C++

** ccls vs clangd

doom-emacs default c++ lsp server is ccls. (See https://github.com/hlissner/doom-emacs/issues/2689)

Switching to clangd seems to require some or all of the following:

1. Disable ccls package

#+begin_src emacs-lisp
;; (disable-packages! ccls)
#+end_src

1. Do not reference ccls in vi/setup-c++-lsp
2. Ensure that clangd is installed
3. After loading lsp, in *scratch* buffer, execute ~(set-lsp-priority! 'clangd 1)~

   Doing this in config.org seems to result in "nil" lsp server name somewhere.
4. +lsp/switch-client to clangd

** Turn off lens

Lens shows refs for each variable in an overlay which is annoying. Also duplicated between lsp-lens and ccls-code-lens

#+begin_src emacs-lisp
(defun vi/setup-c++-lsp ()
  ;; For now we are using ccls, might want to try clangd someday. ccls is
  ;; default in doom-emacs, switching to clangd didn't work out of the box.
  (setq-local lsp-lens-enable nil)
  (remove-hook! lsp-lens-mode #'ccls-code-lens-mode)
  (ccls-code-lens-mode -1)
  )
#+end_src
* Python

#+begin_src emacs-lisp
(use-package! python
  :custom
  (python-fill-docstring-style 'symmetric)
  (lsp-pyright-diagnostic-mode "workspace")
  (lsp-pyright-typechecking-mode "standard")
  )
#+end_src

#+begin_src emacs-lisp
(defun vi/setup-python-flycheck ()

  ;; This needs to happen after lsp else:
  ;; Error (python-mode-hook): Error running hook "vi/setup-python-flycheck" because: (user-error lsp is not a syntax checker)

  (flycheck-select-checker 'lsp)
  ;; (flycheck-add-next-checker 'lsp '(t . python-ruff))

  ;; Not sure if we need flake8 - it pegs the CPU on some buffers
  ;; (flycheck-add-next-checker 'lsp 'python-flake8-vi)

  ;; Why do we still have mypy? The theory is that it gives some better messages complementary to pyright
  ;;(setq-local flycheck-python-mypy-executable (concat (projectile-project-root) "/.venv/bin/mypy"))
  ;; (flycheck-add-next-checker 'lsp 'python-mypy-vi)

  ;; Check if the file is broken
  ;; (flycheck-add-next-checker 'python-ruff '(t . python-pycompile))
  (flycheck-add-next-checker 'lsp '(t . python-pycompile))

  ;; we could disable mypy as well, since pyright does most of it, but pyright doesn't support attrs yet?
  (setq-local flycheck-disabled-checkers '(python-pylint python-mypy))
  )
#+end_src

** COMMENT Diagnostics filter hints
#+begin_src emacs-lisp
(defun vi/diag-matches-p (d sev tag)
  (and (equal sev (ht-get d "severity"))
       ;; handle nil ~tag~; convert ~tags~ from vector to list
       (if tag (-contains? (append (ht-get d "tags") nil) tag) t)))

(defun vi/filter-lsp-diagnostics (diag severity tag)
  ;; ~diag~ will be a hash table with keys (diagnostics, uri) (ie. PublishDiagnosticsParams when called from lsp-diagnostic-filter)
  ;;
  ;; where each diagnostic is a hashtable with keys ~("range", "message", "severity", "tags", "source")~
  ;;
  ;; severity: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticSeverity
  ;; tags: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticTag
  ;;
  ;; Note that ~(lsp-diagnostics)~ is not identical to PublishDiagnosticsParams:
  ;;
  ;; - PublishDiagnosticsParams has keys (uri, diagnostics), while lsp-diagnostics returns a hash table {uri: [diagnostics]}
  ;; - PublishDiagnosticsParams[diagnostics] is a vector, not a list
  ;;
  ;; #+begin_example
  ;; (ht-get* (-second-item (-second-item (ht-values (lsp-diagnostics)))) "message")
  ;; #+end_example
  ;;

  ;;
  (require 'ht)
  (require 'dash)
  ;; mutate diag to remove any diagnostics that match severity/tag
  ;; For each item in ~diag~:
  (-let* ((diagnostics (append (ht-get diag "diagnostics") nil))
          (filtered (--remove (vi/diag-matches-p it severity tag) diagnostics)))
     ;; update diag with filtered list
    (ht-set! diag "diagnostics" filtered)
    diag))
#+end_src

** COMMENT pylsp

needs pipx install 'python-lsp-server[rope,black,ruff]'
& +lsp/switch-client (TODO: figure out how to set priority!)


#+begin_src emacs-lisp
(setq! lsp-pylsp-plugins-yapf-enabled nil)
(setq! lsp-pylsp-plugins-flake8-enabled nil)
(setq! lsp-pylsp-plugins-autopep8-enabled nil)
(setq! lsp-pylsp-plugins-pydocstyle-enabled nil)
(setq! lsp-pylsp-plugins-pycodestyle-enabled nil)
(setq! lsp-pylsp-plugins-mccabe-enabled nil)
(setq! lsp-pylsp-plugins-pylint-enabled nil)
(setq! lsp-pylsp-plugins-black-enabled t)
(setq! lsp-pylsp-plugins-rope-completion-enabled t)
(setq! lsp-pylsp-plugins-ruff-enabled t)
#+end_src

** COMMENT pylsp-rope

not sure why this isn't working!

#+begin_src emacs-lisp :tangle packages.el
(package! pylsp-rope :recipe (:host github :repo "sonofhypnos/pylsp-rope.el"))
#+end_src



#+begin_src emacs-lisp
(use-package! pylsp-rope)
#+end_src
** COMMENT lsp-pyright
:PROPERTIES:
:CREATED:  [2023-08-14 Mon 13:45]
:END:

Note: workspace root must have the pyrightconfig.json?

*** redeclare as :add-on
:PROPERTIES:
:CREATED:  [2023-08-31 Thu 00:51]
:END:


#+begin_src emacs-lisp
(after! lsp-pyright
  ;; https://github.com/emacs-lsp/lsp-pyright/blob/cea14f6c9da899778ce1d8888af1508931bb7fb7/lsp-pyright.el#L227C1-L247C1
  (lsp-register-client
    (make-lsp-client
      :new-connection (lsp-stdio-connection (lambda ()
                                              (cons (lsp-package-path 'pyright)
                                                lsp-pyright-langserver-command-args)))
      :major-modes '(python-mode python-ts-mode)
      :server-id 'pyright
      :multi-root lsp-pyright-multi-root
      :priority 2
      :add-on? t
      :initialized-fn (lambda (workspace)
                        (with-lsp-workspace workspace
                          ;; we send empty settings initially, LSP server will ask for the
                          ;; configuration of each workspace folder later separately
                          (lsp--set-configuration
                            (make-hash-table :test 'equal))))
      :download-server-fn (lambda (_client callback error-callback _update?)
                            (lsp-package-ensure 'pyright callback error-callback))
      :notification-handlers (lsp-ht ("pyright/beginProgress" 'lsp-pyright--begin-progress-callback)
                               ("pyright/reportProgress" 'lsp-pyright--report-progress-callback)
                               ("pyright/endProgress" 'lsp-pyright--end-progress-callback))))

  )

#+end_src

** LSP setup
:PROPERTIES:
:CREATED:  [2023-08-13 Sun 15:17]
:END:

#+begin_src emacs-lisp
(defun vi/python-mode-lsp ()

  ;;;; EDIT: this also filters out the visual rendering (https://discord.com/channels/789885435026604033/b789890622424219658/993942950331551814)
  ;;;; Filter out "lsp-info-flycheck-"
  ;;;; severity=4 ("hint"), tag=1 ("unnecessary") -- see vi/filter-tag-diagnostics for reference
  ;; (setq-local lsp-diagnostic-filter (lambda (param work) (vi/filter-lsp-diagnostics param 4 1)))


  ;; So that lsp is available as a checker
  (add-hook! 'lsp-after-open-hook #'vi/setup-python-flycheck)

  ;; we prefer rainbow-delimiters-mode
  ;; (tree-sitter-hl-mode)
  )

(add-hook! 'python-mode-hook #'vi/python-mode-lsp)

#+end_src

ruff-lsp support is built into emacs lsp (https://emacs-lsp.github.io/lsp-mode/page/lsp-ruff-lsp/)


** Flycheck checkers

*** COMMENT ruff flycheck
:PROPERTIES:
:CREATED:  [2023-08-09 Wed 14:15]
:END:


#+begin_src emacs-lisp
;; From https://github.com/flycheck/flycheck/issues/1974#issuecomment-1343495202
(flycheck-define-checker python-ruff
  "A Python syntax and style checker using the ruff utility.
To override the path to the ruff executable, set
`flycheck-python-ruff-executable'.
See URL `http://pypi.python.org/pypi/ruff'."
  :command ("ruff"
            "--format=text"
            (eval (when buffer-file-name
                    (concat "--stdin-filename=" buffer-file-name)))
            "-")
  :standard-input t
  :error-filter (lambda (errors)
                  (let ((errors (flycheck-sanitize-errors errors)))
                    (seq-map #'flycheck-flake8-fix-error-level errors)))
  :error-patterns
  ((warning line-start
            (file-name) ":" line ":" (optional column ":") " "
            (id (one-or-more (any alpha)) (one-or-more digit)) " "
            (message (one-or-more not-newline))
            line-end))
  :modes python-mode)

(add-to-list 'flycheck-checkers 'python-ruff)
#+end_src

*** COMMENT Define flake8 checkers (for file and project)

- the builtin flake8 has to be configured via flake8rc, and I want a python-flake8-project-vi anyway
- also the builtin flake8 looks for setup.cfg instead of projectile-project-root for :working-directory
- filters flake8 to only pyflakes errors
- skips .venv directory

#+begin_src emacs-lisp
(after! flycheck
  (flycheck-define-checker python-flake8-vi
    "flake8 -> pyflakes "

    :command ("flake8"
              "--format" "default"
              "--select" "F"                ;only pyflakes
              "--extend-exclude" ".venv"  ;no venvs
              (config-file "--append-config" flycheck-flake8rc)
              (option "--max-complexity" flycheck-flake8-maximum-complexity nil
                      flycheck-option-int)
              (option "--max-line-length" flycheck-flake8-maximum-line-length nil
                      flycheck-option-int)
              source-original)
    :working-directory (lambda (_) (projectile-project-root))
    :error-filter (lambda (errors)
                    (let ((errors (flycheck-sanitize-errors errors)))
                      (seq-map #'flycheck-flake8-fix-error-level errors)))
    :error-patterns
    ((warning line-start
              (file-name) ":" line ":" (optional column ":") " "
              (id (one-or-more (any alpha)) (one-or-more digit)) " "
              (message (one-or-more not-newline))
              line-end))
    :modes python-mode
    )

  (add-to-list 'flycheck-checkers 'python-flake8-vi)

  (flycheck-define-checker python-flake8-project-vi
    "flake8 -> pyflakes, and running on whole project"

    ;; Not calling flake8 directly makes it easier to switch between different
    ;; Python versions; see https://github.com/flycheck/flycheck/issues/1055.
    :command ("flake8"
              "--format" "default"
              "--select" "F"                ;only pyflakes
              "--extend-exclude" ".venv"  ;no venvs
              (config-file "--append-config" flycheck-flake8rc)
              (option "--max-complexity" flycheck-flake8-maximum-complexity nil
                      flycheck-option-int)
              (option "--max-line-length" flycheck-flake8-maximum-line-length nil
                      flycheck-option-int)
              "."
              )
    :working-directory (lambda (_) (projectile-project-root))
    :error-filter (lambda (errors)
                    (let ((errors (flycheck-sanitize-errors errors)))
                      (seq-map #'flycheck-flake8-fix-error-level errors)))
    :error-patterns
    ((warning line-start
              (file-name) ":" line ":" (optional column ":") " "
              (id (one-or-more (any alpha)) (one-or-more digit)) " "
              (message (one-or-more not-newline))
              line-end))
    :modes python-mode
    )

  (add-to-list 'flycheck-checkers 'python-flake8-project-vi)
  )
#+end_src
*** COMMENT Run mypy from projectile root dir

There are some weird errors that show up if you don't run mypy from the root directory

#+begin_src emacs-lisp
(after! flycheck
  (flycheck-define-checker python-mypy-vi
    "Mypy syntax and type checker (copied from flycheck, but with :working-directory)"
    :command ("mypy"
              "--show-column-numbers"
              (config-file "--config-file" flycheck-python-mypy-config)
              (option "--cache-dir" flycheck-python-mypy-cache-dir)
              source-original)
    :error-patterns
    ((error line-start (file-name) ":" line (optional ":" column)
            ": error:" (message) line-end)
     (warning line-start (file-name) ":" line (optional ":" column)
              ": warning:" (message) line-end)
     (info line-start (file-name) ":" line (optional ":" column)
           ": note:" (message) line-end))
    :working-directory (lambda (_) (projectile-project-root))
    :modes python-mode
    ;; Ensure the file is saved, to work around
    ;; https://github.com/python/mypy/issues/4746.
    :predicate flycheck-buffer-saved-p)

  (add-to-list 'flycheck-checkers 'python-mypy-vi))
#+end_src

*** COMMENT Run mypy for the entire project

#+begin_src emacs-lisp
(after! flycheck
  (flycheck-define-checker python-mypy-project-vi
    "Mypy the entire project"
    :command ("mypy"
              "--show-column-numbers"
              (config-file "--config-file" flycheck-python-mypy-config)
              (option "--cache-dir" flycheck-python-mypy-cache-dir)
              "."
              )
    :error-patterns
    ((error line-start (file-name) ":" line (optional ":" column)
            ": error:" (message) line-end)
     (warning line-start (file-name) ":" line (optional ":" column)
              ": warning:" (message) line-end)
     (info line-start (file-name) ":" line (optional ":" column)
           ": note:" (message) line-end))
    :working-directory (lambda (_) (projectile-project-root))
    :modes python-mode
    )
  (add-to-list 'flycheck-checkers 'python-mypy-project-vi)
  )
#+end_src

** Hydra

#+begin_src emacs-lisp
(major-mode-hydra-define (python-mode python-pytest-mode) (:exit t :quit-key ("q" "C-g"))
  (
   "Pytest"
    (
      ("d" python-pytest-dispatch "Dispatch")
      ("R" python-pytest-repeat "Repeat")
    )
    "Misc"
    (("i" vi/pyflyby-tidy-imports "Imports"))
    "Jump"
    (("t" lsp-find-type-definition "Type def"))
  ))
#+end_src
** Pyflyby

pipx install pyflyby
pipx inject pyflyby 'black[jupyter]'

#+begin_src emacs-lisp
(use-package! pyflyby
  :commands (pyflyby-transform-region-with-command)
  :load-path "~/dev/plus/python/.venv/share/emacs/site-lisp"
  )

(defun vi/pyflyby-tidy-imports ()
  (interactive "*")
  ;; even with this, it will drop comments https://github.com/deshaw/pyflyby/issues/154
  ;;  "--align=0" "--from-spaces=1")
  (pyflyby-transform-region-with-command "tidy-imports" "--hanging-indent=never" "--align=0" "--no-align-future" "--no-separate-from-imports")
  )
#+end_src

** COMMENT lsp-jedi

pipx install jedi-language-server
& +lsp/switch-client

but it's just not that useful -- extract_function and extract_variable are pretty basic

#+begin_src emacs-lisp :tangle packages.el
(package! lsp-jedi)
#+end_src


#+begin_src emacs-lisp
(use-package! lsp-jedi)
#+end_src


** COMMENT traad
:PROPERTIES:
:CREATED:  [2023-08-13 Sun 13:53]
:END:

seems to be old, not working with 3.11 <2023-08-13 Sun>

#+begin_src emacs-lisp :tangle packages.el
(package! traad)
#+end_src


#+begin_src emacs-lisp
(setq venv-location "~/.emacs.d/virtualenvs")
#+end_src
** ruff server


#+begin_src emacs-lisp
(after! python-mode
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("ruff" "server" "--preview"))
     :major-modes '(python-mode)
     :priority 1
     :add-on? t
     :multi-root t
     :server-id 'ruff-server)
    )
  )
(setq! lsp-disabled-clients '(python-mode . (ruff-lsp)))
#+end_src

* Code Formatting

[[https://github.com/lassik/emacs-format-all-the-code/issues/170#issuecomment-1079740651][See]] for some context on the comparison b/w apheleia and format-all available --
these may be merged in the near future. Based on the table there, we are
choosing b/w format-all (more formatters, synchronous, chaining), and apheleia
(fewer but maybe the ones we need, async, chaining).

In addition, there is doom-emacs' adaptation of format-all, which is [[https://github.com/hlissner/doom-emacs/issues/6203][old]], [[https://github.com/hlissner/doom-emacs/issues/4526][due
for a rewrite for a long while]], does not support multiple formatters. Calling
set-formatter! can silently break the chain (?)


#+begin_src emacs-lisp :tangle packages.el
(package! py-isort :disable t)
#+end_src

** apheleia


#+begin_src emacs-lisp :tangle packages.el
(package! apheleia)
#+end_src

#+begin_src emacs-lisp
;;; Doom -style setting doesn't allow multiple formatters per mode
;; pipx install ruff
;; (set-formatter! 'ruff-check '("ruff" "check" "--fix" "--exit-zero" "-" "--stdin-filename" filepath) :modes '(python-mode))
;; (set-formatter! 'ruff-format '("ruff" "format" "--target-version" "py311" "-" "--stdin-filename" filepath) :modes '(python-mode))
;; ;; this may require `npm install -g prettier prettier-plugin-toml --save-dev --save-exact`
;; (set-formatter! 'prettier-toml '(npx "prettier" "--stdin-filepath" filepath "--parser=toml") :modes '(conf-toml-mode))

(after! apheleia
  ;; (setf (alist-get 'isort apheleia-formatters) '("isort" "--profile=black" "--stdout" "-"))
  ;; (setf (alist-get 'usort apheleia-formatters) '("usort" "format" "-"))

  ;; pipx install ruff
  (setf (alist-get 'ruff-check apheleia-formatters) '("ruff" "check" "--fix" "--exit-zero" "-" "--stdin-filename" filepath))
  (setf (alist-get 'ruff-format apheleia-formatters) '("ruff" "format" "--target-version" "py311" "-" "--stdin-filename" filepath))

  ;; this may require `npm install -g prettier prettier-plugin-toml --save-dev --save-exact`
  (setf (alist-get 'prettier-toml apheleia-formatters) '(npx "prettier" "--stdin-filepath" filepath "--parser=toml"))

  ;; Black uses config in ~/.config/black but not if a pyproject.toml is present (https://github.com/psf/black/issues/2863)
  ;;  (setf (alist-get 'black apheleia-formatters) '("black" "--config" (substitute-in-file-name "$HOME/.config/black") "-"))
  ;; (setf (alist-get 'black apheleia-formatters) '("black" "-"))

  ;; isort messes up type:ignore on imports (eg: https://github.com/psf/black/issues/997)
  ;; isort also messes up jupytext paired files by moving imports around
  ;; pyflyby also messes it up!
  ;; (setf (alist-get 'python-mode apheleia-mode-alist) '(isort black))

  (setf (alist-get 'python-mode apheleia-mode-alist) '(ruff-check ruff-format))
  (setf (alist-get 'conf-toml-mode apheleia-mode-alist) '(prettier-toml))
  (setf (alist-get 'jinja2-mode apheleia-mode-alist) nil)
  (apheleia-global-mode)
  )
#+end_src

** python-black

For ein notebooks. this requires black-macchiato via pipx

#+begin_src emacs-lisp :tangle packages.el
(package! python-black)
#+end_src


** COMMENT format-all (doom-emacs version)

This requires ~(format +onsave)~ to be uncommented in the ~doom!~ block

*** python

we want to use isort with black, but there is no real chaining.

so we attempt to use python-black-on-save-mode (for black), and set ~+format-with~
to ~'isort~, hoping that they will work together, but in practice isort doesn't
happen on save; only explicitly on ~+format/buffer~

#+begin_src emacs-lisp :tangle packages.el
(package! python-black)
#+end_src


#+begin_src emacs-lisp
(set-formatter! 'isort "isort --profile=black --stdout -")
(setq-hook! 'python-mode-hook +format-with-lsp nil)
(setq-hook! 'python-mode-hook +format-with 'isort)
(add-hook! 'python-mode-hook #'python-black-on-save-mode)
#+end_src

*** docker
dockfmt does a bad job: rips out comments, uses tabs.

#+begin_src emacs-lisp
(after! dockerfile-mode
  (setq-hook! 'dockerfile-mode-hook +format-with :none))
#+end_src
*** shell mode


#+begin_src emacs-lisp
(add-hook! '(sh-mode sh-set-shell-hook)
  (defun set-sh-formatter ()
    ;; never use lsp
    (setq-local +format-with-lsp nil)
    ;;  (message "Found: %S" sh-shell)
    (if (string-equal sh-shell "bash")

        ;; if bash :: use the default. we need to do this explicitly because the
        ;; var might get set to :none first, and then either sh-set-shell or a
        ;; local var might switch it
        (setq-local +format-with nil)
      ;; else :: don't format
      (setq-local +format-with :none))
    )
  )
#+end_src

**** COMMENT Quiet messages

Trying to get rid of "Setting up indent for shell type bash" etc messages ;
doesn't appear to be working..

In fact, sh-set-shell already has advice ~doom-shut-up-a~ around it

#+begin_src emacs-lisp
(require 'cl-lib)
(advice-add 'sh-set-shell :around
            (lambda (orig-fun &rest args)
              (cl-letf (((symbol-function 'message) #'ignore))
                (apply orig-fun args))))
#+end_src


*** javascript/typescript

#+begin_src emacs-lisp
(setq-hook! '(typescript-mode-hook rjsx-mode-hook) +format-with-lsp nil)
#+end_src

** align comments
:PROPERTIES:
:CREATED:  [2024-02-17 Sat 23:35]
:END:


#+begin_src emacs-lisp
(defun vi/align-comments (beginning end)
  "Align comments within marked region."
  (interactive "*r")
  (align-regexp beginning end (concat "\\(\\s-*\\)"
                                (regexp-quote comment-start))))
#+end_src

* Javascript/Typescript

#+begin_src emacs-lisp :tangle packages.el
(package! add-node-modules-path :recipe (:host github :repo "codesuki/add-node-modules-path"))
#+end_src

#+begin_src emacs-lisp
(add-hook! '(typescript-mode-hook rjsx-mode-hook) #'add-node-modules-path)
#+end_src


* Directory/Project navigation

** Treemacs

#+begin_src emacs-lisp
(after! treemacs
  (setq treemacs-show-hidden-files nil
        treemacs-is-never-other-window nil)
  (treemacs-project-follow-mode t)
  (treemacs-follow-mode t)
  )
#+end_src

** dired

- [X] todo: add hydra
- See dired-subtree [https://github.com/Fuco1/dired-hacks#dired-subtree] and dired-sidebar [https://github.com/jojojames/dired-sidebar]



*** dirvish


#+begin_src emacs-lisp :tangle packages.el
(package! dirvish)
#+end_src


#+begin_src emacs-lisp
(use-package! dirvish
  :custom
  (dirvish-side-width 40)
  ;; allow switching to dirvish-side window
  (dirvish-side-window-parameters '((no-delete-other-windows . t) (no-other-window . nil)))
  (dirvish-attributes '(subtree-state vc-state collapse))
  (dirvish-reuse-session nil)
  :config
  (dirvish-override-dired-mode)
  (dirvish-side-follow-mode)
  (dirvish-peek-mode))

(add-hook 'dirvish-find-entry-hook
          (lambda (&rest _) (setq-local truncate-lines t)))

#+end_src

**** COMMENT bug in dirvish-side
:PROPERTIES:
:CREATED:  [2023-09-21 Thu 17:01]
:END:

this breaks hydra!!!!!

https://github.com/alexluigit/dirvish/issues/194#issuecomment-1593481086

#+begin_src emacs-lisp
(defun dirvish-side-buffer-p (buffer-or-name)
  "Return t if BUFFER-OR-NAME is a dirvish buffer and a side buffer."
  (with-current-buffer buffer-or-name
    (let ((dv (dirvish-curr)))
        (if (and dv (member 'side (dv-type dv)))
            t
          nil))))

(defun dirvish-ignore-display-buffer (original-function buffer-or-name &rest original-arguments)
  (let ((switch-to-buffer-obey-display-actions (not (dirvish-side-buffer-p buffer-or-name))))
    (apply original-function buffer-or-name original-arguments)))
(advice-add 'switch-to-buffer :around #'dirvish-ignore-display-buffer)


#+end_src

*** dired git info/log


#+begin_src emacs-lisp :tangle packages.el
(package! dired-git-log :recipe (:host github :repo "amno1/dired-git-log"))
#+end_src

doesn't work well with subtree inserts

#+begin_src emacs-lisp
;; (add-hook 'dired-after-readin-hook 'dired-git-log-mode)
#+end_src

*** COMMENT dired-git
doesn't seem to do anything!

#+begin_src emacs-lisp :tangle packages.el
(package! dired-git)
#+end_src

*** Stage files from dired

+TODO: Use https://github.com/conao3/dired-git.el instead for the git portion of+
+this. I wonder if it will also "just" work for the yadm case if I'm using+
+/yadm:: dired via tramp+ <-- this sucks

https://gist.github.com/justinhj/5945047
#+begin_src emacs-lisp

(defun git-add-files(files)
  "Run git add with the input file"
  (shell-command (format "git add %s" files)))

(defun yadm-add-files(files)
  "Run git add with the input file"
  (let ((default-directory "~/"))
    (shell-command (format "yadm add %s" files))))

(defun dired-git-add-marked-files()
  "For each marked file in a dired buffer add it to the index"
  (interactive)
  (if (eq major-mode 'dired-mode)
      (let ((filenames (dired-get-marked-files))
	    (files ""))
	(dolist (fn filenames)
	  (setq fn (shell-quote-argument fn))
	  (setq files (concat files " " fn)))
	(git-add-files files))
    (error (format "Not a Dired buffer \(%s\)" major-mode))))

(defun dired-yadm-add-marked-files()
  "For each marked file in a dired buffer add it to the index"
  (interactive)
  (if (eq major-mode 'dired-mode)
      (let ((filenames (dired-get-marked-files))
	    (files ""))
	(dolist (fn filenames)
	  (setq fn (shell-quote-argument fn))
	  (setq files (concat files " " fn)))
	(yadm-add-files files))
    (error (format "Not a Dired buffer \(%s\)" major-mode))))
#+end_src


*** subtree


#+begin_src emacs-lisp
(after! dired
  (map! :map dired-mode-map
    "<tab>" #'dired-subtree-toggle
    "<backtab>" #'dired-subtree-cycle)
)
#+end_src

*** COMMENT sidebar

#+begin_src emacs-lisp :tangle packages.el
(package! dired-sidebar)
#+end_src


#+begin_src emacs-lisp
(after! dired-sidebar
  (add-hook! 'dired-sidebar-mode-hook  #'hide-mode-line-mode))
#+end_src

*** xdg open

#+begin_src emacs-lisp
(defun dired-open-file ()
  "In dired, open the file named on this line."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (message "Opening %s..." file)
    ;; (call-process "xdg-open" nil 0 nil file)
    (call-process "open" nil 0 nil file)
    (message "Opening %s done" file)))

(map! :map dired-mode-map "C-<return>" #'dired-open-file)
#+end_src

*** wdired

#+begin_src emacs-lisp
(map! :map dired-mode-map "w" #'wdired-change-to-wdired-mode)
#+end_src
*** all the icons


#+begin_src emacs-lisp :tangle packages.el
(package! all-the-icons-dired)
#+end_src
https://old.reddit.com/r/emacs/comments/imy9f1/all_the_icons_dired_subtree/

#+begin_src emacs-lisp
(use-package! all-the-icons-dired
  :after dired
  :config
  :hook (dired-mode . (lambda ()
                       (interactive)
                       (unless (file-remote-p default-directory)
                         (all-the-icons-dired-mode)))))

(use-package! dired-subtree
  :commands (dired-subtree-toggle)
  :config
  (advice-add 'dired-subtree-toggle :after (lambda ()
                                             (interactive)
                                             (when all-the-icons-dired-mode
                                               (revert-buffer)))))
#+end_src

*** sudo


#+begin_src emacs-lisp :tangle packages.el
(package! dired-togle-sudo :recipe (:host github :repo "renard/dired-toggle-sudo"))
#+end_src

#+begin_src emacs-lisp
(eval-after-load 'tramp
 '(progn
    ;; Allow to use: /sudo:user@host:/path/to/file
    (add-to-list 'tramp-default-proxies-alist
		  '(".*" "\\`.+\\'" "/ssh:%h:"))))
#+end_src

*** hydra

#+begin_src emacs-lisp
(major-mode-hydra-define dired-mode (:hint nil :color pink)
    (
     "Act"
     (
      ("+" dired-create-directory "mkdir")
      ("C" dired-do-copy "Copy")        ;; Copy all marked files
      ("D" dired-do-delete "Delete")
      ("R" dired-do-rename "mv")
      ("$" dired-hide-subdir-nomove "hide-subdir")
      ("i" dired-maybe-insert-subdir "insert subdir")
      ("w" dired-kill-subdir "kill subdir")
      ("M-d" vi/dired-popup-dragon "Drag with dragon")
       ("a" dired-git-add-marked-files "Git add")
      )
     "view"
     (
      ("v" dired-view-file "view")      ;; q to exit, s to search, = gets line #
      ("o" dired-find-file-other-window "open other")
      ("O" dired-display-file "view other")
      ("F" dired-do-find-marked-files "find marked")
      ("A" dired-do-find-regexp "find rx")
      ("Q" dired-do-find-regexp-and-replace "rx replace")

      )
     "listing"
     (
      ("(" dired-hide-details-mode "details")
      (")" dired-omit-mode "omit-mode")
      ("s" dired-sort-toggle-or-edit "sort")
       ;; ("?" dired-summary "summary")
      ;; ("l" dired-do-redisplay "redisplay")   ;; relist the marked or singel directory
      )
     "mark"
     (
      ("m" dired-mark "mark")
      ("u" dired-unmark "unmark")
      ("t" dired-toggle-marks "toggle")
      ("U" dired-unmark-all-marks "unmark all")
      ("E" dired-mark-extension "mark ext")
      )

     "Misc"
     (
      ("z" diredp-compress-this-file "Compress file")
      ("Z" dired-do-compress "Compress")
      ("Y" dired-do-relsymlink "rel symlink")
      ("L" dired-do-symlink "symlink")
      ("M" dired-do-chmod "chmod")
      ("G" dired-do-chgrp "chgrp")
       ("S" dired-toggle-sudo "SUDO")
      )
     )
    )
#+end_src
*** drag and drop

brew install indigoviolet/tap/dragon

https://old.reddit.com/r/emacs/comments/uq6gxy/drag_files_from_dired_to_other_applications/i8xyxsn/

#+begin_src emacs-lisp
(defun vi/dired-popup-dragon (&optional arg)
  "Open xdragon with the marked files or the file at point.
With optional prefix argument ARG, drag all the files at once."
  (interactive "P")
  ;; xdragon rename is a nix thing, pretty sure.
  (make-process
   :name "dragon"
   :command (append '("dragon")
                    (when arg '("-a"))
                    (dired-get-marked-files))
   :noquery t))
#+end_src
** COMMENT Projectile

Note: doom has significant customizations in advices around projectile: for
instance, it forces projectile to use the "generic" command and not the
vcs-specific command.

#+begin_src emacs-lisp
(use-package! projectile
  :after-call doom-first-buffer-hook
  :custom
  (projectile-project-search-path '("~/dev"))
  (projectile-auto-discover t)
  ;; copied from doom-projects.el to add -I to fd
  (projectile-generic-command
        (lambda (_)
          ;; If fd exists, use it for git and generic projects. fd is a rust
          ;; program that is significantly faster than git ls-files or find, and
          ;; it respects .gitignore. This is recommended in the projectile docs.
          (cond
           ((when-let*
                ((bin (if (ignore-errors (file-remote-p default-directory nil t))
                          (cl-find-if (doom-rpartial #'executable-find t)
                                      (list "fdfind" "fd"))
                        doom-projectile-fd-binary))
                 ;; REVIEW Temporary fix for #6618. Improve me later.
                 (version (with-memoization doom-projects--fd-version
                            (cadr (split-string (cdr (doom-call-process bin "--version"))
                                                " " t))))
                 ((ignore-errors (version-to-list version))))
                (concat (format "%s . -0 -H -I --color=never --type file --type symlink --follow --exclude .git --exclude .venv --exclude .dvc %s"
                                bin (if (version< version "8.3.0")
                                        "" "--strip-cwd-prefix"))
                        (if IS-WINDOWS " --path-separator=/"))))
           ;; Otherwise, resort to ripgrep, which is also faster than find
           ((executable-find "rg" t)
            (concat "rg -0 --files --follow --color=never --hidden -g!.git"
                    (if IS-WINDOWS " --path-separator=/")))
           ("find . -type f -print0"))))
  :config
  (add-to-list 'projectile-project-root-files "pyproject.toml")
  )
#+end_src

*** COMMENT open all project files

#+begin_src emacs-lisp
(after! projectile
  (defun vi/find-all-project-files ()
    (interactive)
    (let* (
           (root (projectile-acquire-root))
           (files (projectile-project-files root))
           (filenames (--map (expand-file-name it root) files)))
      (dolist-with-progress-reporter (f filenames) (format "Opening files in project [%s] " root) (find-file-noselect f))
      ))
  )
#+end_src


* Firestarter

Execute commands on save
https://github.com/emacsmirror/firestarter

#+begin_src emacs-lisp :tangle packages.el
(package! firestarter)
#+end_src

#+begin_src emacs-lisp
(use-package! firestarter
  :after-call doom-first-file-hook
  :custom
  (firestarter-mode)
  )
#+end_src
* dir-locals

https://emacs.stackexchange.com/questions/13080/reloading-directory-local-variables
#+begin_src emacs-lisp
(defun vi/reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(defun vi/reload-dir-locals-for-all-buffer-in-this-directory ()
  "For every buffer with the same `default-directory` as the
current buffer's, reload dir-locals."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir))
        (vi/reload-dir-locals-for-current-buffer)))))
#+end_src

* docker

#+begin_src emacs-lisp :tangle packages.el
(package! dockerfile-mode)
#+end_src



#+begin_src emacs-lisp

(after! ob-tangle
  (setq org-babel-pre-tangle-hook
        (list (lambda ()
                (let (before-save-hook after-save-hook)
                  (save-buffer))))))
#+end_src

^ this doesn't work https://github.com/hlissner/doom-emacs/issues/4651


Also note that dockerfile-mode sets up an auto-mode-alist rule that maps
Dockerfile.* -> dockerfile-mode, including ~Dockerfile.org~

This seems to mainly depend on load order, since it conflicts with the org mode
rule for "*.org" :/

So we could:

- add another rule in dockerfile-mode use-package :mode that maps *.org to org
  mode
- use file-local-variables like below in Dockerfile.org


#+begin_example
# Local Variables:
# mode: org
# End:
#+end_example

* Tramp


#+begin_src emacs-lisp
;; set in .ssh/config
(after! tramp
  (setq tramp-use-ssh-controlmaster-options nil)
  )
#+end_src

** Debugging tramp

(setq tramp-verbose 6)

C-x C-f ~/sudo::/~ and look for the tramp debug buffer

ensure that you can execute the ssh command on the terminal - tramp doesn't always
handle the prompts correctly


* Misc

#+begin_src emacs-lisp :tangle packages.el
(package! git-modes)
(package! ssh-config-mode)
(package! jsonnet-mode)
;; (package! sparql-mode)
(package! jinja2-mode)
#+end_src

** jsonnet


#+begin_src emacs-lisp :tangle packages.el
(package! jsonnet-mode)
#+end_src


#+begin_src emacs-lisp
(use-package! jsonnet-mode
  :after-call doom-first-file-hook
  :mode ("\\.jsonnet\\'"
         "\\.libsonnet\\'"))
#+end_src

** json
:PROPERTIES:
:CREATED:  [2023-11-15 Wed 18:55]
:END:


#+begin_src emacs-lisp
(use-package! json-mode
  :mode ("\\.json\\'"
          "\\.jsonl\\'"))
#+end_src
** Just

#+begin_src emacs-lisp :tangle packages.el
(package! just-mode)
(package! justl)
#+end_src


#+begin_src emacs-lisp
(setq-hook! '(just-mode-hook) comment-start "# ")
#+end_src

** Cuda mode doesn't inherit from prog-mode?
#+begin_src emacs-lisp
(add-hook! 'cuda-mode-hook #'prog-mode)
#+end_src

** case cycle

#+begin_src emacs-lisp
(defun cycle-letter-case ()
  "Toggle the letter case of current word or text selection.
Always cycle in this order: Init Caps, ALL CAPS, all lower.

URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
Version 2016-01-08"
  (interactive)
  (let (
        (deactivate-mark nil)
        -p1 -p2)
    (if (use-region-p)
        (setq -p1 (region-beginning)
              -p2 (region-end))
      (save-excursion
        (skip-chars-backward "[:alnum:]")
        (setq -p1 (point))
        (skip-chars-forward "[:alnum:]")
        (setq -p2 (point))))
    (when (not (eq last-command this-command))
      (put this-command 'state 0))
    (cond
     ((equal 0 (get this-command 'state))
      (upcase-initials-region -p1 -p2)
      (put this-command 'state 1))
     ((equal 1  (get this-command 'state))
      (upcase-region -p1 -p2)
      (put this-command 'state 2))
     ((equal 2 (get this-command 'state))
      (downcase-region -p1 -p2)
      (put this-command 'state 0)))))

(map! :g "M-c" #'cycle-letter-case)
#+end_src
** numbers commas


#+begin_src emacs-lisp :tangle packages.el
(package! commify)
#+end_src


#+begin_src emacs-lisp
(use-package! commify)
  ;; :chords (",," . commify-toggle))
#+end_src



** latex

alternative: https://github.com/karthink/org-auctex


#+begin_src emacs-lisp :tangle packages.el
(package! org-latex-impatient)
#+end_src


#+begin_src emacs-lisp
(use-package! org-latex-impatient
  :after org
  :hook (org-mode . org-latex-impatient-mode)
  :custom
  ( org-latex-impatient-tex2svg-bin "/home/venky/.asdf/shims/tex2svg")
  )
#+end_src




** COMMENT jq-mode

 too slow

#+begin_src emacs-lisp :tangle packages.el
(package! jq-mode :recipe (:host github :repo "ljos/jq-mode"))
#+end_src


#+begin_src emacs-lisp
(after! json-mode
  (define-key json-mode-map (kbd "C-c C-j") #'jq-interactively))
#+end_src

** Force kill buffer



#+begin_src emacs-lisp
(defun vi/force-kill-buffer ()
  (interactive)
  (let (kill-buffer-hook kill-buffer-query-functions)
    (kill-buffer)))
#+end_src

* Prodigy


#+begin_src emacs-lisp :tangle packages.el
(package! prodigy)
#+end_src


#+begin_src emacs-lisp
(prodigy-define-service
  :name "ruff"
  :command "just"
  :args '("ruff-watch")
  :cwd "~/dev/plus/python"
  :stop-signal 'sigkill
  :env '(("TERM" "xterm"))
  :kill-process-buffer-on-stop t
  :tags '(dev))

(prodigy-define-service
  :name "pyright"
  :command "just"
  :args '("pyright-watch")
  :cwd "~/dev/plus/python"
  :env '(("TERM" "xterm"))
  :stop-signal 'sigkill
  :kill-process-buffer-on-stop t
  :tags '(dev))

(prodigy-define-service
  :name "lint"
  :command "just"
  :args '("lint")
  :cwd "~/dev/plus/"
  :stop-signal 'sigkill
  :env '(("TERM" "xterm"))
  :kill-process-buffer-on-stop t
  :tags '(dev))

#+end_src

* COMMENT atomic chrome

TODO: see https://github.com/KarimAziev/chrome-emacs

#+begin_src emacs-lisp :tangle packages.el
(package! atomic-chrome)
#+end_src
#+begin_src emacs-lisp
(use-package! atomic-chrome
  :after-call doom-first-file-hook
  :custom
  (atomic-chrome-default-major-mode 'python-mode)
  (atomic-chrome-url-major-mode-alist
   '(("\\.ipynb$" . python-mode))
   )
  ;; (atomic-chrome-extension-type-list '(atomic-chrome))
  (atomic-chrome-buffer-open-style 'full)

  :config
  (atomic-chrome-start-server)
  )
#+end_src


* COMMENT Annotations

- annot breaks things quite badly
- bookmark+ is too convoluted, no inline display

** TODO org-remark

https://github.com/nobiot/org-remark
* Screencasts

** gif screencast

#+begin_src emacs-lisp :tangle packages.el
(package! gif-screencast :recipe (:host gitlab :repo "ambrevar/emacs-gif-screencast"))
#+end_src

Turn on gif-screencast to initiate these bindings

#+begin_src emacs-lisp
(use-package! gif-screencast
  :bind (:map gif-screencast-mode-map
         (("<f8>" . #'gif-screencast-stop)
          ("<f9>" . #'gif-screencast-toggle-pause)))
  )
#+end_src

** Keycast
#+begin_src emacs-lisp :tangle packages.el
(package! keycast :recipe (:host github :repo "tarsius/keycast"))
#+end_src

#+begin_src emacs-lisp
(use-package! keycast
  :commands (keycast-mode)
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))
  )
(after! (keycast doom-modeline)
  ;; based on keycast-mode-line function
  (doom-modeline-def-segment keycast
    (and keycast-mode-line-window-predicate (keycast--format keycast-mode-line-format))
    )
  (doom-modeline-def-modeline 'vi/keycast
    '(bar buffer-info keycast)
    '(minor-modes major-mode)
    )
  (add-hook! 'keycast-mode-hook (doom-modeline-set-modeline 'vi/keycast))
  )
;; (add-hook! keycast-mode-hook
;;   (add-to-list 'global-mode-string '("" keycast-mode-line)))
#+end_src

* COMMENT Bookmarks

- Linkmarks depends on helm. also it doesn't play nice with org-capture
  templates in Doom. Unclear if it even offers anything beyond org-capture.

- Bookmark+ is very complicated

** COMMENT Linkmarks
#+begin_src emacs-lisp :tangle packages.el
(package! linkmarks :recipe (:host github :repo "dustinlacewell/linkmarks"))
#+end_src


#+begin_src emacs-lisp
(defun vi/setup-linkmarks ()
  (setq-local linkmarks-file (expand-file-name (concat (projectile-acquire-root) "/Bookmarks.org")))
  )

(use-package! linkmarks
  :hook (prog-mode . vi/setup-linkmarks)
  )
#+end_src

** TODO harpoon

https://github.com/otavioschwanck/harpoon.el
* PDF


#+begin_src emacs-lisp :tangle packages.el
(unpin! pdf-tools)
#+end_src

** pdf tools fork with smooth scrolling


#+begin_src emacs-lisp :tangle packages.el
(package! pdf-tools :recipe
          (:host github
                 :repo "dalanicolai/pdf-tools"
                 :branch "pdf-roll"
                 :files ("lisp/*.el"
                         "README"
                         ("build" "Makefile")
                         ("build" "server")
                         (:exclude "lisp/tablist.el" "lisp/tablist-filter.el"))))

(package! image-roll :recipe
          (:host github
                 :repo "dalanicolai/image-roll.el"))
#+end_src

** COMMENT zotxt (zotero + emacs)


#+begin_src emacs-lisp :tangle packages.el
(package! zotxt)
#+end_src


#+begin_src emacs-lisp

(use-package! zotxt
  :hook (org-mode . org-zotxt-mode)
  :commands (org-zotxt-noter org-zotxt-mode)
  )

#+end_src

** org-noter


#+begin_src emacs-lisp :tangle packages.el
(package! org-noter)
#+end_src

#+begin_src emacs-lisp
(use-package! org-noter
  :commands (org-noter)
  :custom
  (setq org-noter-always-create-frame nil
        org-noter-separate-notes-from-heading t
        org-noter-default-heading-title "Page $p$"
        org-noter-auto-save-last-location t
        org-noter-notes-search-path '("~/org")
        org-noter-separate-notes-from-heading t
        org-noter-doc-property-in-notes t
        )
  )
#+end_src
** Rotation
#+begin_src emacs-lisp
(after! pdf-view
  ;; https://emacs.stackexchange.com/questions/24738/how-do-i-rotate-pages-in-pdf-tools/24766#24766
  (defun pdf-view--rotate (&optional counterclockwise-p page-p)
    "Rotate PDF 90 degrees.  Requires pdftk to work.\n
Clockwise rotation is the default; set COUNTERCLOCKWISE-P to
non-nil for the other direction.  Rotate the whole document by
default; set PAGE-P to non-nil to rotate only the current page.
\nWARNING: overwrites the original file, so be careful!"
    ;; error out when pdftk is not installed
    (if (null (executable-find "pdftk"))
        (error "Rotation requires pdftk")
      ;; only rotate in pdf-view-mode
      (when (eq major-mode 'pdf-view-mode)
        (let* ((rotate (if counterclockwise-p "left" "right"))
               (file   (format "\"%s\"" (pdf-view-buffer-file-name)))
               (page   (pdf-view-current-page))
               (pages  (cond ((not page-p)                        ; whole doc?
                              (format "1-end%s" rotate))
                             ((= page 1)                          ; first page?
                              (format "%d%s %d-end"
                                      page rotate (1+ page)))
                             ((= page (pdf-info-number-of-pages)) ; last page?
                              (format "1-%d %d%s"
                                      (1- page) page rotate))
                             (t                                   ; interior page?
                              (format "1-%d %d%s %d-end"
                                      (1- page) page rotate (1+ page))))))
          ;; empty string if it worked
          (if (string= "" (shell-command-to-string
                           (format (concat "pdftk %s cat %s "
                                           "output %s.NEW "
                                           "&& mv %s.NEW %s")
                                   file pages file file file)))
              (pdf-view-revert-buffer nil t)
            (error "Rotation error!"))))))

  (defun pdf-view-rotate-clockwise (&optional arg)
    "Rotate PDF page 90 degrees clockwise.  With prefix ARG, rotate
entire document."
    (interactive "P")
    (pdf-view--rotate nil (not arg)))

  (defun pdf-view-rotate-counterclockwise (&optional arg)
    "Rotate PDF page 90 degrees counterclockwise.  With prefix ARG,
rotate entire document."
    (interactive "P")
    (pdf-view--rotate :counterclockwise (not arg)))

  (define-key pdf-view-mode-map (kbd "R") 'pdf-view-rotate-clockwise)

  )
#+end_src

* COMMENT Pomodoro


#+begin_src emacs-lisp :tangle packages.el
(package! org-pomodoro)
#+end_src
* COMMENT detached
sr.ht is down


#+begin_src emacs-lisp :tangle packages.el
(package! detached)
#+end_src


#+begin_src emacs-lisp
(use-package! detached
  :after vterm
  :init
  (detached-init)
  :bind (;; Replace `async-shell-command' with `detached-shell-command'
          ([remap async-shell-command] . detached-shell-command)
          ;; Replace `compile' with `detached-compile'
          ([remap compile] . detached-compile)
          ([remap recompile] . detached-compile-recompile)
          ;; Replace built in completion of sessions with `consult'
          ([remap detached-open-session] . detached-consult-session))
  :custom ((detached-show-output-on-attach t)
            (detached-session-directory "/tmp")
            (detached-terminal-data-command system-type))

  :config
  (connection-local-set-profile-variables
    'remote-detached
    '((detached-session-directory . "/tmp")
       (detached-dtach-program . "dtach")))
  (connection-local-set-profiles
    '(:application tramp :protocol "ssh") 'remote-detached)
  :hook (vterm-mode . detached-vterm-mode)
  )
#+end_src

* COMMENT Documentation

** dash

#+begin_src emacs-lisp
(after! dash-docs
  ;; (dash-docs-install-docset "Python_3")
  (set-docsets! 'python-mode "Python 3")
  )
#+end_src

** COMMENT dev-docs

#+begin_src emacs-lisp :tangle packages.el
(package! devdocs)
#+end_src

** hydra


#+begin_src emacs-lisp
(pretty-hydra-define doc-hydra (:exit t)
  (
    "Reference"
   (
     ("d" +lookup/in-docsets "Dash")
    ("D" devdocs-lookup "Devdocs")
    ("O" +lookup/online-select "Online"))
   "Jump"
    (("c" +lookup/documentation "Docstring")
    ("f" +lookup/definition "Definition")
    ("u" +lookup/references "Usages")
    ("i" +lookup/implementations "Impls")
    ("t" +lookup/type-definition "Type")
    ("F" +lookup/file "file"))
   ))
#+end_src

* Profiling

** Keyfreq


#+begin_src emacs-lisp :tangle packages.el
(package! keyfreq :recipe (:host github :repo "dacap/keyfreq"))
#+end_src


#+begin_src emacs-lisp
(use-package! keyfreq
  :after-call doom-first-input-hook
  :custom
  (keyfreq-excluded-commands
   '(self-insert-command
     forward-char
     backward-char
     previous-line
     next-line))
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
  )
#+end_src

** COMMENT explain-pause

?? seems to be built into doom.. but it works?
seems to be broken in nativecomp emacs <2022-05-05 Thu>

#+begin_src emacs-lisp :tangle packages.el
(package! explain-pause-mode :recipe (:host github :repo "lastquestion/explain-pause-mode"))
#+end_src


#+begin_src emacs-lisp
(use-package! explain-pause-mode
  :config
  (explain-pause-mode)
  )
#+end_src
