:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+property: header-args:emacs-lisp :tangle config.el :cache yes
#+property: header-args :mkdirp yes :comments both
#+title: Doom Emacs configuration
#+author: Venky Iyer
#+email: indigoviolet@gmail.com
:END:

This is my literate Doom Emacs configuration.

See [[file:init.el][init.el]], [[file:packages.el][packages.el]] and [[file:config.el][config.el]] for the generated files. Also see [[file:~/.local/doom-emacs/custom.el][custom.el]] for customizations


* Notes

**  about writing doom config

- See [[https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/emacs-lisp/demos.org ][api demos]] for how to use ~use-package!~, ~map!~, ~after!~, ~set-hook!~ etc.

- Most important thing for start up speed is to defer packages as much as possible.

  :defer, :bind, :commands, :after, :after-call, :defer-incrementally should be used in ~use-package!~

  ~after!~ should be used for doom's built in packages if it is simple

  ~:after-call (pre-command-hook after-find-file dired-before-readin-hook doom-first-buffer-hook doom-first-input-hook doom-first-file-hook ))~ <- some hooks that can be used for :after-call

https://github.com/hlissner/doom-emacs/issues/310#issuecomment-354424413

** Debugging

- toggle-debug-on-error

- setq debug-on-message <regexp> (https://old.reddit.com/r/emacs/comments/aqmrkq/determine_source_of_messages_printed_to_messages/)

* To try:
** hyper/super keys
*** http://ergoemacs.org/emacs/emacs_hyper_super_keys.html

which keys? (ctrl is taken, caps is not reachable,)
how to define on ubuntu?
** DONE edit-indirect (separedit),

** fence-edit,




** polymode (justfile?)
** TODO Unpin ein

** https://framagit.org/steckerhalter/discover-my-major

** WAIT code-cells
:LOGBOOK:
- State "WAIT"       from              [2022-07-02 Sat 11:47]
:END:

cons: outputs aren't saved; this is not using polymode so that markdown isn't
supported (see https://github.com/polymode/polymode/issues/305 also)

** See if we can use https://gitlab.com/jjzmajic/hercules.el to make simpler hydras

** Use transient to make expand-region more like easy-mark

https://www.reddit.com/r/emacs/comments/f3o0v8/anyone_have_good_examples_for_transient/

The problem with easy-mark is that it takes another key combo (C-SPC) to make an
active region (for replacing or moving or wrapping).

The problem with expand-region is that you can't start the region and then jump
to a particular kind of expansion, you have to cycle through
er/try-expand-alist.

However, if we can wrap a transient around set-mark-command, then we could use
er/mark-<foo> to recreate easy-mark, with active region.

** https://github.com/minad/consult/wiki#isearch-like-backwardforward-consult-line

** Figure out how to use dired efficiently

*** dired-sidebar
*** dirvish

https://github.com/alexluigit/dirvish
** Tramp issues

*** treemacs freaks out in tramp?
*** Figure out how to efficiently handle vterm, find-file in the presence of tramp

** Ideas from [[https://github.com/zzamboni/dot-doom/blob/master/doom.org][zzamboni]]
*** Jump to matching parens
*** variable pitch fonts & mixed fonts
*** kill whole line instead of emptying it
*** autosave and backup (disabled in doom)
*** confirm-kill-emacs
*** auto-restore emacs on startup?
*** org speed keys
** org-mode:
*** [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] -- Need to set org-super-agenda-groups
*** DONE org-mode company tweaks (see [[*Company backends][Company backends]])
:LOGBOOK:
- State "DONE"       from              [2022-07-02 Sat 11:24]
:END:

*** [[https://old.reddit.com/r/orgmode/comments/8n45ds/why_highlighting_text_is_so_painful_in_orgmode/dztalak/][Change emphasis colors/etc in org-mode]]
*** Escaping in org-mode https://emacs.stackexchange.com/a/16746/31740
*** org-mode Latex previewers:


https://github.com/yangsheng6810/org-latex-impatient
https://old.reddit.com/r/emacs/comments/k6rq84/display_equations_inline_with_mathpreview/
https://github.com/fuxialexander/emacs-webkit-katex-render



*** DONE org-appear (toggle visibility of emphasis markers)

*** figure out org-capture (into Notes todo, into emacs config.org todo, project todo)


https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html

*** one more implementation of org-tangle

https://github.com/trev-dev/org-tangle-config.el

*** Use org-remark instead of annotate
** [[https://sideshowcoder.com/2020/07/02/opening-sourcegraph-from-emacs/][Sourcegraph links via git-link]]
** https://github.com/tecosaur/emacs-everywhere
** harpoon bookmarks

** toml formatter using prettier and apheleia
** https://github.com/EricCrosson/unkillable-scratch

** DONE [[https://emacs.stackexchange.com/a/28391/31740][Set font size based on monitor/scaling?]]

*** See https://github.com/mnp/dispwatch and doom/*font* functions
** DONE maple-minibuffer (mini-frame replacement)
** DONE bufler (ibuffer replacement)
** DONE Pyright
:LOGBOOK:
- State "DONE"       from              [2022-07-02 Sat 11:18]
:END:

try lsp-pyright instead of mspyls. Previously didn't work with attrs, but now it
+seems to have some support+. Whoops, misspoke:
https://github.com/microsoft/pyright/issues/146 pyright still doesn't have attrs
support.

For LSP it's ok if we ignore all LSP errors and only use it for type hints etc -
for which it seems to work better than mspyls

- [ ] Figure out how to get pyright to watch fewer files?
- [ ] Revisit lsp completion with pyright: https://github.com/emacs-lsp/lsp-pyright/issues/16#issuecomment-676501575
- [ ] poetry and pyright: https://github.com/emacs-lsp/lsp-pyright/issues/24
- [X] Set up semantic for tabnine: https://www.tabnine.com/semantic, but see if we can use current language server instead of pyls (pyright or pylance?)


** KILL Pylance
:LOGBOOK:
- State "KILL"       from              [2022-07-02 Sat 11:18]
:END:

- [ ] try pylance: https://github.com/emacs-lsp/lsp-mode/issues/1863#issuecomment-652740357 (slower release cycle?)

** js-mode with tide instead of rjsx mode

https://www.reddit.com/r/emacs/comments/ca6q7v/emacs_for_web_dev_rjsx_webmode_tide_js2etc/
https://www.reddit.com/r/emacs/comments/9tr2vn/web_development_with_emacs_tips_and_tricks/
https://github.com/mooz/js2-mode
https://www.reddit.com/r/emacs/comments/bo741n/react_react_native_environment_setup/

** http://emacsrocks.com/
** http://whattheemacsd.com/
** https://github.com/grettke/help/blob/master/help.pdf
** Make rubocop fast async
https://emacs.stackexchange.com/questions/29086/non-shell-command-on-region

use apheleia?
** exwm

* Config file headers

Doom Emacs uses three config files:

- =init.el= defines which of the existing Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#modules][modules]] are loaded. A Doom module is a bundle of packages, configuration and commands, organized into a unit that can be toggled easily from this file.
- =packages.el= defines which [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#package-management][packages]] should be installed, beyond those that are installed and loaded as part of the enabled modules.
- =config.el= contains all [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom][custom configuration]] and code.

There are other files that can be loaded, but theses are the main ones. The load order of different files is [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#load-order][defined depending on the type of session]] being started.

All the config files are generated from this Org file, to try and make its meaning as clear as possible. All =package!= declarations are written to =packages.el=, all other LISP code is written to =config.el=.

We start by simply defining the standard headers used by the three files. These headers come from the initial files generated by =doom install=, and contain either some Emacs-LISP relevant indicators like =lexical-binding=, or instructions about the contents of the file.

** init.el
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

;; https://github.com/hlissner/doom-emacs/issues/5682
(defvar comp-deferred-compilation-deny-list nil)
#+end_src

** packages.el
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src

** config.el
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

** Themes

#+begin_src emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:

(custom-set-faces!
  '(font-lock-keyword-face :slant italic)
  '(font-lock-doc-face :slant italic)
  '(font-lock-comment-face :slant italic)
  )

;; (doom-themes-treemacs-config)
(doom-themes-org-config)
(doom-themes-visual-bell-config)
#+end_src

*** the actual theme we are using

#+begin_src emacs-lisp
(setq doom-theme 'doom-one
      doom-one-brighter-comments nil
      doom-one-brighter-modeline nil)
#+end_src
* Doom modules


This code is written to the =init.el= to select which modules to load. Written
here as-is for now, as it is quite well structured and clear.

** Active
#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       ;; company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side

       ;; +light is nice, but see https://github.com/hlissner/emacs-hide-mode-line/issues/9
       (modeline);; +light)          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       ;; (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;; treemacs          ; a project drawer, like neotree but cooler

       ;; See [[*Why not use unicode-fonts][Why not use unicode-fonts]] <2022-03-23 Wed>
       ;; unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       ;; (evil +everywhere); come to the dark side, we have cookies
       ;; file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;; (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       ;; snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       direnv                ;uses https://github.com/purcell/envrc
       ;; docker
       editorconfig      ; let someone else argue about tabs vs spaces
       ein               ; tame Jupyter notebooks with emacs
       eval     ; run code, run (also, repls) ;; +overlay disabled
       ;;gist              ; interacting with github gists
       (lookup +docsets)              ; navigate your code and its documentation
       (lsp +peek)               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements <-- pdf-tools + org-noter: this crashes emacs on `i` in a pdf file
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel

       ;; +pretty is quite slow! (org-superstar)
       (org +dragndrop +jupyter)        ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional

       ;; +poetry is slow
       (python +lsp +pyright)            ; beautiful is better than ugly

       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;; literate         ; for literate configs, (we prefer to use our own org-mode hook)
       (default +bindings +smartparens))
#+end_src

** COMMENT Latest

Use `ediff-regions-listwise` to merge the latest version of this with the block
above.

#+begin_src bash :results output :wrap SRC emacs-lisp
curl https://raw.githubusercontent.com/hlissner/doom-emacs/master/init.example.el
#+end_src

#+results:
#+begin_src emacs-lisp
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company           ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       ;;yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src










* Disabled packages

magit-todos: was slow on the startup, unused

#+begin_src emacs-lisp :tangle packages.el
(disable-packages! magit-todos)
#+end_src

* Basic config

** Timestamped \*Messages\*

https://old.reddit.com/r/emacs/comments/16tzu9/anyone_know_of_a_reasonable_way_to_timestamp/
#+begin_src emacs-lisp
;; timestamps in *Messages*

(require 'ts)
(defalias 'message-plain (symbol-function 'message))
(defun message (fmt-string &rest args)
  (apply
   'message-plain
   (concat (ts-format "[%Y-%m-%dT%T]: ") fmt-string)
   args))
#+end_src

** General
#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Venky Iyer"
      user-mail-address "indigoviolet@gmail.com")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;; For some reason Doom disables auto-save and backup files by default. Let's reenable them.
(setq auto-save-default t
      make-backup-files t)

;; Disable exit confirmation.
(setq confirm-kill-emacs nil)

;; indent anywhere, no completion on tab
(setq tab-always-indent t)

(setq scroll-preserve-screen-position 'always)

;; gets pageup/pagedown to ends of buffer
(setq scroll-error-top-bottom t)

;; https://stackoverflow.com/a/19782939/14044156
(setq suggest-key-bindings nil)

;; truncates lines so that when you scroll toward the end of one, the line
;; itself moves to the left independently of the rest of the text.
(setq auto-hscroll-mode 'current-line)


;; line wrapping
;; 
(global-visual-line-mode t)
(setq-hook! 'prog-mode-hook
  visual-line-mode -1
  truncate-partial-width-windows t)

;; truncate-lines t)
;; 


(global-whitespace-mode +1)
(global-git-gutter-mode t)

;; https://christiantietze.de/posts/2022/03/hl-line-priority/
(setq hl-line-overlay-priority -50)

(setq! whitespace-style '(face tabs tab-mark trailing))

(blink-cursor-mode)
(repeat-mode 1)
#+end_src

** specpdl size

https://old.reddit.com/r/emacs/comments/9jp9zt/anyone_know_what_variable_binding_depth_exceeds/
#+begin_src emacs-lisp
(setq max-specpdl-size 25000)
#+end_src

** Custom.el handling

#+begin_src emacs-lisp
;; (setq custom-file (make-temp-file "emacs-custom"))
(setq custom-file (expand-file-name "custom.el" doom-private-dir))
;; (setq custom-file "/tmp/emacs-custom")

(load custom-file 'noerror)
#+end_src

** dir-locals.el safe Variables

Turn off "don't remember risky variables" feature

#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/a/44604
;; This actually just skips them instead of setting them regardless
;; (advice-add 'risky-local-variable-p :override #'ignore)


(setq enable-local-variables :all)
#+end_src

** Prevent *Warnings* buffer from popping up


#+begin_src emacs-lisp
(setq warning-minimum-level :error)
#+end_src

** Unadvice functions

https://emacs.stackexchange.com/a/24658 -- not sure if this works?

#+begin_src emacs-lisp
(defun advice-unadvice (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))
#+end_src
* Global keybindings


#+begin_src emacs-lisp
(map! "M-i" #'delete-indentation
      "M-t" #'beginning-of-buffer
      "M-z" #'end-of-buffer)
#+end_src

** Eval

#+begin_src emacs-lisp :tangle packages.el
(package! pp+ :recipe (:host github :repo "emacsmirror/pp-plus"))
#+end_src

https://old.reddit.com/r/emacs/comments/qfhzjg/make_better_use_of_cx_ce/


#+begin_src emacs-lisp
(use-package! pp+
  :after-call doom-first-buffer-hook
  :custom
  (pp-max-tooltip-size nil) ;; (cons 40 20)) ;; tooltips are slowww
  :config
  (global-set-key [remap eval-expression] 'pp-eval-expression)
  ;; (global-set-key [remap eros-eval-last-sexp] 'pp-eval-last-sexp)
  (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp))
#+end_src

* Mouse


#+begin_src emacs-lisp :tangle packages.el
(package! disable-mouse)
#+end_src

#+begin_src emacs-lisp
(use-package! disable-mouse
  :after-call doom-first-input-hook
  :config
  (global-disable-mouse-mode))
#+end_src

* Chords

https://dzone.com/articles/rare-letter-combinations-and


#+begin_example
❯ curl -Ov https://www.johndcook.com/unordered_bigram_frequencies.csv
❯ rg --pcre2 '^([A-Z])\1' unordered_bigram_frequencies.csv
29:JJ,0
43:KK,0
69:QQ,0
90:VV,0
96:WW,0
111:YY,0
135:HH,0.001
154:UU,0.001
197:AA,0.003
212:XX,0.003
215:ZZ,0.003
274:BB,0.011
299:II,0.023
302:GG,0.025
331:DD,0.043
378:NN,0.073
383:CC,0.083
400:MM,0.096
421:RR,0.121
426:PP,0.137
431:FF,0.146
442:TT,0.171
457:OO,0.21
526:EE,0.378
535:SS,0.405
572:LL,0.577
#+end_example


#+begin_src emacs-lisp :tangle packages.el
(package! key-chord)
#+end_src

#+begin_src emacs-lisp
;; distributed with use-package
(use-package! use-package-chords
  :after key-chord)
(use-package! key-chord
  :after-call doom-first-input-hook
  :custom

  ;; Max time delay between two key presses to be considered a key chord
  (key-chord-two-keys-delay 0.2) ; default 0.1

  ;; Max time delay between two presses of the same key to be considered a key chord.
  ;; Should normally be a little longer than `key-chord-two-keys-delay'.
  (key-chord-one-key-delay 0.3) ; default 0.2

  :config (key-chord-mode 1)
  )
#+end_src

* Colors
** dim other buffers

+Leads to all kinds of hell -- errors everywhere. unclear what this is conflicting with.
+https://github.com/mina86/auto-dim-other-buffers.el/issues/32+

#+begin_src emacs-lisp :tangle packages.el
(package! auto-dim-other-buffers)
#+end_src

#+begin_src emacs-lisp
(use-package! auto-dim-other-buffers
  :after-call doom-first-buffer-hook
  :config
  (auto-dim-other-buffers-mode t)
  )
#+end_src
** Rainbow
:LOGBOOK:
- State "KILL"       from "DONE"       [2022-01-26 Wed 17:28]
- State "DONE"       from "WAIT"       [2022-01-26 Wed 17:28]
- State "WAIT"       from "TODO"       [2022-01-26 Wed 17:28]
- State "KILL"       from "DONE"       [2022-01-26 Wed 17:28]
- State "DONE"       from "WAIT"       [2022-01-26 Wed 17:28]
- State "WAIT"       from "TODO"       [2022-01-26 Wed 17:28]
:END:

#+begin_src emacs-lisp :tangle packages.el
(package! rainbow-mode)
(package! rainbow-delimiters)
(package! rainbow-identifiers)
#+end_src


#+begin_src emacs-lisp
(use-package! rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :custom
  (rainbow-delimiters-max-face-count 9)

  :config
  (set-face-foreground 'rainbow-delimiters-depth-1-face "white")
  (set-face-foreground 'rainbow-delimiters-depth-2-face "cyan")
  (set-face-foreground 'rainbow-delimiters-depth-3-face "yellow")
  (set-face-foreground 'rainbow-delimiters-depth-4-face "green")
  (set-face-foreground 'rainbow-delimiters-depth-5-face "orange")
  (set-face-foreground 'rainbow-delimiters-depth-6-face "purple")
  (set-face-foreground 'rainbow-delimiters-depth-7-face "white")
  (set-face-foreground 'rainbow-delimiters-depth-8-face "cyan")
  (set-face-foreground 'rainbow-delimiters-depth-9-face "yellow")
  (set-face-foreground 'rainbow-delimiters-unmatched-face "red"))


(use-package! rainbow-identifiers
  :init
  ;; Use C-u what-cursor-position to figure out what face
  ;; https://stackoverflow.com/questions/1242352/get-font-face-under-cursor-in-emacs
  (setq rainbow-identifiers-faces-to-override '(font-lock-type-face
                                                font-lock-variable-name-face
                                                font-lock-function-name-face
                                                font-lock-function-name-face
                                                font-lock-constant-face
                                                ;; font-lock-string-face

                                                js2-function-call
                                                js2-object-property
                                                js2-object-property-access

                                                ))


  :config
  (setq rainbow-identifiers-face-count 222)
  ;; (setq rainbow-identifiers-choose-face-function (quote rainbow-identifiers-cie-l*a*b*-choose-face))
  (setq rainbow-identifiers-choose-face-function (quote rainbow-identifiers-predefined-choose-face))

  (defmacro vi-rainbow-identifiers--define-faces ()
    (let ((faces '())
          ;; Light colors don't matter, but we need them to define the face
          (light-colors [
                         ;; "#78683f" "#43783f" "#3f7178" "#513f78" "#783f5a"
                         ;; "#707e4f" "#4f7e67" "#4f5c7e" "#7a4f7e" "#7e544f"
                         ;; "#783778" "#784437" "#5e7837" "#37785e" "#374478"

                         ;; 219 colors derived from list-colors-display with dark colors removed
                         "#0000af" "#0000d7" "#0000ee" "#0000ff" "#005f00" "#005f5f" "#005f87"
                         "#005faf" "#005fd7" "#005fff" "#008700" "#00875f" "#008787" "#0087af"
                         "#0087d7" "#0087ff" "#00af00" "#00af5f" "#00af87" "#00afaf" "#00afd7"
                         "#00afff" "#00cd00" "#00cdcd" "#00d700" "#00d75f" "#00d787" "#00d7af"
                         "#00d7d7" "#00d7ff" "#00ff00" "#00ff5f" "#00ff87" "#00ffaf" "#00ffd7"
                         "#00ffff" "#5c5cff"
                         ;; "#5f0000" "#5f005f"
                         ;; "#5f0087"
                         ;; "#5f00af"
                         ;; "#5f00d7"
                         ;; "#5f00ff"
                         "#5f5f00" "#5f5f5f" "#5f5f87" "#5f5faf" "#5f5fd7" "#5f5fff"
                         "#5f8700" "#5f875f" "#5f8787" "#5f87af" "#5f87d7" "#5f87ff" "#5faf00"
                         "#5faf5f" "#5faf87" "#5fafaf" "#5fafd7" "#5fafff" "#5fd700" "#5fd75f"
                         "#5fd787" "#5fd7af" "#5fd7d7" "#5fd7ff" "#5fff00" "#5fff5f" "#5fff87"
                         "#5fffaf" "#5fffd7" "#5fffff" "#7f7f7f"
                         ;; "#870000"
                         "#87005f"
                         ;; "#870087"
                         "#8700af"
                         ;; "#8700d7"
                         ;; "#8700ff"
                         "#875f00" "#875f5f" "#875f87" "#875faf"
                         "#875fd7" "#875fff" "#878700" "#87875f" "#878787" "#8787af" "#8787d7"
                         "#8787ff" "#87af00" "#87af5f" "#87af87" "#87afaf" "#87afd7" "#87afff"
                         "#87d700" "#87d75f" "#87d787" "#87d7af" "#87d7d7" "#87d7ff" "#87ff00"
                         "#87ff5f" "#87ff87" "#87ffaf" "#87ffd7" "#87ffff" "#af0000" "#af005f"
                         "#af0087" "#af00af" "#af00d7" "#af00ff" "#af5f00" "#af5f5f" "#af5f87"
                         "#af5faf" "#af5fd7" "#af5fff" "#af8700" "#af875f" "#af8787" "#af87af"
                         "#af87d7" "#af87ff" "#afaf00" "#afaf5f" "#afaf87" "#afafaf" "#afafd7"
                         "#afafff" "#afd700" "#afd75f" "#afd787" "#afd7af" "#afd7d7" "#afd7ff"
                         "#afff00" "#afff5f" "#afff87" "#afffaf" "#afffd7" "#afffff" "#cd0000"
                         "#cd00cd" "#cdcd00" "#d70000" "#d7005f" "#d70087" "#d700af" "#d700d7"
                         "#d700ff" "#d75f00" "#d75f5f" "#d75f87" "#d75faf" "#d75fd7" "#d75fff"
                         "#d78700" "#d7875f" "#d78787" "#d787af" "#d787d7" "#d787ff" "#d7af00"
                         "#d7af5f" "#d7af87" "#d7afaf" "#d7afd7" "#d7afff" "#d7d700" "#d7d75f"
                         "#d7d787" "#d7d7af" "#d7d7d7" "#d7d7ff" "#d7ff00" "#d7ff5f" "#d7ff87"
                         "#d7ffaf" "#d7ffd7" "#d7ffff" "#e5e5e5" "#ff0000" "#ff005f" "#ff0087"
                         "#ff00af" "#ff00d7" "#ff00ff" "#ff5f00" "#ff5f5f" "#ff5f87" "#ff5faf"
                         "#ff5fd7" "#ff5fff" "#ff8700" "#ff875f" "#ff8787" "#ff87af" "#ff87d7"
                         "#ff87ff" "#ffaf00" "#ffaf5f" "#ffaf87" "#ffafaf" "#ffafd7" "#ffafff"
                         "#ffd700" "#ffd75f" "#ffd787" "#ffd7af" "#ffd7d7" "#ffd7ff" "#ffff00"
                         "#ffff5f" "#ffff87" "#ffffaf" "#ffffd7" "#ffffff"
                         ])
          (dark-colors [
                        ;; Original 15
                        ;; "#9999bb" "#bb99b4" "#bba699" "#a6bb99" "#99bbb4"
                        ;; "#e0d0a0" "#a3e0a0" "#a0d6e0" "#b6a0e0" "#e0a0bc"
                        ;; "#a7c0b9" "#a7aac0" "#c0a7bd" "#c0afa7" "#b3c0a7"

                        ;; 219 colors derived from list-colors-display with dark colors removed
                        "#0000af" "#0000d7" "#0000ee" "#0000ff" "#005f00" "#005f5f" "#005f87"
                        "#005faf" "#005fd7" "#005fff" "#008700" "#00875f" "#008787" "#0087af"
                        "#0087d7" "#0087ff" "#00af00" "#00af5f" "#00af87" "#00afaf" "#00afd7"
                        "#00afff" "#00cd00" "#00cdcd" "#00d700" "#00d75f" "#00d787" "#00d7af"
                        "#00d7d7" "#00d7ff" "#00ff00" "#00ff5f" "#00ff87" "#00ffaf" "#00ffd7"
                        "#00ffff" "#5c5cff"
                        ;; "#5f0000" too dark
                        ;; "#5f005f" too dark
                        ;; "#5f0087"
                        ;; "#5f00af" "#5f00d7"
                        ;; "#5f00ff"
                        "#5f5f00" "#5f5f5f" "#5f5f87" "#5f5faf" "#5f5fd7" "#5f5fff"
                        "#5f8700" "#5f875f" "#5f8787" "#5f87af" "#5f87d7" "#5f87ff" "#5faf00"
                        "#5faf5f" "#5faf87" "#5fafaf" "#5fafd7" "#5fafff" "#5fd700" "#5fd75f"
                        "#5fd787" "#5fd7af" "#5fd7d7" "#5fd7ff" "#5fff00" "#5fff5f" "#5fff87"
                        "#5fffaf" "#5fffd7" "#5fffff" "#7f7f7f"
                        ;; "#870000"  too dark
                        "#87005f"
                        ;; "#870087"
                        "#8700af"
                        ;; "#8700d7"
                        ;; "#8700ff"
                        "#875f00" "#875f5f" "#875f87" "#875faf"
                        "#875fd7" "#875fff" "#878700" "#87875f" "#878787" "#8787af" "#8787d7"
                        "#8787ff" "#87af00" "#87af5f" "#87af87" "#87afaf" "#87afd7" "#87afff"
                        "#87d700" "#87d75f" "#87d787" "#87d7af" "#87d7d7" "#87d7ff" "#87ff00"
                        "#87ff5f" "#87ff87" "#87ffaf" "#87ffd7" "#87ffff" "#af0000" "#af005f"
                        "#af0087" "#af00af" "#af00d7" "#af00ff" "#af5f00" "#af5f5f" "#af5f87"
                        "#af5faf" "#af5fd7" "#af5fff" "#af8700" "#af875f" "#af8787" "#af87af"
                        "#af87d7" "#af87ff" "#afaf00" "#afaf5f" "#afaf87" "#afafaf" "#afafd7"
                        "#afafff" "#afd700" "#afd75f" "#afd787" "#afd7af" "#afd7d7" "#afd7ff"
                        "#afff00" "#afff5f" "#afff87" "#afffaf" "#afffd7" "#afffff" "#cd0000"
                        "#cd00cd" "#cdcd00" "#d70000" "#d7005f" "#d70087" "#d700af" "#d700d7"
                        "#d700ff" "#d75f00" "#d75f5f" "#d75f87" "#d75faf" "#d75fd7" "#d75fff"
                        "#d78700" "#d7875f" "#d78787" "#d787af" "#d787d7" "#d787ff" "#d7af00"
                        "#d7af5f" "#d7af87" "#d7afaf" "#d7afd7" "#d7afff" "#d7d700" "#d7d75f"
                        "#d7d787" "#d7d7af" "#d7d7d7" "#d7d7ff" "#d7ff00" "#d7ff5f" "#d7ff87"
                        "#d7ffaf" "#d7ffd7" "#d7ffff" "#e5e5e5" "#ff0000" "#ff005f" "#ff0087"
                        "#ff00af" "#ff00d7" "#ff00ff" "#ff5f00" "#ff5f5f" "#ff5f87" "#ff5faf"
                        "#ff5fd7" "#ff5fff" "#ff8700" "#ff875f" "#ff8787" "#ff87af" "#ff87d7"
                        "#ff87ff" "#ffaf00" "#ffaf5f" "#ffaf87" "#ffafaf" "#ffafd7" "#ffafff"
                        "#ffd700" "#ffd75f" "#ffd787" "#ffd7af" "#ffd7d7" "#ffd7ff" "#ffff00"
                        "#ffff5f" "#ffff87" "#ffffaf" "#ffffd7" "#ffffff"
                        ]))
      (dotimes (i 212)
        (push `(defface ,(intern (format "rainbow-identifiers-identifier-%d" (1+ i)))
                 '((((class color) (background dark)) :foreground ,(aref dark-colors i))
                   ;; doesn't matter, we don't use light background
                   (((class color) (background light)) :foreground ,(aref light-colors i)))
                 ,(format "Identifier face #%d" (1+ i))
                 :group 'rainbow-identifiers-faces)
              faces))
      `(progn ,@faces)))
  (vi-rainbow-identifiers--define-faces)

  :hook
  (prog-mode . rainbow-identifiers-mode)
  )
#+end_src

** ansi colors

Changes the colors used for mapping from SGR codes to emacs colors, in the
function ~ansi-color-apply~ in ansi-colors.el

These are controlled by the variable ~ansi-color-normal-colors-vector~~ which
lists a bunch of faces like ~ansi-color-red~

This is used in ein:tb buffers to (presumably) display some server-side
traceback in emacs, and ansi-color-yellow is particularly hard to read.
(:background yellow3)

#+begin_src emacs-lisp
(custom-set-faces!
  '(ansi-color-yellow :background "orange4")
  )
#+end_src


* Parens

** with parens-mode

#+begin_src emacs-lisp
(after! paren
  (setq show-paren-style 'expression)
  (setq show-paren-priority -25)
  (setq show-paren-delay 0.5)
  (custom-set-faces!
    '(show-paren-match :inherit secondary-selection)
    '(show-paren-match-expression :background "darkgreen")
    '(show-paren-mismatch :weight bold :underline t :slant normal)
    ))
#+end_src

** COMMENT with smartparens-mode

show-smartparens mode is slower than show-paren mode

#+begin_src emacs-lisp
(after! smartparens
  (show-smartparens-global-mode t)
  (setq sp-show-pair-delay 5)
  (setq sp-show-pair-match-priority -50)
  (custom-set-faces!
    '(sp-show-pair-match-content-face :background "darkgreen"))
  )
#+end_src


* Environment

#+begin_src emacs-lisp :tangle packages.el
(package! exec-path-from-shell)
#+end_src
* Garbage collection

#+begin_src emacs-lisp
(use-package! gcmh
  :custom
  ;; (gcmh-verbose t)
  (gcmh-high-cons-threshold 1000000000)
  )
#+end_src
* Elisp

** Libraries
https://xenodium.com/modern-elisp-libraries/

TODO: Look into seq, map, cl- instead of dash/ht


#+begin_src emacs-lisp :tangle packages.el
(package! dash)
(package! s)
(package! f)
(package! ht)
(package! ts)
#+end_src



** Snippets

*** Find version of an installed package
#+begin_example elisp
(with-current-buffer (find-file-noselect (locate-library "consult.el"))
  (lm-version))
#+end_example
* Find file - mark readonly

#+begin_src emacs-lisp :tangle packages.el
(package! hardhat :recipe (:host github :repo "rolandwalker/hardhat"))
#+end_src

Notes:

- If a file is incorrectly marked read-only by hardhat, check variable ~~hardhat-reasons~~ (buffer-local), or ~hardhat-status~
- ~hardhat-computed-regexps~ is _cached_. Clear using ~(puthash major-mode nil hardhat-computed-regexps)~ -- see the hook below
- hardhat will only act after _the first interactive command in the buffer_

#+begin_src emacs-lisp
(use-package! hardhat
  :after-call doom-first-file-hook
  :config
  (add-to-list 'hardhat-fullpath-protected-regexps "/node_modules/")
  (add-to-list 'hardhat-fullpath-protected-regexps "/site-packages/")
  (add-to-list 'hardhat-fullpath-protected-regexps "/straight/repos/")

  ;; ignoramus-file-exact-names matches this
  ;; hardhat-fullpath-editable-regexps doesn't match it in all cases (eg. yadm/repo.git/COMMIT_EDITMSG)
  (add-to-list 'hardhat-basename-editable-regexps "\\`COMMIT_EDITMSG\\'")

  ;; (setq ignoramus-file-exact-names (remove "COMMIT_EDITMSG" ignoramus-file-exact-names))

  ;; clear the cache upon toggling
  (add-hook! 'hardhat-mode-hook (puthash major-mode nil hardhat-computed-regexps))
  (global-hardhat-mode 1)
  )


#+end_src
* Auto saving and backups

https://pragmaticemacs.wordpress.com/2016/05/23/auto-save-and-backup-every-save/

#+begin_src emacs-lisp
;; Every 20 characters
(setq! auto-save-interval 20)
#+end_src

** backups

#+begin_src emacs-lisp
(setq! kept-new-versions 20
       vc-make-backup-files t
       kept-old-versions 0)
#+end_src

* modeline

Debugging: look at mode-line-format, mode-line-misc-info

TODO: would like to add a segment like anzu for iterm, ctrlf

#+begin_src emacs-lisp
(after! doom-modeline
  (setq mode-line-default-help-echo nil
        show-help-function nil
        doom-modeline-persp-name t)

  (doom-modeline-def-segment purpose
    ;; Purpose-mode segment
    (when (and purpose-mode (doom-modeline--active) (not doom-modeline--limited-width-p))
      (format (if (purpose-window-purpose-dedicated-p) "[%s]*" "[%s]") (purpose-window-purpose))))


  (doom-modeline-def-segment vi/window-info
    ;; Useful for debugging: show window name in the modeline
    (concat (doom-modeline-spc) (format "%s" (get-buffer-window))))

  ;; best to name this 'main, since main gets set as the default in
  ;; doom-modeline. other names don't seem to take effect as default..
  (doom-modeline-def-modeline 'main
    '(bar buffer-info-simple selection-info remote-host checker)
    '(debug repl process lsp purpose persp-name minor-modes major-mode vcs))

  (doom-modeline-def-modeline 'org-src
    '(bar buffer-info-simple selection-info checker)
    '(debug lsp purpose persp-name minor-modes major-mode))

  ;; don't think we need this, since we modified 'main
  ;;(add-hook! '(prog-mode-hook org-mode-hook) (doom-modeline-set-modeline 'main))
  )
#+end_src

** minor modes
#+begin_src emacs-lisp :tangle packages.el
(package! minions)
#+end_src

#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-minor-modes t)
  (minions-mode)
  )
#+end_src

* window/Buffer management


** delete-other-windows

#+begin_src emacs-lisp
(setq ignore-window-parameters t)
#+end_src

** Movement


#+begin_src emacs-lisp :tangle packages.el
(package! windmove)
#+end_src

#+begin_src emacs-lisp
(use-package! windmove
  :after-call doom-first-buffer-hook
  :custom
  (windmove-wrap-around t)
  :config
  (windmove-default-keybindings 'shift)
  )
#+end_src

*** COMMENT Windmove conflicts

org-replace-disputed-keys is supposed to not affect date selection, but it
messes it up somehow. It's easier to get windmove to not use shift, instead
using ctrl.

https://orgmode.org/manual/Conflicts.html
Don't use disputed keys in org: conflicts with windmove. Putting this in
(use-package! org :init) doesn't appear to work
If you do this,
> When set, Org moves the following key bindings in
> Org files, and in the agenda buffer—but not during date selection.
>
> S-UP ⇒ M-p	S-DOWN ⇒ M-n
> S-LEFT ⇒ M--	S-RIGHT ⇒ M-+
> C-S-LEFT ⇒ M-S--	C-S-RIGHT ⇒ M-S-+


#+begin_src emacs-lisp
https://orgmode.org/org.html#Conflicts
(setq org-replace-disputed-keys t)
(after! (org windmove)
  (add-hook! 'org-shiftup-final-hook #'windmove-up)
  (add-hook! 'org-shiftleft-final-hook #'windmove-left)
  (add-hook! 'org-shiftdown-final-hook #'windmove-down)
  (add-hook! 'org-shiftright-final-hook #'windmove-right)
  )
#+end_src



** Splitting

#+begin_src emacs-lisp
(map! :g "C-x |" #'split-window-horizontally)
(map! :g "C-x _" #'split-window-vertically)
(map! :g "C-x /" #'delete-window)
#+end_src

*** Keep windows balanced
#+begin_src emacs-lisp
(setq split-width-threshold nil)
(defadvice split-window-below (after restore-balance-below activate)
  (balance-windows))

(defadvice split-window-right (after restore-balance-right activate)
  (balance-windows))

(defadvice delete-window (after restore-balance activate)
  (balance-windows))
#+end_src

** Switching

#+begin_src emacs-lisp
(map! "M-j" #'consult-buffer
      "M-k" #'consult-buffer)
#+end_src

** Restore

#+begin_src emacs-lisp :tangle packages.el
(package! winner)
#+end_src

#+begin_src emacs-lisp
(use-package! winner
  :config
  (winner-mode)
  :bind
  ("M-[" . winner-undo)
  ("M-]" . winner-redo)
  )
#+end_src

*** zygospore

Reversible C-x 1: if there are multiple windows, it does a winner-undo. Otherwise, delete-other-windows.

Inspired by https://github.com/LouisKottmann/zygospore.el

#+begin_src emacs-lisp
(defun vi/zygospore ()
  (interactive)
  (if (= (count-windows) 1) (winner-undo) (delete-other-windows)))

(map! :g "C-x 1" #'vi/zygospore)
#+end_src

** zoom


#+begin_src emacs-lisp :tangle packages.el
(package! zoom) ;; :recipe (:host github :repo "cyrus-and/zoom"))
#+end_src


https://github.com/doomemacs/doomemacs/issues/2225

#+begin_src emacs-lisp
(use-package! zoom
  ;; :hook (doom-first-buffer . zoom-mode)
  :custom
  (zoom-size '(0.618 . 0.618))
  (zoom-ignored-major-modes '(undo-tree-visualizer-mode vundo--mode))
  (zoom-ignore-predicates (list (lambda () (< (count-lines (point-min) (point-max)) 20))))
  )
#+end_src

** bufler


#+begin_src emacs-lisp :tangle packages.el
(package! bufler)
#+end_src


#+begin_src emacs-lisp
(use-package! bufler
  :commands (bufler bufler-switch-buffer)
  :custom
  (bufler-vc-state nil)
  (bufler-columns '("Name" "VC" "Path"))
  (bufler-filter-buffer-modes '(bufler-list-mode calendar-mode
                                                 magit-diff-mode magit-process-mode magit-revision-mode magit-section-mode
                                                 special-mode timer-list-mode))
  (bufler-groups
   (bufler-defgroups
     (group
      ;; Subgroup collecting all named workspaces.
      (auto-workspace))
     (group
      ;; Group all Ein buffers
      (name-match "*Ein*" (rx bos "*ein")))
     (group
      ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
      (group-or "*Help/Info*"
                (mode-match "*Help*" (rx bos "help-"))
                (mode-match "*Info*" (rx bos "info-"))))
     (group
      ;; Subgroup collecting all special buffers (i.e. ones that are not
      ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
      ;; through to other groups, so they end up grouped with their project buffers).
      (group-and "*Special*"
                 (lambda (buffer)
                   (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                        buffer)
                               (funcall (mode-match "Dired" (rx bos "dired"))
                                        buffer)
                               (funcall (auto-file) buffer))
                     "*Special*")))
      (group
       ;; Subgroup collecting these "special special" buffers
       ;; separately for convenience.
       (name-match "**Special**"
                   (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
      (group
       ;; Subgroup collecting all other Magit buffers, grouped by directory.
       (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
       ;; (auto-directory)
       )
      ;; Subgroup for Helm buffers.
      ;; (mode-match "*Helm*" (rx bos "helm-"))
      ;; Remaining special buffers are grouped automatically by mode.
      (auto-mode)
      )
     ;; All buffers under "~/.emacs.d" (or wherever it is).
     (dir user-emacs-directory)
     (group
      ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
      ;; `org-directory' is not yet defined).
      (dir (if (bound-and-true-p org-directory)
               org-directory
             "~/org"))
      (group
       ;; Subgroup collecting indirect Org buffers, grouping them by file.
       ;; This is very useful when used with `org-tree-to-indirect-buffer'.
       (auto-indirect)
       (auto-file)
       )
      ;; Group remaining buffers by whether they're file backed, then by mode.
      (group-not "*special*" (auto-file))
      (auto-mode)
      )
     (group
      ;; Subgroup collecting buffers in a projectile project.
      (auto-projectile))
     ;; auto-project will cause issues with tramp buffers (https://github.com/alphapapa/bufler.el/issues/63)
     ;; (group
     ;;  ;; Subgroup collecting buffers in a version-control project,
     ;;  ;; grouping them by directory.
     ;;  (auto-project))
     ;; Group remaining buffers by directory, then major mode.
     (auto-directory)
     (auto-mode)
     )
   )
  :config
  (bufler-mode)
  :bind
  ("C-x C-b" . bufler)
  )
#+end_src
** Popups


#+begin_src emacs-lisp :tangle packages.el
(package! popper)
#+end_src

#+begin_src emacs-lisp
(use-package! popper
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          "\\*doom eval\\*"
          help-mode
          comint-mode
          helpful-mode
          python-pytest-mode
          bufler-list-mode

          ;; we want to use a custom doom-modeline segment vterm-copy-mode
          ;; vterm-mode ;; https://github.com/karthink/popper/issues/38

          flycheck-error-list-mode
          flycheck-projectile-error-list-mode
          inferior-python-mode
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))

(after! popper
  (add-hook! 'doom-escape-hook
             (defun vi/close-popup()
               ;; Return nil so the rest of the hooks do run
               (progn (popper-close-latest) nil))))
#+end_src
** purpose

#+begin_src emacs-lisp :tangle packages.el
(package! window-purpose)
#+end_src


#+begin_src emacs-lisp
(use-package! window-purpose
  :custom
  (purpose-user-mode-purposes '(
                                (prog-mode . prog) (org-mode . prog)
                                ;; Protect the minibuffer from opening things while previewing
                                (minibuffer-mode . minibuf)
                                (vterm-mode . term)))
  (purpose-use-default-configuration nil)
  :after-call doom-first-buffer-hook
  :config

  (purpose-compile-user-configuration)

  ;; Dedicate all non-general windows so that they don't get other-purpose
  ;; buffers in them
  (defun vi/dedicate-if-purpose (&optional win)
    (let ((win (or win (get-buffer-window))))
      ;; (message (format "Fired dedication hook %s" win))
      (when (and
             ;; not already dedicated
             (not (purpose-window-purpose-dedicated-p win))
             ;; and not 'general
             (not (eq (purpose-window-purpose win) default-purpose)))
        ;; (message (format "Dedicating %s" win))
        (purpose-set-window-purpose-dedicated-p win t)
        )))

  ;; I tried window-buffer-change-functions (got reset to doom-run-switch-buffer-hooks), purpose-display-buffer-functions --
  ;; they didn't seem to work, but not sure
  (add-hook! '(doom-switch-buffer-hook doom-switch-window-hook) #'vi/dedicate-if-purpose)

  (purpose-mode)
  )

;; If we want consult preview to not open in different windows according to purpose
(after! (consult window-purpose)
  (defun without-purpose-advice (orig-fun &rest args)
    (without-purpose (apply orig-fun args)))
  (advice-add 'consult--with-preview-1 :around #'without-purpose-advice))

#+end_src

#+RESULTS[98dea3c02bba2388bb67e68e722d50a5d1fc1f8d]:

* Fonts

** Fontsets
*** Notes

- Emacs uses fontsets, which are a bundle of fonts, so that missing glyphs in
  one font can fall through to others.
  https://archive.casouri.cat/note/2021/fontset/index.html
- there are three defined automatically (https://www.gnu.org/software/emacs/manual/html_node/emacs/Defining-Fontsets.html)
  - fontset-startup (which I guess is based on the environment where Emacs runs;
    in our case it picks up fonts from Gnome. the "default" face uses this
    currently)
  - fontset-default (is the fallback)
  - fontset-standard (is only used when selected explicitly). Based on ~standard-fontset-spec~
- It is possible to define mappings for individual glyphs, ranges of glyphs,
  scripts, charsets etc to a font (-spec) using ~set-fontset-font~.
- The ~unicode-fonts~ package, which Doom sets up using ~:ui unicode~ does this for
  you for a large subset of Unicode blocks. It has a bunch of fonts configured
  by default (~unicode-fonts-block-font-mapping~), and then filters that list for
  the ones on your system, and finally calls ~set-fontset-font~ appropriately.
- ~doom-font~ and ~doom-unicode-font~ are Doom-specific settings; when unicode-fonts
  is used, Doom makes ~doom-unicode-font~ the priority for all blocks in
  ~unicode-fonts-block-font-mapping~
- When ~use-default-font-for-symbols~ is non-nil, Emacs uses the default font for
  symbols, but then identifies a fallback for each missing glyph
  (https://emacs.stackexchange.com/a/62056). This can mean that different glyphs
  come from different fonts, and in some contexts (eg. ~vundo~,
  https://github.com/casouri/vundo/issues/12#issuecomment-1075991819), they can
  interact poorly.

http://idiocy.org/emacs-fonts-and-fontsets.html
https://www.emacswiki.org/emacs/FontSets
http://xahlee.info/emacs/emacs/emacs_list_and_set_font.html
https://emacs.stackexchange.com/questions/5689/force-a-single-font-for-all-unicode-glyphs
https://en.wikipedia.org/wiki/Unicode_block

**** Why not use :ui unicode-fonts

unicode-fonts seems to be best tuned if you want a number of different
scripts/languages to be visible (eg. ~view-hello-file~).

We don't care so much about this, instead we want various glyphs and icon fonts
to work together, and this seems to add complexity and hide what is happening.

So it may be simpler to use ~set-fontset-font~ directly.

In fact, in practice, ~view-hello-file~ looks a lot better with unicode-fonts
turned off!


*** Fonts for various unicode ranges

- We want to use "patched" fonts (see https://github.com/ryanoasis/nerd-fonts),
  which include a bunch of nice glyphs in their unused slots, and can be used in
  terminal prompts etc.
- ~all-the-icons~ provides some icon fonts which get used in treemacs, vertico
  buffers etc.
- We want to be able to select a specific font for our coding, without regard to
  whether this has all symbol ranges represented.
- We want to force specific Unicode blocks/ranges to use a single font to avoid
  inconsistencies b/w glyphs (eg. vundo).

**** Notes on font-startup fontset

- When you ~describe-fontset~, pay attention to "REQUESTED" and [OPENED] -- Emacs
  is trying to find fonts with specific glyphs that match some font-spec in the
  fontset. It is unclear to me how this search is ranked, but it usually returns
  Gnome's monospace font first -- which is why Emacs runs with that for most
  symbols.

***** COMMENT prevent using system font

This doesn't prevent fontset-startup from getting created, but Emacs no longer
responds to changes in the system monospace text font. Actually it's nice to
have Emacs use the system monospace font, so this is commented.

#+begin_src emacs-lisp
(add-hook! 'after-setting-font-hook (setq font-use-system-font nil))
#+end_src


**** Base config

Test on ~view-hello-file~. As of <2022-03-24 Thu> emoji doesn't work

#+begin_src emacs-lisp
(add-hook! after-setting-font
  (defun vi/set-fontsets ()
    ;; Prevent emacs from using the default font for symbols and punctuation; this
    ;; will cause fontsets to be used.
    (setq use-default-font-for-symbols nil)

    ;; Next we want to set Google's Noto Sans fonts (like Noto Sans Cherokee, Noto
    ;; Sans Armenian) to be the backup, since they represent a lot of different
    ;; scripts; but there doesn't seem to be a way to specify a font-family prefix
    ;; like "Noto Sans*". So we use the foundry name :GOOG, and cross our fingers.
    ;; See https://gist.github.com/alanthird/7152752d384325a83677f4a90e1e1a05 for
    ;; a more explicit setting
    ;;
    ;; default for fontset-startup, we append so that it's at the end
    (set-fontset-font "fontset-startup" nil (font-spec :foundry "GOOG") nil 'append)

    ;; default for fontset-default (which is the fallback for fontset-startup)
    (set-fontset-font t nil (font-spec :foundry "GOOG"))
    ))
#+end_src

***** COMMENT Per block Config

Edit <2022-03-24 Thu>: See
https://github.com/casouri/vundo/issues/12#issuecomment-1078557737 for why I
turned this off -- there's a smaller fix in [[*vundo][vundo]]

We are deliberately using this separate from the :ui module, since all we want
is the unicode block info in ~unicode-fonts-blocks~. We are not calling
~(unicode-fonts-setup)~

#+begin_src emacs-lisp :tangle packages.el
(package! unicode-fonts)
#+end_src

#+begin_src emacs-lisp

;; We use unicode-fonts for the definition of Unicode block ranges
(use-package! unicode-fonts
  :config

  ;; Set Symbola for a bunch of blocks used in vundo so they are all the same
  ;; font (https://github.com/casouri/vundo/issues/12#issuecomment-1075991819)
  (dolist (unicode-block '(
                           "Box Drawing"
                           "Geometric Shapes"
                           "Geometric Shapes Extended"))
    (let* (
           (char-range (cdr (assoc unicode-block unicode-fonts-blocks)))
           (start (car char-range))
           (end (cadr char-range)))
      (set-fontset-font "fontset-startup" (cons start end) (font-spec :family "Symbola"))))
)
#+end_src


** Adjust for display size change

#+begin_src emacs-lisp :tangle packages.el
(package! dispwatch :recipe (:host github :repo "mnp/dispwatch"))
#+end_src


#+begin_src emacs-lisp
(defun vi/set-font-size (sz)
  (setq doom-font (font-spec :size sz))
  (doom/reload-font)
  )

;; see (dispwatch--get-display)
;; Can be run manually like (vi/adjust-font-size-for-display '(3440 . 1440))
(defun vi/adjust-font-size-for-display (disp)
  (message "rejiggering for %s" disp)
  (cond ((equal disp '(3440 . 1440))   ; LG monitor
         (vi/set-font-size 13))
        ((equal disp '(3000 . 2000))    ; laptop @ 100%, 2000%
         (vi/set-font-size 13))
        ((equal disp '(4800 . 3200))    ; laptop @ 125%
         (vi/set-font-size 13))
        ((equal disp '(4002 . 2668))    ; laptop @ 150%
         (vi/set-font-size 23))
        ((equal disp '(3426 . 2284))    ; laptop @ 175%
         (vi/set-font-size 13))
        (t (message "Unknown display size %sx%s" (car disp) (cdr disp)))))

(use-package dispwatch
  :config
  (dispwatch-mode 1)
  (add-hook! 'dispwatch-display-change-hooks #'vi/adjust-font-size-for-display)
  )
#+end_src

* Kill/Yank/Mark regions

#+begin_src emacs-lisp :tangle packages.el
(package! hungry-delete)
(package! easy-kill :recipe (:host github :repo "leoliu/easy-kill"))
(package! easy-kill-extras)
(package! expand-region)
#+end_src

#+begin_src emacs-lisp
(use-package! hungry-delete
  :after-call doom-first-input-hook
  :config
  (global-hungry-delete-mode))

(use-package! expand-region
  :after-call doom-first-input-hook
  :commands (er/mark-inside-pairs er/mark-inside-quotes er/mark-outside-pairs er/mark-outside-quotes)
  )

(use-package! easy-kill
  :after-call doom-first-input-hook
  :custom
  ;; Used for first marking
  (easy-mark-try-things '(symbol line forward-line-edge sexp)) ;see easy-kill-alist
  (easy-kill-try-things '(symbol line forward-line-edge sexp)) ;see easy-kill-alist
  :bind (
         ([remap kill-ring-save] . easy-kill) ; M-w
         ([remap set-mark-command] . easy-mark) ;C-SPC
         ;; ("M-SPC" . easy-mark)
         )
  )

(use-package! easy-kill-extras
  :after easy-kill
  :init
  (setq easy-kill-ace-jump-enable-p nil)
  :config
  (require 'extra-things)
  ;; Integrate `expand-region' functionality with easy-kill
  (define-key easy-kill-base-map (kbd "o") 'easy-kill-er-expand)
  (define-key easy-kill-base-map (kbd "i") 'easy-kill-er-unexpand)

  ;; unused
  ;;
  ;;  '(?< buffer-before-point ""))
  ;;  '(?> buffer-after-point ""))
  ;;  '(?t string-to-char-backward ""))
  ;;  '(?T string-up-to-char-backward ""))
  ;;
  ;;
  )

(after! easy-kill
  (defun easy-kill-on-symbol (_n)
    (when (er/mark-symbol)
      (easy-kill-adjust-candidate 'symbol (mark) (point))))

  (defun easy-kill-on-inside-pairs (_n)
    (when (er/mark-inside-pairs)
      (easy-kill-adjust-candidate 'inside-pairs (mark) (point))))

  (defun easy-kill-on-outside-pairs (_n)
    (when (er/mark-outside-pairs)
      (easy-kill-adjust-candidate 'outside-pairs (mark) (point))))

  (defun easy-kill-on-inside-quotes (_n)
    (when (er/mark-inside-quotes)
      (easy-kill-adjust-candidate 'inside-quotes (mark) (point))))

  (defun easy-kill-on-outside-quotes (_n)
    (when (er/mark-outside-quotes)
      (easy-kill-adjust-candidate 'outside-quotes (mark) (point))))

  ;; These take arguments
  (setq easy-kill-cycle-ignored '(string-to-char-forward string-up-to-char-forward))

  ;; easy-mark will cycle through things in this order
  (setq easy-kill-alist
        '((?w word " ")
          (?s symbol " ")
          ;; (?W WORD " ")
          (?l line "\n")
          (?< inside-pairs "")
          (?> outside-pairs "")
          (?\' inside-quotes "")
          (?\" outside-quotes "")
          (?$ forward-line-edge "")
          (?^ backward-line-edge "")
          (?d defun "\n\n")
          (?b buffer "")
          (?x sexp "\n")
          (?L list "\n")
          (?f string-to-char-forward "")
          (?F string-up-to-char-forward "")
          (?f filename "\n")
          (?D defun-name " ")
          (?b buffer-file-name)))
  )
#+end_src

** no yanking whitespace

*** COMMENT stackoverflow solution
https://stackoverflow.com/a/69307156/14044156
#+begin_src emacs-lisp
(defun night/h-kill-skip-whitespace (orig-fn string &optional rest)
  (message string)
  (message rest)
  (let* (
         (string-raw (substring-no-properties string))
         (space-p (not (string-match-p "[^ \t\n\r]" string-raw))))
    (cond
     ((not space-p)
      (apply orig-fn string rest))
     (t
      (message "skipped whitespace kill")
     ))))


(advice-add 'kill-new :around #'night/h-kill-skip-whitespace)
#+end_src

*** clean-kill-ring
https://github.com/NicholasBHubbard/clean-kill-ring.el

#+begin_src emacs-lisp :tangle packages.el
(package! clean-kill-ring :recipe (:host github :repo "NicholasBHubbard/clean-kill-ring.el"))
#+end_src

#+begin_src emacs-lisp
(use-package! clean-kill-ring
  :after-call doom-first-input-hook
  :config
  (clean-kill-ring-mode)
  )
#+end_src

* Undo

#+begin_src emacs-lisp
;; (after! undo-tree
;;   (map! "C--" #'undo-tree-undo)
;;   )

(after! undo-fu
  (map! "C--" #'undo-fu-only-undo)
  (map! "M--" #'undo-fu-only-redo)
  (map! "C-M--" #'undo-fu-only-redo-all)
  (setq! undo-limit 80000000)
  )
#+end_src

** COMMENT undo-hl
seems to make things slow?

#+begin_src emacs-lisp :tangle packages.el
(package! undo-hl :recipe (:host github :repo "casouri/undo-hl"))
#+end_src


#+begin_src emacs-lisp
(use-package! undo-hl
  :after-call doom-first-buffer-hook
  :hook (prog-mode . undo-hl-mode)
  )
#+end_src

** vundo
#+begin_src emacs-lisp :tangle packages.el
(package! vundo :recipe (:host github :repo "casouri/vundo"))
#+end_src

#+begin_src emacs-lisp
(use-package! vundo
  :custom
  (vundo-roll-back-on-quit nil)
  (vundo-glyph-alist vundo-unicode-symbols)
  ;; (vundo-glyph-alist vundo-ascii-symbols)
  :config
  (set-face-attribute 'vundo-default nil :family "DejaVu Sans Mono")
  :after-call doom-first-buffer-hook
  :bind ("C-x u" . vundo))

(add-hook! 'vundo-mode-hook
           #'hide-mode-line-mode
           (visual-line-mode -1)
           (setq window-size-fixed t)
           ;; (buffer-face-set '(:family "DejaVu Sans Mono"))
           )
#+end_src
** Last change


#+begin_src emacs-lisp :tangle packages.el
(package! goto-chg :recipe (:host github :repo "emacs-evil/goto-chg"))
#+end_src


#+begin_src emacs-lisp
(use-package! goto-chg
  :config
  (map!
   "C-." #'goto-last-change
   "C-," #'goto-last-change-reverse))
(after! org
  ;; goto-last-change-reverse
  (map! :map org-mode-map "C-," nil)
  )
#+end_src

* Snippets

#+begin_src emacs-lisp :tangle packages.el
(package! yankpad :recipe (:host github :repo "Kungsgeten/yankpad"))
(package! yasnippet)
#+end_src

#+begin_src emacs-lisp
(after! yasnippet
  (setq yas-wrap-around-region t)
  (yas-global-mode 1))

(use-package! yankpad
  :after-call doom-first-input-hook
  :commands (yankpad-insert);;  company-yankpad)
  :custom
  (yankpad-file "~/.config/doom/yankpad.org")
  :config
  (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand)
  )
#+end_src

* Fill

** unfill paragraphs
#+begin_src emacs-lisp :tangle packages.el
(package! unfill)
#+end_src

#+begin_src emacs-lisp
(use-package! unfill
  :after-call doom-first-input-hook
  :bind ("M-a" . unfill-paragraph))

#+end_src

** COMMENT Fill function arguments

We don't use this in practice...

#+begin_src emacs-lisp :tangle packages.el
(package! fill-function-arguments)
#+end_src

#+begin_src emacs-lisp
(use-package! fill-function-arguments
  :after-call doom-first-input-hook
  ;; :hook
  ;; (prog-mode . (lambda () (local-set-key (kbd "M-q") #'fill-function-arguments-dwim)))
  ;; (emacs-lisp-mode . (lambda ()
  ;;                      (setq-local fill-function-arguments-first-argument-same-line t)
  ;;                      (setq-local fill-function-arguments-second-argument-same-line t)
  ;;                      (setq-local fill-function-arguments-last-argument-same-line t)
  ;;                      (setq-local fill-function-arguments-argument-separator " ")))
  )
#+end_src

* Comments

** Boxing
#+begin_src emacs-lisp :tangle packages.el
(package! rebox2)
#+end_src

#+begin_src emacs-lisp
(use-package! rebox2
  :after-call doom-first-input-hook
  :config
  (setq rebox-style-loop '(13 15 23 25 16 17 26 27 11 21))
  :bind
  (
   ;; ("M-:" . rebox-dwim)
   :map rebox-mode-map ("M-q" . nil)
   )
  ;; (define-key rebox-mode-map (kbd "M-q") nil)
  )
#+end_src

** Editing comments

*** COMMENT poporg
#+begin_src emacs-lisp
(package! poporg)

(defun python-mode-poporg-hook ()
  (setq-local poporg-edit-hook '(sql-mode))
  )

(use-package! poporg
  :after-call doom-first-input-hook
  :custom
  ;; don't match * in common prefix - this will break C-style comments
  ;; poporg but it is necessary to retain org headings
  (poporg-comment-skip-regexp "[[:space:]]*")
  :hook (python-mode . python-mode-poporg-hook)
  :bind ("M-\\" . poporg-dwim)
  )
#+end_src

*** separedit

#+begin_src emacs-lisp :tangle packages.el
(package! separedit)
#+end_src


#+begin_src emacs-lisp
(use-package! separedit
  :after-call doom-first-input-hook
  :custom
  (separedit-remove-trailing-spaces-in-comment t)
  (separedit-default-mode 'org-mode)
  :bind ("M-\\" . separedit)

  )
#+end_src

* Indentation

** Guides


#+begin_src emacs-lisp
(use-package! highlight-indent-guides
  :custom
  (highlight-indent-guides-delay 1)
  (highlight-indent-guides-method 'bitmap)
  )
#+end_src

** Shift regions

#+begin_src emacs-lisp
;; Shift the selected region right if distance is postive, left if
;; negative

(defun vi/shift-region (distance)
  (let ((mark (mark)))
    (save-excursion
      (indent-rigidly (region-beginning) (region-end) distance)
      (push-mark mark t t)
      ;; Tell the command loop not to deactivate the mark
      ;; for transient mark mode
      (setq deactivate-mark nil))))

(defun vi/shift-right ()
  (interactive)
  (vi/shift-region 1))

(defun vi/shift-left ()
  (interactive)
  (vi/shift-region -1))

(map! :g "M->" #'vi/shift-right)
(map! :g "M-<" #'vi/shift-left)
#+end_src

* Movement


#+begin_src emacs-lisp :tangle packages.el
(package! mwim)
#+end_src


#+begin_src emacs-lisp
(use-package! mwim
  :after-call doom-first-input-hook
  :bind
  ("C-a" . mwim-beginning)
  ("C-e" . mwim-end)
  )
#+end_src

* Search/Filtering

** isearch
#+begin_src emacs-lisp
(after! isearch
  ;; Show match/total in isearch prompt
  (setq isearch-lazy-count t
        isearch-lazy-highlight t))
#+end_src

** smartscan
#+begin_src emacs-lisp :tangle packages.el
(package! smartscan)
#+end_src


#+begin_src emacs-lisp
(use-package! smartscan
  :after-call doom-first-input-hook
  :config
  (global-smartscan-mode 1)

  ;; M-p, M-n interfere in git-rebase mode
  (add-hook! git-rebase-mode (smartscan-mode -1))
  )
#+end_src
** ctrlf

#+begin_src emacs-lisp :tangle packages.el
(package! ctrlf)
#+end_src

*** config
#+begin_src emacs-lisp
(use-package! ctrlf
  :after-call doom-first-input-hook
  :custom
  (ctrlf-auto-recenter t)
  :config
  (ctrlf-mode +1)
  (add-hook! 'pdf-isearch-minor-mode-hook (ctrlf-local-mode -1))
  :bind
  (
   :map ctrlf-mode-map (
                        ("C-s" . ctrlf-forward-fuzzy)
                        ("C-r" . ctrlf-backward-fuzzy)
                        ;; ("C-M-s" . ctrlf-forward-regexp)
                        ;; ("C-M-r" . ctrlf-backward-regexp)
                        )
   )
  )
#+end_src
** regex-based searching, using python/pcre

#+begin_src emacs-lisp :tangle packages.el
(package! visual-regexp)
(package! visual-regexp-steroids)
#+end_src

** Jumping


#+begin_src emacs-lisp :tangle packages.el
(package! smart-jump)
(package! rg)                           ;For smart-jump-find-references-with-rg
#+end_src


#+begin_src emacs-lisp
(use-package! smart-jump
  :after-call doom-first-input-hook
  :config
  (smart-jump-setup-default-registers)
  :commands (smart-jump-go smart-jump-back smart-jump-references)
  )

(after! dumb-jump
  (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
  (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t))


(after! smart-jump
  (smart-jump-register :modes 'lsp-mode
                       :jump-fn 'lsp-find-definition
                       :pop-fn 'xref-pop-marker-stack
                       :refs-fn 'lsp-find-references
                       :heuristic 'point
                       :refs-heuristic 'point
                       :should-jump t
                       :order 2
                       :async t)

  (smart-jump-register :modes 'prog-mode
                       :jump-fn #'+lookup/definition
                       :pop-fn 'xref-pop-marker-stack
                       :refs-fn #'+lookup/references
                       :heuristic 'error
                       :refs-heuristic 'error
                       :should-jump t
                       :order 1
                       :async t)
  )
#+end_src
** consult customization

# TODO: filter out dired-sidebar


#+begin_src emacs-lisp :tangle packages.el
(package! vi-consult-buffers :recipe (:host github :repo "indigoviolet/vi-consult-buffers"))
#+end_src

#+begin_src emacs-lisp
(use-package! vicb
  :config
  (vicb-setup)
  )

(after! (consult projectile)
   (setq consult-project-function (lambda (_) (projectile-project-root))))

(after! consult-dir
  (setq consult-dir-project-list-function #'consult-dir-projectile-dirs)

  ;; this is normally find-file, but it's perhaps more useful to find any file
  (setq consult-dir-default-command #'+vertico/consult-fd)
  )

;; (after! '(consult vicb)
;;   ;; (consult-customize consult-buffer :group nil :sort t)
;;   )
#+end_src
*** projectile

#+begin_src emacs-lisp :tangle packages.el
(package! consult-projectile :recipe (:host gitlab :repo "OlMon/consult-projectile"))
#+end_src

** embark


#+begin_src emacs-lisp
(after! embark
  ;; try out embark-mixed-indicator which is more verbose than embark-which-key-indicator
  (setq! embark-indicators '(embark--vertico-indicator embark-mixed-indicator embark-highlight-indicator embark-isearch-highlight-indicator))
  )
#+end_src

*** targets for buffer/file

https://github.com/oantolin/embark/issues/231#issuecomment-854390476

#+begin_src emacs-lisp
(after! embark
   (defun embark-target-this-buffer-file ()
     (cons 'this-buffer-file (or (buffer-file-name) (buffer-name))))

   (add-to-list 'embark-target-finders #'embark-target-this-buffer-file 'append)

   (add-to-list 'embark-keymap-alist '(this-buffer-file . this-buffer-file-map))

   (embark-define-keymap this-buffer-file-map
         "Commands to act on current file or buffer."
         ("l" load-file)
         ("b" byte-compile-file)
         ;; ("S" sudo-find-file)
         ;; ("U" 0x0-upload)
         ;; ("r" rename-file-and-buffer)
         ;; ("d" diff-buffer-with-file)
         ("=" ediff-buffers)
         ("C-=" ediff-files)
         ("!" shell-command)
         ("&" async-shell-command)
         ("x" consult-file-externally)
         ;; ("C-a" mml-attach-file)
         ("c" copy-file)
         ("k" kill-buffer)
         ("z" bury-buffer)
         ("|" embark-shell-command-on-buffer)
         ("g" revert-buffer)))
#+end_src
** Orderless

https://github.com/oantolin/orderless#interactively-changing-the-configuration
https://github.com/minad/vertico#completion-styles-and-tab-completion

#+begin_src emacs-lisp
(after! orderless
  (setq orderless-matching-styles '(orderless-literal orderless-regexp)))
                                                      ;;orderless-flex)))

(after! (orderless vertico)
  (defun vi/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local orderless-matching-styles '(orderless-literal)
                orderless-style-dispatchers nil))

  ;; (define-key minibuffer-local-completion-map (kbd "C-l") #'vi/match-components-literally)
  (define-key vertico-map (kbd "C-l") #'vi/match-components-literally)
  )
#+end_src
* Narrowing


#+begin_src emacs-lisp :tangle packages.el
(package! recursive-narrow)
#+end_src


#+begin_src emacs-lisp
(use-package! recursive-narrow
  :after-call doom-first-input-hook
  :commands (hydra-narrow/body recursive-narrow-or-widen-dwim recursive-widen)
  :config
  (defhydra hydra-narrow (:exit t :columns 2)
    "Narrow"
    ("n" recursive-narrow-or-widen-dwim "narrow")
    ("w" recursive-widen "widen")
    )
  )
#+end_src
* Folding

** outline
- bicycle doesn't seem to do anything more than outline-cycle and outline-cycle-buffer

#+begin_src emacs-lisp
(use-package! outline
  :after-call doom-first-buffer-hook
  :hook (prog-mode . outline-minor-mode)
  :bind (:map outline-minor-mode-map
         ([C-tab] . outline-cycle)
         ([s-tab] . outline-cycle-buffer))) ; win-tab
#+end_src

*** Python

https://old.reddit.com/r/emacs/comments/e2u5n9/code_folding_with_outlineminormode/
#+begin_src emacs-lisp
(setq-hook! 'python-mode-hook outline-regexp (python-rx (* space) (or defun decorator)))
#+end_src


*** COMMENT outline faces

doesn't do much, clutters


#+begin_src emacs-lisp :tangle packages.el
(package! outline-minor-faces :recipe (:host github :repo "tarsius/outline-minor-faces"))
#+end_src

#+begin_src emacs-lisp
(use-package! outline-minor-faces
  :after outline
  :config (add-hook 'outline-minor-mode-hook
		      #'outline-minor-faces-mode))
#+end_src

* Completion

** Tabnine

#+begin_src emacs-lisp :tangle packages.el
(package! company-tabnine)
#+end_src

#+begin_src emacs-lisp
(use-package! company-tabnine
  :after-call doom-first-input-hook
  :commands (company-tabnine)
  :config
  ;; https://github.com/TommyX12/company-tabnine#known-issues
  ;; workaround for company-transformers
  (setq company-tabnine--disable-next-transform nil)
  (defun my-company--transform-candidates (func &rest args)
    (if (not company-tabnine--disable-next-transform)
        (apply func args)
      (setq company-tabnine--disable-next-transform nil)
      (car args)))

  (defun my-company-tabnine (func &rest args)
    (when (eq (car args) 'candidates)
      (setq company-tabnine--disable-next-transform t))
    (apply func args))

  (advice-add #'company--transform-candidates :around #'my-company--transform-candidates)
  (advice-add #'company-tabnine :around #'my-company-tabnine))
#+end_src

** Corfu/Cape

#+begin_src emacs-lisp :tangle packages.el
(package! corfu :recipe (:host github :repo "minad/corfu" :files (:defaults "extensions/*.el")))
(package! cape)
(package! popon :recipe (:type git :repo "https://codeberg.org/akib/emacs-popon.git"))
(package! corfu-terminal :recipe (:type git :repo "https://codeberg.org/akib/emacs-corfu-terminal.git"))
#+end_src

#+begin_src emacs-lisp
(use-package! corfu
  :after-call doom-first-input-hook
  :custom
  (corfu-auto t)
  (corfu-quit-no-match 'separator)
  (corfu-auto-delay 0.2)
  (corfu-auto-prefix 2)
  (completion-styles '(basic))
  :config
  (custom-set-faces! '(corfu-current :background "ivory4"))
  (global-corfu-mode)
  (corfu-history-mode 1)
  )

(after! corfu
  (setq! corfu-terminal-disable-on-gui nil)
  (corfu-terminal-mode)
  )

(use-package! cape
  :after-call doom-first-input-hook
  :config
  (defalias 'vi/cape-tabnine (cape-company-to-capf #'company-tabnine))
  (defalias 'vi/cape-yankpad (cape-company-to-capf #'company-yankpad))

  (setq-hook! '(prog-mode-hook conf-mode-hook sh-mode-hook text-mode-hook)
    completion-at-point-functions
    (list (cape-super-capf #'vi/cape-tabnine #'vi/cape-yankpad)))

  (setq-hook! '(org-mode-hook)
    completion-at-point-functions
    ;; dabbrev for variable names?
    (list (cape-super-capf #'vi/cape-tabnine #'vi/cape-yankpad #'cape-dabbrev)))
  )
#+end_src

* Iedit

#+begin_src emacs-lisp :tangle packages.el
(package! iedit)
#+end_src

#+begin_src emacs-lisp
(use-package! iedit
  :bind
  ("C-;" . iedit-mode))
#+end_src

* wgrep

#+begin_src emacs-lisp :tangle packages.el
(package! wgrep)
#+end_src


#+begin_src emacs-lisp
(use-package! wgrep
  :after doom-first-file-hook
  :custom
  (wgrep-auto-save-buffer t)
  )
#+end_src

* Which-key

#+begin_src emacs-lisp
;; Allow C-h to trigger which-key before it is done automatically
(after! which-key
  (setq which-key-show-early-on-C-h t)
  )
#+end_src

* Hydra

#+begin_src emacs-lisp :tangle packages.el
(package! pretty-hydra)
(package! major-mode-hydra)
#+end_src

#+begin_src emacs-lisp
(after! major-mode-hydra
  (setq major-mode-hydra-invisible-quit-key "q")
  )


(pretty-hydra-define global-hydra (:exit t)
  ("Searching"
   (;; ("f" +vertico/consult-fd "fd")
    ("s" consult-ripgrep "rg in project")
    ("l" consult-line "Line isearch")
    ("D" doc-hydra/body "Docs"))
   "Navigating"
   (("b" consult-buffer "Buffers")
    ("i" consult-outline "outlIne")
    ("t" dired-sidebar-jump-to-sidebar "Tree")
    ("T" dired-sidebar-toggle-sidebar "Tree")
    ;; ("t" treemacs-select-window "treemacs")
    ;; ("T" +treemacs/toggle "Toggle treemacs")
    ("`" popper-toggle-latest "Latest Popup")
    ("'" popper-cycle "Popup cycles")
    )
   ""
    (
     ;;("v" multi-vterm-next "vterm-toggle")
     ;; ("V" multi-vterm "vterm")
     ("v" +vterm/toggle "vterm toggle")
     ("V" +vterm/here "vterm")

    )
   "Modes"
   (;; ("a" hydra-annotate/body "Annotate")
    ("SPC" major-mode-hydra "Major")
    ("c" flycheck-hydra/body "flycheck")
    ("n" hydra-narrow/body "narrow")
    ("L" lsp-mode-hydra/body "LSP")
    ("e" ein-hydra/body "EIN")
    ("p" org-pomodoro "Pomodoro"))
   "Actions"
   (("A" org-agenda-list "Agenda")
    ("M-y" yankpad-insert "yankpad")
    ("g" magit-status-here "magit")
    ("M-\\" edit-indirect-region "edit indirect region")
    ;; ("d" consult-dir "dir" )
    ("M-l" org-store-link "store link")
    ;; ("w" +workspace/cycle "next workspace")
    ("w" persp-switch "next workspace")
    )
   )
  )

(key-chord-define-global "hh" #'global-hydra/body)
#+end_src

* Org mode

#+begin_src emacs-lisp
(after! org
  ;; hide org markup indicators
  (setq org-hide-emphasis-markers t
        ;; Insert Org headings at point, not after the current subtree (this is enabled by default by Doom).
        org-insert-heading-respect-content nil
        org-cycle-separator-lines 0
        org-attach-id-dir ".attach"
        org-blank-before-new-entry '((heading . never) (plain-list-item . never))
        org-startup-folded t
        org-startup-indented t
        org-startup-numerated nil
        org-startup-align-all-tables t
        ;; Leads to 'File mode specification error: (user-error Not at a table)' in some org files
        ;; replace with #+startup: shrink
        ;;        org-startup-shrink-all-tables t
        org-log-into-drawer t
        org-src-window-setup 'current-window
        org-src-preserve-indentation nil
        org-edit-src-content-indentation 0
        org-num-skip-commented t
        org-M-RET-may-split-line t
        ;; https://old.reddit.com/r/orgmode/comments/fagcaz/show_schedule_and_deadlines_for_standard_todo_list/
        org-agenda-files '("~/org/personal.org")
        org-refile-targets '(
                             ("~/org/personal.org" . (:maxlevel . 1))
                             ("~/org/ml.org" . (:maxlevel . 1))
                             )
        org-agenda-entry-types '(:deadline :scheduled)
        org-agenda-skip-scheduled-if-done t
        org-todo-keywords '((sequence "TODO(t)" "WAIT(w!)" "SOMEDAY(s!)" "REVISIT(r!)" "|" "DONE(d!)" "KILL(k!)" ))
        org-todo-keyword-faces '(("WAIT" . +org-todo-onhold)
                                 ("HOLD" . +org-todo-onhold)
                                 ("REVISIT" . +org-todo-onhold)
                                 ("SOMEDAY" . +org-todo-onhold)
                                 ("KILL" . +org-todo-cancel))
        org-use-fast-todo-selection 'expert

        ;; https://github.com/radian-software/ctrlf/issues/118
        org-fold-core-style 'overlays)
;;  (pretty-hydra-define org-hydra
  (major-mode-hydra-define org-mode nil
    ("Subtree"
     (("k" org-cut-subtree "cut")
      ("y" org-paste-subtree "paste")
      ("<up>" org-promote-subtree "promote")
      ("<down>" org-demote-subtree "demote")
      )
     "Src"
     (("/" org-babel-demarcate-block "split src block")
      ("t" org-babel-tangle "tangle")
      )
     "Links"
     (("l" org-store-link "store link")
      ("i" org-insert-link "insert link")
      )
     "Misc"
     (
      ("x" org-toggle-checkbox "List [x]")
      ("Y" org-download-clipboard "pbpaste")
      )
     )
    )
  )
#+end_src

** Electric pairs

#+begin_src emacs-lisp
(after! smartparens
  (sp-local-pair 'org-mode "~" "~")
  ;; (sp-local-pair 'org-mode "=" "=")
  ;; (sp-local-pair 'org-mode "$" "$")
  )
#+end_src

** show delimiters

#+begin_src emacs-lisp :tangle packages.el
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))
#+end_src


#+begin_src emacs-lisp
(use-package! org-appear
  :after org
  :custom (
           (org-appear-autoemphasis t)
           (org-appear-autolinks t)
           (org-appear-autosubmarkers t)
           (org-appear-autoentities t)
           )
  :hook (org-mode . org-appear-mode)
  )
#+end_src

** tangle on save

*** Use auto-tangle

+Fails with /sudo tangle files https://github.com/yilkalargaw/org-auto-tangle/issues/9+

Fails with `:comments both` and certain modes:
https://github.com/yilkalargaw/org-auto-tangle/issues/11, but so does "Custom
async tangle" below.

The "After save hook" version is synchronous and has no problems.

+<2022-07-08 Fri> Pinned to c208036 to see if 'max-lisp-eval-depth' errors were caused by https://github.com/yilkalargaw/org-auto-tangle/commit/5b6071c5649ed648c97cd2deebf74fe633f7f0d0+

#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle :recipe (:host github :repo "yilkalargaw/org-auto-tangle"))
#+end_src

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :after-call doom-first-buffer-hook
  :config
  (setq org-auto-tangle-default t)      ;this doesn't work with :custom
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

*** COMMENT After save hook
#+begin_src emacs-lisp
(add-hook! org-mode :append
  (add-hook! after-save :append :local #'org-babel-tangle))
#+end_src

**** COMMENT Fall through from auto-tangle to org-babel-tangle

See https://github.com/yilkalargaw/org-auto-tangle/issues/9#issuecomment-1048465648 && https://github.com/yilkalargaw/org-auto-tangle/issues/11

For such situations, we may want #+auto_tangle: nil to cause the
org-babel-tangle after save hook to get set. Here's some example code to get
started:

#+begin_src emacs-lisp
(let ((will_auto_tangle (let (
                            (auto_tangle_extracted_assoc
                             ;; uniquify auto_tangle; org-collect-keywords capitalizes; returns ("AUTO_TANGLE" . "nil") or ("AUTO_TANGLE" . "t")
                             (assoc "AUTO_TANGLE" (org-collect-keywords '("auto_tangle") '("auto_tangle"))))
                            )
                            (if
                                (eq auto_tangle_extracted_assoc nil)    ;not found
                                org-auto-tangle-default           ;default
                              (cdr auto_tangle_extracted_assoc)         ;else whatever was found
                              )
                            )
                            ))
                                        ;can be nil or "nil" or "t" or t, convert "nil" to nil
                            (if (equal will_auto_tangle "nil") nil will_auto_tangle)
  )
#+end_src
** Images


#+begin_src emacs-lisp :tangle packages.el
(package! org-download)
#+end_src

#+begin_src emacs-lisp
(after! org
  (setq org-download-method 'directory
        org-download-image-dir "org-images"
        org-download-heading-lvl nil
        org-download-timestamp "%Y%m%d-%H%M%S_"
        org-startup-with-inline-images t
        org-image-actual-width 300))
#+end_src
** Reformatting an Org buffer

(originally:
https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/ A
function that reformats the current buffer by regenerating the text from its
internal parsed representation. Quite amazing.)

#+begin_src emacs-lisp
(after! org
  (defun vi/org-reformat-buffer ()
    (interactive)
    (when (y-or-n-p "Really format current buffer? ")
      (let ((document (org-element-interpret-data (org-element-parse-buffer))))
        (erase-buffer)
        (insert document)
        (goto-char (point-min))))))
#+end_src

** Useful functions

*** misc
#+begin_src emacs-lisp
(after! org
  ;; http://emacs.stackexchange.com/a/10712/115
  (defun modi/org-delete-link ()
    "Replace an Org link of the format [[LINK][DESCRIPTION]] with DESCRIPTION.
If the link is of the format [[LINK]], delete the whole Org link.

In both the cases, save the LINK to the kill-ring.

Execute this command while the point is on or after the hyper-linked Org link."
    (interactive)
    (when (derived-mode-p 'org-mode)
      (let ((search-invisible t) start end)
        (save-excursion
          (when (re-search-backward "\\[\\[" nil :noerror)
            (when (re-search-forward "\\[\\[\\(.*?\\)\\(\\]\\[.*?\\)*\\]\\]"
                                     nil :noerror)
              (setq start (match-beginning 0))
              (setq end   (match-end 0))
              (kill-new (match-string-no-properties 1)) ;Save link to kill-ring
              (replace-regexp "\\[\\[.*?\\(\\]\\[\\(.*?\\)\\)*\\]\\]" "\\2"
                              nil start end)))))))

  (defun modi/lower-case-org-keywords ()
    "Lower case Org keywords and block identifiers.

Example: \"#+TITLE\" -> \"#+title\"
         \"#+BEGIN_EXAMPLE\" -> \"#+begin_example\"

Inspiration:
https://code.orgmode.org/bzg/org-mode/commit/13424336a6f30c50952d291e7a82906c1210daf0."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((case-fold-search nil)
            (count 0))
        ;; Match examples: "#+FOO bar", "#+FOO:", "=#+FOO=", "~#+FOO~",
        ;;                 "‘#+FOO’", "“#+FOO”", ",#+FOO bar",
        ;;                 "#+FOO_bar<eol>", "#+FOO<eol>".
        (while (re-search-forward "\\(?1:#\\+[A-Z_]+\\(?:_[[:alpha:]]+\\)*\\)\\(?:[ :=~’”]\\|$\\)" nil :noerror)
          (setq count (1+ count))
          (replace-match (downcase (match-string-no-properties 1)) :fixedcase nil nil 1))
        (message "Lower-cased %d matches" count))))
)
#+end_src

*** Archive all done tasks
#+begin_src emacs-lisp
(after! org
  ;; https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command
  (defun vi/org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'tree))
)
#+end_src

*** COMMENT org-return-dwim
https://github.com/alphapapa/unpackaged.el#org-return-dwim

+Bound to "M-RET" in org-mode-map+ some weird error with org-at-heading-p

#+begin_src emacs-lisp
(after! org
  (defun unpackaged/org-element-descendant-of (type element)
    "Return non-nil if ELEMENT is a descendant of TYPE.
TYPE should be an element type, like `item' or `paragraph'.
ELEMENT should be a list like that returned by `org-element-context'."
    ;; MAYBE: Use `org-element-lineage'.
    (when-let* ((parent (org-element-property :parent element)))
      (or (eq type (car parent))
          (unpackaged/org-element-descendant-of type parent))))

  ;;;###autoload
  (defun unpackaged/org-return-dwim (&optional default)
    "A helpful replacement for `org-return'.  With prefix, call `org-return'.

On headings, move point to position after entry content.  In
lists, insert a new item or end the list, with checkbox if
appropriate.  In tables, insert a new row or end the table."
    ;; Inspired by John Kitchin: http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/
    (interactive "P")
    (if default
        (org-return)
      (cond
       ;; Act depending on context around point.

       ;; NOTE: I prefer RET to not follow links, but by uncommenting this block, links will be
       ;; followed.

       ;; ((eq 'link (car (org-element-context)))
       ;;  ;; Link: Open it.
       ;;  (org-open-at-point-global)
)
       ((org-at-heading-p)
        ;; Heading: Move to position after entry content.
        ;; NOTE: This is probably the most interesting feature of this function.
        (let ((heading-start (org-entry-beginning-position)))
          (goto-char (org-entry-end-position))
          (cond ((and (org-at-heading-p)
                      (= heading-start (org-entry-beginning-position)))
                 ;; Entry ends on its heading; add newline after
                 (end-of-line)
                 (insert "\n\n"))
                (t
                 ;; Entry ends after its heading; back up
                 (forward-line -1)
                 (end-of-line)
                 (when (org-at-heading-p)
                   ;; At the same heading
                   (forward-line)
                   (insert "\n")
                   (forward-line -1))
                 ;; FIXME: looking-back is supposed to be called with more arguments.
                 (while (not (looking-back (rx (repeat 3 (seq (optional blank) "\n")))))
                   (insert "\n"))
                 (forward-line -1)))))

       ((org-at-item-checkbox-p)
        ;; Checkbox: Insert new item with checkbox.
        (org-insert-todo-heading nil))

       ((org-in-item-p)
        ;; Plain list.  Yes, this gets a little complicated...
        (let ((context (org-element-context)))
          (if (or (eq 'plain-list (car context))  ; First item in list
                  (and (eq 'item (car context))
                       (not (eq (org-element-property :contents-begin context)
                                (org-element-property :contents-end context))))
                  (unpackaged/org-element-descendant-of 'item context))  ; Element in list item, e.g. a link
              ;; Non-empty item: Add new item.
              (org-insert-item)
            ;; Empty item: Close the list.
            ;; TODO: Do this with org functions rather than operating on the text. Can't seem to find the right function.
            (delete-region (line-beginning-position) (line-end-position))
            (insert "\n"))))

       ((when (fboundp 'org-inlinetask-in-task-p)
          (org-inlinetask-in-task-p))
        ;; Inline task: Don't insert a new heading.
        (org-return))

       ((org-at-table-p)
        (cond ((save-excursion
                 (beginning-of-line)
                 ;; See `org-table-next-field'.
                 (cl-loop with end = (line-end-position)
                          for cell = (org-element-table-cell-parser)
                          always (equal (org-element-property :contents-begin cell)
                                        (org-element-property :contents-end cell))
                          while (re-search-forward "|" end t)))
               ;; Empty row: end the table.
               (delete-region (line-beginning-position) (line-end-position))
               (org-return))
              (t
               ;; Non-empty row: call `org-return'.
               (org-return))))
       (t
        ;; All other cases: call `org-return'.
        (org-return)))))
#+end_src
** Import from various formats into org



#+begin_src emacs-lisp :tangle packages.el
(package! org-pandoc-import :recipe (:host github :repo "tecosaur/org-pandoc-import" :files ("*.el" "filters" "preprocessors")))
#+end_src

Needs ~brew install pandoc~

#+begin_src emacs-lisp
(use-package! org-pandoc-import :after-call doom-first-file-hook)
#+end_src

** literate calc

#+begin_src emacs-lisp :tangle packages.el
(package! literate-calc-mode)
#+end_src

Let's use this with file-locals instead

#+begin_src emacs-lisp
;; (add-hook! org-mode #'literate-calc-minor-mode)
#+end_src


*** COMMENT poly-literate-calc



#+begin_src emacs-lisp :tangle packages.el
(package! poly-literate-calc
  :recipe (:local-repo "lisp/poly-literate-calc" :build (:not compile)));; :host github :repo "indigoviolet/poly-literate-calc"))
#+end_src


#+begin_src emacs-lisp
(use-package! poly-literate-calc)
#+end_src


** COMMENT super-agenda


#+begin_src emacs-lisp :tangle packages.el
(package! org-super-agenda)
#+end_src


#+begin_src emacs-lisp
(after! org
  (org-super-agenda-mode)
  )
#+end_src
** sh-mode src blocks

sh-mode uses $SHELL by default: https://list.orgmode.org/87eeg0tz6t.fsf@gmail.com/T/

#+begin_src emacs-lisp
(after! org
  (defun org-babel-bash-mode ()
    (sh-mode)
    (sh-set-shell "bash"))

  (add-to-list 'org-src-lang-modes '("bash" . org-babel-bash))
  )
#+end_src

** org babel chaining

https://xenodium.com/emacs-chaining-org-babel-blocks/

#+begin_src emacs-lisp
(defun adviced:org-babel-execute-src-block (&optional orig-fun arg info params)
  (let ((body (nth 1 info))
        (include (assoc :include (nth 2 info)))
        (named-blocks (org-element-map (org-element-parse-buffer)
                          'src-block (lambda (item)
                                       (when (org-element-property :name item)
                                         (cons (org-element-property :name item)
                                               item))))))
    (while include
      (unless (cdr include)
        (user-error ":include without value" (cdr include)))
      (unless (assoc (cdr include) named-blocks)
        (user-error "source block \"%s\" not found" (cdr include)))
      (setq body (concat (org-element-property :value (cdr (assoc (cdr include) named-blocks)))
                         body))
      (setf (nth 1 info) body)
      (setq include (assoc :include
                           (org-babel-parse-header-arguments
                            (org-element-property :parameters (cdr (assoc (cdr include) named-blocks)))))))
    (funcall orig-fun arg info params)))

(advice-add 'org-babel-execute-src-block :around 'adviced:org-babel-execute-src-block)
#+end_src

#+results[b30c1b41ccddc21305a1d13530fcaa6911029689]:

** table of contents

#+begin_src emacs-lisp :tangle packages.el
(package! org-make-toc)
#+end_src

*** COMMENT minor mode

disabled because it is noisy on startup, and used rarely (<2022-03-21 Mon>)
#+begin_src emacs-lisp
(after! org
  (add-hook! org-mode #'org-make-toc-mode))
#+end_src

** calendar

#+begin_src emacs-lisp
(after! org
   (defmacro vi/org-in-calendar (command)
     (let ((name (intern (format "vi/org-in-calendar-%s" command))))
       `(progn
          (defun ,name ()
            (interactive)
            (org-eval-in-calendar ,command))
          #',name)))

   (map! :map org-read-date-minibuffer-local-map
         "<right>" (vi/org-in-calendar '(calendar-forward-day 1))
         "<left>" (vi/org-in-calendar '(calendar-backward-day 1))
         ">" (vi/org-in-calendar '(calendar-forward-month 1))
         "<" (vi/org-in-calendar '(calendar-backward-month 1))
         "." (vi/org-in-calendar '(calendar-goto-today)))
)
#+end_src

* emacs-jupyter
** fontification

https://github.com/nnicandro/emacs-jupyter/issues/366#issuecomment-985758277

#+begin_src emacs-lisp
(after! org
  (defun display-ansi-colors ()
    (ansi-color-apply-on-region (point-min) (point-max)))

  (add-hook! org-babel-after-execute #'display-ansi-colors)
  )
#+end_src

** COMMENT envrc interaction

https://github.com/nnicandro/emacs-jupyter/issues/387

doesn't work


#+begin_src emacs-lisp
(after! org
  (add-hook! org-mode
    (defun fix-with-temp-buffer ()
      (inheritenv-add-advice #'with-temp-buffer)
      )
    ))
#+end_src
* ein

#+begin_src emacs-lisp :tangle packages.el
(package! ein :pin "6063cee")
#+end_src

#+begin_src emacs-lisp
(defun vi/ein-fix ()
  (interactive)
  ;; (set-face-extend 'ein:cell-input-area t)
  (setq ein:worksheet-enable-undo t)
  (buffer-enable-undo)
  ;; (turn-on-undo-tree-mode)
  (setq outline-regexp "##+")           ;capture markdown headings, excluding level 1 for comments
  )

(use-package! ein
  :after-call doom-first-buffer-hook
  :init
  (setq ein:polymode t)
  (setq ein:notebooklist-render-order '(render-opened-notebooks render-directory render-header))
  (setq ein:truncate-long-cell-output 10000)
  (setq ein:cell-max-num-outputs 10000)
  (setq markdown-header-scaling t)
  (setq ein:output-area-inlined-images t)
  (setq ein:url-or-port '("http://localhost:8888"))
  (setq ein:jupyter-server-args '("--no-browser" "--port=8889"))
  ;; https://github.com/millejoh/emacs-ipython-notebook/issues/423#issuecomment-458254069
  (setq ein:query-timeout nil)
  :config
  (defun vi/ein-toggle-inlined-images ()
    (interactive)
    (setq ein:output-area-inlined-images (if ein:output-area-inlined-images nil t))
    )

  (defun vi/restart-and-execute-all-above ()
    (interactive)
    ;; This is required for lexical-let
    (eval-when-compile (require 'cl))
    (aif (ein:get-notebook)
        (lexical-let ((ws (ein:worksheet--get-ws-or-error)))
          (ein:kernel-delete-session
           (lambda (kernel)
             (ein:events-trigger (ein:$kernel-events kernel) 'status_restarting.Kernel)
             (ein:kernel-retrieve-session kernel 0
                                          (lambda (kernel)
                                            (ein:events-trigger (ein:$kernel-events kernel) 'status_restarted.Kernel)
                                            (ein:worksheet-execute-all-cells-above ws))))
           :kernel (ein:$notebook-kernel it)))
      (message "Not in notebook buffer!"))
    )

  (defun vi/revert-notebook ()
    (interactive)
    (aif (ein:get-notebook)
        (let (
              (nurl (ein:$notebook-url-or-port it))
              (npath (ein:$notebook-notebook-path it))
              )
          (ein:notebook-close it)
          (ein:notebook-open nurl npath)
          )))

  :pretty-hydra
  (
   (
    "Connect"
    (("n" ein:notebooklist-open "Notebook list")
     ("l" ein:notebooklist-login "Login")
     ("s" ein:jupyter-server-start "Start")
     ("t" ein:jupyter-server-stop "Stop"))
    "Reconnect"
    (("r" ein:notebook-reconnect-session-command "Reconnect")
     ("R" ein:notebook-restart-session-command "Restart")
     ("z" ein:notebook-kernel-interrupt-command "interrupt")
     ("v" vi/revert-notebook "Revert"))
    "Exec"
    (("x" ein:worksheet-execute-all-cells-above "Execute all above")
     ("X" vi/restart-and-execute-all-above "Restart & x"))
    "Fix"
    (("i" vi/ein-toggle-inlined-images "Toggle inlined images")
     ("f" vi/ein-fix "Fix")
     ("N" ein:notebook-rename-command "Rename")
     )
    )
   ))

(add-hook! 'ein:notebook-mode-hook #'vi/ein-fix)

;; Unsets M-n in ein polymode (which is normally bound to polymode-map) so that
;; we can use our smartscan-mode bindings
(map! :mode poly-ein-mode
      :map polymode-mode-map
      "M-n" nil)
#+end_src

* vterm



#+begin_src emacs-lisp
(setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
(use-package! vterm
  :custom
  (vterm-max-scrollback 100000)
  (vterm-buffer-name-string "vterm: %s")
  :bind
  (
   :map vterm-mode-map
   ("M-j" . nil)
   ("M-k" . nil)
   ("S-<left>" . windmove-left)
   ("S-<right>" . windmove-right)
   ("S-<up>" . windmove-up)
   ("S-<down>" . windmove-down)
   ("C-c C-r" . vterm-send-C-r)
   )
  )

(after! (doom-modeline vterm)
  (doom-modeline-def-segment vterm-copy-mode
    "Returns 'Copy' when vterm-copy-mode is active"
    (when
        (and (eq major-mode 'vterm-mode) vterm-copy-mode)
      (concat (doom-modeline-spc) "Copy")))


  (doom-modeline-def-modeline 'vi/vterm
    '(bar vterm-copy-mode selection-info remote-host)
    '(purpose persp-name minor-modes major-mode))

  (remove-hook 'vterm-mode-hook #'hide-mode-line-mode)

  ;; This actually doesn't work with popper because it restores it to the old format
  (add-hook! 'vterm-mode-hook
             (doom-modeline-set-modeline 'vi/vterm))

  ;; (defun vi/vterm-copy ()
  ;; ;; shows in the misc-info segment
  ;; (add-to-list 'global-mode-string '(:eval (vi/vterm-copy)))
  )

(defun vi/vterm-hooks ()
  ;; linkify urls
  ;; (goto-address-mode)
  ;; Don't highlight trailing whitespace
  (whitespace-mode -1)
  ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Query-Before-Exit.html
  (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)
  )
(add-hook! 'vterm-mode-hook #'vi/vterm-hooks)

#+end_src

** COMMENT multi-vterm

- <2022-07-10 Sun> Using +vterm/here, +vterm/toggle instead


#+begin_src emacs-lisp :tangle packages.el
(package! multi-vterm :recipe (:host github :repo "suonlight/multi-vterm"))
;; (package! vterm-toggle :recipe (:host github :repo "jixiuf/vterm-toggle"))
#+end_src

#+begin_src emacs-lisp

(use-package! multi-vterm
  :custom
  (multi-vterm-buffer-name "vterm: %s")
  :commands (multi-vterm-next multi-vterm))


#+end_src

** wrapping issues

https://github.com/akermu/emacs-libvterm/issues/179

- can set `vterm-min-window-width` to 1000 and `toggle-truncate-lines`
- but this makes `ls`, `fzf`, `htop` etc weird
- so we can run `stty cols 250` before running such commands
- we cannot get the current emacs window width (https://github.com/akermu/emacs-libvterm/issues/577)
- best we can do is maybe hook `frame-width` to `setenv` so that new vterms have some variable with the full width of emacs, and then use 1/2 or 1/3 of that with `stty`. or hard code 250.

  we might also be able to use `window-min-width` to prevent splitting too much?
  this appears to work with `zoom-mode`.

  Also see https://github.com/cyrus-and/zoom for information on
  `window-size-fixed` and preventing zoom from resizing?




* Flycheck

#+begin_src emacs-lisp
(use-package! flycheck
  :after-call doom-first-buffer-hook
  :custom
  (flycheck-check-syntax-automatically '(mode-enabled save idle-change idle-buffer-switch))
  (flycheck-idle-change-delay 10)
  (flycheck-idle-buffer-switch-delay 5)
  (flycheck-highlighting-style '(conditional 10 level-face (delimiters "" "")))
  :pretty-hydra
  (
   (:exit t)
   (
    "Flycheck"
    (
    ("c" flycheck-buffer "check buffer")
    ("l" (consult-lsp-diagnostics t) "file errors")
    ("p" flycheck-projectile-list-errors "project errors")
    ("L" consult-flycheck "consult")
    ("d" (flycheck-mode -1) "Disable Flycheck")
    ("e" (flycheck-mode) "Enable Flycheck")
    ("q" nil "quit")
     )
    )
   )
  )
#+end_src

** flycheck-projectile

#+begin_src emacs-lisp :tangle packages.el
(package! flycheck-projectile)
#+end_src

* magit/git

#+begin_src emacs-lisp
(after! magit
  ;; Set magit log date formats
  (setq magit-log-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))

  ;; Add ignored files section to magit status
  (magit-add-section-hook 'magit-status-sections-hook
                          'magit-insert-ignored-files       ;insert this one
                          'magit-insert-unstaged-changes t) ;after this one
  )
#+end_src

** magit backups (wip)

#+begin_src emacs-lisp
(add-hook! 'doom-first-file-hook #'magit-wip-mode)
#+end_src

<2022-07-11 Mon> Unfortunately this doesn't seem to work in Yadm files because they don't get recognized as git repos by default ([[*Yadm][Yadm]])

* Yadm
** COMMENT Handle bare repos (yadm/$HOME)

Yadm (yadm.io) keeps its git directory in .local/share/yadm/repo.git (found this
by running =yadm=). This teaches Magit to use the right git directory for $HOME

https://github.com/magit/magit/issues/460#issuecomment-837449105

<2022-07-11 Mon> I think this doesn't actually work for yadm since we keep files in subdirectories of $HOME


#+begin_src emacs-lisp
(defun home-magit-process-environment (env)
  "Add GIT_DIR and GIT_WORK_TREE to ENV when in a special directory.
https://github.com/magit/magit/issues/460 (@cpitclaudel)."
  (let ((default (file-name-as-directory (expand-file-name default-directory)))
        (home (expand-file-name "~/")))
    (when (string= default home)
      (let ((gitdir (expand-file-name "~/.local/share/yadm/repo.git/")))
        (push (format "GIT_WORK_TREE=%s" home) env)
        (push (format "GIT_DIR=%s" gitdir) env))))
  env)

(advice-add 'magit-process-environment
            :filter-return #'home-magit-process-environment)
#+end_src

** COMMENT Another broken approach: using direnv

Similar to [[*Handle bare repos (yadm/$HOME)][Handle bare repos (yadm/$HOME)]], we could try to set GIT_DIR and
GIT_WORK_TREE via $HOME/.envrc, but this is problematic because

1. magit will unset them on startup: https://github.com/magit/magit/wiki/Don't-set-$GIT_DIR-and-alike
2. a new git directory without .envrc will default to the yadm repo, which is scary (actually maybe not: git init in an existing repo is safe..)

** Using Tramp for magit/yadm

See https://www.reddit.com/r/emacs/comments/gjukb3/yadm_magit/gasc8n6/

#+begin_src emacs-lisp
(use-package! tramp
  :after-call doom-first-input-hook
  :config
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter")))
                 (tramp-remote-shell "/bin/bash")
                 (tramp-remote-shell-args ("-c"))))
  (defun yadm-status ()
    (interactive)
    (require 'tramp)
    (with-current-buffer (magit-status "/yadm::"))))
#+end_src
** Stage files from dired

TODO: Use https://github.com/conao3/dired-git.el instead for the git portion of
this. I wonder if it will also "just" work for the yadm case if I'm using
/yadm:: dired via tramp

https://gist.github.com/justinhj/5945047
#+begin_src emacs-lisp

(defun git-add-files(files)
  "Run git add with the input file"
  (shell-command (format "git add %s" files)))

(defun yadm-add-files(files)
  "Run git add with the input file"
  (let ((default-directory "~/"))
    (shell-command (format "yadm add %s" files))))

(defun dired-git-add-marked-files()
  "For each marked file in a dired buffer add it to the index"
  (interactive)
  (if (eq major-mode 'dired-mode)
      (let ((filenames (dired-get-marked-files))
	    (files ""))
	(dolist (fn filenames)
	  (setq fn (shell-quote-argument fn))
	  (setq files (concat files " " fn)))
	(git-add-files files))
    (error (format "Not a Dired buffer \(%s\)" major-mode))))

(defun dired-yadm-add-marked-files()
  "For each marked file in a dired buffer add it to the index"
  (interactive)
  (if (eq major-mode 'dired-mode)
      (let ((filenames (dired-get-marked-files))
	    (files ""))
	(dolist (fn filenames)
	  (setq fn (shell-quote-argument fn))
	  (setq files (concat files " " fn)))
	(yadm-add-files files))
    (error (format "Not a Dired buffer \(%s\)" major-mode))))
#+end_src
* LSP


#+begin_src emacs-lisp
(use-package! lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")

  :custom
  ;; We prefer to use TabNine::sem
  (lsp-completion-mode -1)
  (lsp-completion-enable nil)
  (lsp-enable-snippet nil)
  (lsp-prefer-capf nil)
  ;; https://emacs-lsp.github.io/lsp-mode/page/settings/
  (lsp-auto-configure t)
  (lsp-enable-imenu t)
  (lsp-signature-auto-activate t)
  (lsp-headerline-breadcrumb-enable t)
  (lsp-headerline-breadcrumb-enable-diagnostics nil)
  (lsp-keep-workspace-alive nil)
  (lsp-semantic-tokens-enable nil)      ;no semantic highlighting: rainbow-identifiers
  (lsp-symbol-highlighting-skip-current t)
  (lsp-enable-xref nil)
  (lsp-lens-enable t)
  (lsp-disabled-clients '((python-mode . '(pyls pylsp mspyls))))

    ;; This will disable the flycheck checkers. (we use them directly to have better control)
  ;; (lsp-diagnostics-provider :flycheck)

  ;; https://github.com/emacs-lsp/lsp-mode#performance
  (read-process-output-max (* 1024 1024)) ;; 1mb
  (lsp-file-watch-threshold 2000)

  :config
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.venv\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.mypy_cache\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]wandb\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]__pycache__\\'")

  ;; Fix the hint diagnostic to display as faded out, not error  (https://github.com/emacs-lsp/lsp-mode/issues/3104)
  ;; Unrelated error: Invalid face reference: lsp-flycheck-info-unnecessary (https://github.(com/emacs-lsp/lsp-mode/issues/2255)
  (add-hook! 'lsp-diagnostics-updated-hook
             ;; For some reason, this face is only defined after the
             ;; lsp-diagnostics-updated-hook, so this will fail the first time
             ;; through
    (if (facep 'lsp-lsp-flycheck-info-unnecessary-face)
        (set-face-attribute 'lsp-lsp-flycheck-info-unnecessary-face nil :foreground "gray30" :underline nil)))

  :pretty-hydra
  ((
    "LSP"
    (("?" lsp-find-references "Find references")
     ("." lsp-find-definition "Find definition")
     ("," lsp-find-type-definition "Find type"))
     ;; ("e" lsp-treemacs-errors-list "Errors"))
    )
   )
  :after-call doom-first-buffer-hook
  :hook (
         (python-mode . lsp-deferred)
         (c++-mode . vi/setup-c++-lsp)
         (lsp-mode . lsp-enable-which-key-integration)
         ;; (lsp-mode . lsp-treemacs-sync-mode)
         )
  :commands (lsp lsp-deferred))


(use-package! lsp-ui
  :after-call doom-first-buffer-hook
  :custom

  ;; sideline
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-sideline-show-symbol nil)
  (lsp-ui-sideline-show-diagnostics t)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-delay 1)
  ;; doc
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-include-signature nil)
  (lsp-ui-doc-show-with-cursor t)
  (lsp-ui-doc-header nil)
  (lsp-ui-doc-delay 1)
  ;; peek
  (lsp-ui-peek-enable t)
  ;; imenu
  ;; (lsp-ui-imenu-window-width 30)
  ;; (lsp-ui-imenu-auto-refresh t)
  ;; :config
  ;; (defun vi/lsp-ui-imenu ()
  ;;   (interactive)
  ;;   (lsp-ui-imenu)
  ;;   (window-preserve-size (get-buffer-window lsp-ui-imenu-buffer-name) t t)
  ;;   )
  )
#+end_src

** COMMENT treemacs/lsp
#+begin_src emacs-lisp :tangle packages.el
(package! lsp-treemacs)
#+end_src



#+begin_src emacs-lisp
(use-package! lsp-treemacs
  :after-call doom-first-buffer-hook
  :custom
  (lsp-treemacs-sync-mode 1)
  )
#+end_src
* Tree sitter

#+begin_src emacs-lisp :tangle packages.el
(package! tree-sitter)
(package! tree-sitter-langs)
#+end_src

* C++

** ccls vs clangd

doom-emacs default c++ lsp server is ccls. (See https://github.com/hlissner/doom-emacs/issues/2689)

Switching to clangd seems to require some or all of the following:

1. Disable ccls package

#+begin_src emacs-lisp
;; (disable-packages! ccls)
#+end_src

1. Do not reference ccls in vi/setup-c++-lsp
2. Ensure that clangd is installed
3. After loading lsp, in *scratch* buffer, execute ~(set-lsp-priority! 'clangd 1)~

   Doing this in config.org seems to result in "nil" lsp server name somewhere.
4. +lsp/switch-client to clangd

** Turn off lens

Lens shows refs for each variable in an overlay which is annoying. Also duplicated between lsp-lens and ccls-code-lens

#+begin_src emacs-lisp
(defun vi/setup-c++-lsp ()
  ;; For now we are using ccls, might want to try clangd someday. ccls is
  ;; default in doom-emacs, switching to clangd didn't work out of the box.
  (setq-local lsp-lens-enable nil)
  (remove-hook! lsp-lens-mode #'ccls-code-lens-mode)
  (ccls-code-lens-mode -1)
  )
#+end_src
* Python

#+begin_src emacs-lisp
(defun vi/setup-python-flycheck ()
  (setq-local flycheck-python-mypy-executable (concat (projectile-project-root) "/.venv/bin/mypy"))
  ;; This needs to happen after lsp else:
  ;; Error (python-mode-hook): Error running hook "vi/setup-python-flycheck" because: (user-error lsp is not a syntax checker)
  (flycheck-select-checker 'lsp)

  ;; Not sure if we need flake8 - it pegs the CPU on some buffers
  ;; (flycheck-add-next-checker 'lsp 'python-flake8-vi)

  ;; Why do we still have mypy? The theory is that it gives some better messages complementary to pyright
  (flycheck-add-next-checker 'lsp 'python-mypy-vi)

  ;; Check if the file is broken
  (flycheck-add-next-checker 'lsp 'python-pycompile)

  ;; we could disable mypy as well, since pyright does most of it, but pyright doesn't support attrs yet?
  (setq-local flycheck-disabled-checkers '(python-pylint python-mypy))
  )
#+end_src

** Diagnostics filter hints
#+begin_src emacs-lisp
(defun vi/diag-matches-p (d sev tag)
  (and (equal sev (ht-get d "severity"))
       ;; handle nil ~tag~; convert ~tags~ from vector to list
       (if tag (-contains? (append (ht-get d "tags") nil) tag) t)))

(defun vi/filter-lsp-diagnostics (diag severity tag)
  ;; ~diag~ will be a hash table with keys (diagnostics, uri) (ie. PublishDiagnosticsParams when called from lsp-diagnostic-filter)
  ;;
  ;; where each diagnostic is a hashtable with keys ~("range", "message", "severity", "tags", "source")~
  ;;
  ;; severity: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticSeverity
  ;; tags: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticTag
  ;;
  ;; Note that ~(lsp-diagnostics)~ is not identical to PublishDiagnosticsParams:
  ;;
  ;; - PublishDiagnosticsParams has keys (uri, diagnostics), while lsp-diagnostics returns a hash table {uri: [diagnostics]}
  ;; - PublishDiagnosticsParams[diagnostics] is a vector, not a list
  ;;
  ;; #+begin_example
  ;; (ht-get* (-second-item (-second-item (ht-values (lsp-diagnostics)))) "message")
  ;; #+end_example
  ;;

  ;;
  (require 'ht)
  (require 'dash)
  ;; mutate diag to remove any diagnostics that match severity/tag
  ;; For each item in ~diag~:
  (-let* ((diagnostics (append (ht-get diag "diagnostics") nil))
          (filtered (--remove (vi/diag-matches-p it severity tag) diagnostics)))
     ;; update diag with filtered list
    (ht-set! diag "diagnostics" filtered)
    diag))
#+end_src

** LSP setup
#+begin_src emacs-lisp
(defun vi/python-mode-lsp ()

  ;;;; EDIT: this also filters out the visual rendering (https://discord.com/channels/789885435026604033/789890622424219658/993942950331551814)
  ;;;; Filter out "lsp-info-flycheck-"
  ;;;; severity=4 ("hint"), tag=1 ("unnecessary") -- see vi/filter-tag-diagnostics for reference
  ;; (setq-local lsp-diagnostic-filter (lambda (param work) (vi/filter-lsp-diagnostics param 4 1)))

  ;; So that lsp is available as a checker
  (add-hook! 'lsp-after-open-hook #'vi/setup-python-flycheck)

  ;; we prefer rainbow-delimiters-mode
  ;; (tree-sitter-hl-mode)
  )

(add-hook! 'python-mode-hook #'vi/python-mode-lsp)

;; even switch-buffer is slow. and we use direnv anyway
;; (after! poetry
;;   (setq poetry-tracking-strategy 'switch-buffer)
;;   )
#+end_src


** Flycheck checkers

*** Define flake8 checkers (for file and project)

- the builtin flake8 has to be configured via flake8rc, and I want a python-flake8-project-vi anyway
- also the builtin flake8 looks for setup.cfg instead of projectile-project-root for :working-directory
- filters flake8 to only pyflakes errors
- skips .venv directory

#+begin_src emacs-lisp
(after! flycheck
  (flycheck-define-checker python-flake8-vi
    "flake8 -> pyflakes "

    :command ("flake8"
              "--format" "default"
              "--select" "F"                ;only pyflakes
              "--extend-exclude" ".venv"  ;no venvs
              (config-file "--append-config" flycheck-flake8rc)
              (option "--max-complexity" flycheck-flake8-maximum-complexity nil
                      flycheck-option-int)
              (option "--max-line-length" flycheck-flake8-maximum-line-length nil
                      flycheck-option-int)
              source-original)
    :working-directory (lambda (_) (projectile-project-root))
    :error-filter (lambda (errors)
                    (let ((errors (flycheck-sanitize-errors errors)))
                      (seq-map #'flycheck-flake8-fix-error-level errors)))
    :error-patterns
    ((warning line-start
              (file-name) ":" line ":" (optional column ":") " "
              (id (one-or-more (any alpha)) (one-or-more digit)) " "
              (message (one-or-more not-newline))
              line-end))
    :modes python-mode
    )

  (add-to-list 'flycheck-checkers 'python-flake8-vi)

  (flycheck-define-checker python-flake8-project-vi
    "flake8 -> pyflakes, and running on whole project"

    ;; Not calling flake8 directly makes it easier to switch between different
    ;; Python versions; see https://github.com/flycheck/flycheck/issues/1055.
    :command ("flake8"
              "--format" "default"
              "--select" "F"                ;only pyflakes
              "--extend-exclude" ".venv"  ;no venvs
              (config-file "--append-config" flycheck-flake8rc)
              (option "--max-complexity" flycheck-flake8-maximum-complexity nil
                      flycheck-option-int)
              (option "--max-line-length" flycheck-flake8-maximum-line-length nil
                      flycheck-option-int)
              "."
              )
    :working-directory (lambda (_) (projectile-project-root))
    :error-filter (lambda (errors)
                    (let ((errors (flycheck-sanitize-errors errors)))
                      (seq-map #'flycheck-flake8-fix-error-level errors)))
    :error-patterns
    ((warning line-start
              (file-name) ":" line ":" (optional column ":") " "
              (id (one-or-more (any alpha)) (one-or-more digit)) " "
              (message (one-or-more not-newline))
              line-end))
    :modes python-mode
    )

  (add-to-list 'flycheck-checkers 'python-flake8-project-vi)
  )
#+end_src
*** Run mypy from projectile root dir

There are some weird errors that show up if you don't run mypy from the root directory

#+begin_src emacs-lisp
(after! flycheck
  (flycheck-define-checker python-mypy-vi
    "Mypy syntax and type checker (copied from flycheck, but with :working-directory)"
    :command ("mypy"
              "--show-column-numbers"
              (config-file "--config-file" flycheck-python-mypy-config)
              (option "--cache-dir" flycheck-python-mypy-cache-dir)
              source-original)
    :error-patterns
    ((error line-start (file-name) ":" line (optional ":" column)
            ": error:" (message) line-end)
     (warning line-start (file-name) ":" line (optional ":" column)
              ": warning:" (message) line-end)
     (info line-start (file-name) ":" line (optional ":" column)
           ": note:" (message) line-end))
    :working-directory (lambda (_) (projectile-project-root))
    :modes python-mode
    ;; Ensure the file is saved, to work around
    ;; https://github.com/python/mypy/issues/4746.
    :predicate flycheck-buffer-saved-p)

  (add-to-list 'flycheck-checkers 'python-mypy-vi))
#+end_src

*** Run mypy for the entire project

#+begin_src emacs-lisp
(after! flycheck
  (flycheck-define-checker python-mypy-project-vi
    "Mypy the entire project"
    :command ("mypy"
              "--show-column-numbers"
              (config-file "--config-file" flycheck-python-mypy-config)
              (option "--cache-dir" flycheck-python-mypy-cache-dir)
              "."
              )
    :error-patterns
    ((error line-start (file-name) ":" line (optional ":" column)
            ": error:" (message) line-end)
     (warning line-start (file-name) ":" line (optional ":" column)
              ": warning:" (message) line-end)
     (info line-start (file-name) ":" line (optional ":" column)
           ": note:" (message) line-end))
    :working-directory (lambda (_) (projectile-project-root))
    :modes python-mode
    )
  (add-to-list 'flycheck-checkers 'python-mypy-project-vi)
  )
#+end_src

** Hydra

#+begin_src emacs-lisp
(major-mode-hydra-define (python-mode python-pytest-mode) nil
  (
   "Pytest"
   (
    ("d" python-pytest-dispatch "Dispatch")
    ("r" python-pytest-repeat "Repeat")
    )
   "Misc"
   (("i" vi/pyflyby-tidy-imports "Imports"))
   )
  )
#+end_src
** Pyflyby


#+begin_src emacs-lisp
(use-package! pyflyby
  :load-path "~/.local/pipx/venvs/pyflyby/share/emacs/site-lisp"
  :config
  (defun vi/pyflyby-tidy-imports ()
    (interactive "*")
    (pyflyby-transform-region-with-command "tidy-imports" "--align=0" "--from-spaces=1")
    )
  )
#+end_src

* Formatting

[[https://github.com/lassik/emacs-format-all-the-code/issues/170#issuecomment-1079740651][See]] for some context on the comparison b/w apheleia and format-all available --
these may be merged in the near future. Based on the table there, we are
choosing b/w format-all (more formatters, synchronous, chaining), and apheleia
(fewer but maybe the ones we need, async, chaining).

In addition, there is doom-emacs' adaptation of format-all, which is [[https://github.com/hlissner/doom-emacs/issues/6203][old]], [[https://github.com/hlissner/doom-emacs/issues/4526][due
for a rewrite for a long while]], does not support multiple formatters. Calling
set-formatter! can silently break the chain (?)


#+begin_src emacs-lisp :tangle packages.el
(package! py-isort :disable t)
#+end_src

** apheleia


#+begin_src emacs-lisp :tangle packages.el
(package! apheleia)
#+end_src

#+begin_src emacs-lisp
(use-package! apheleia
  :after-call doom-first-buffer-hook
  :config
  (setf (alist-get 'isort apheleia-formatters) '("isort" "--profile=black" "--stdout" "-"))
  ;; Black uses config in ~/.config/black but not if a pyproject.toml is present (https://github.com/psf/black/issues/2863)
  (setf (alist-get 'black apheleia-formatters) '("black" "--config" (substitute-in-file-name "$HOME/.config/black") "-"))
  (setf (alist-get 'python-mode apheleia-mode-alist) '(isort black))
  (apheleia-global-mode)
  )
#+end_src

** COMMENT format-all (doom-emacs version)

This requires ~(format +onsave)~ to be uncommented in the ~doom!~ block

*** python

we want to use isort with black, but there is no real chaining.

so we attempt to use python-black-on-save-mode (for black), and set ~+format-with~
to ~'isort~, hoping that they will work together, but in practice isort doesn't
happen on save; only explicitly on ~+format/buffer~

#+begin_src emacs-lisp :tangle packages.el
(package! python-black)
#+end_src


#+begin_src emacs-lisp
(set-formatter! 'isort "isort --profile=black --stdout -")
(setq-hook! 'python-mode-hook +format-with-lsp nil)
(setq-hook! 'python-mode-hook +format-with 'isort)
(add-hook! 'python-mode-hook #'python-black-on-save-mode)
#+end_src

*** docker
dockfmt does a bad job: rips out comments, uses tabs.

#+begin_src emacs-lisp
(after! dockerfile-mode
  (setq-hook! 'dockerfile-mode-hook +format-with :none))
#+end_src
*** shell mode


#+begin_src emacs-lisp
(add-hook! '(sh-mode sh-set-shell-hook)
  (defun set-sh-formatter ()
    ;; never use lsp
    (setq-local +format-with-lsp nil)
    ;;  (message "Found: %S" sh-shell)
    (if (string-equal sh-shell "bash")

        ;; if bash :: use the default. we need to do this explicitly because the
        ;; var might get set to :none first, and then either sh-set-shell or a
        ;; local var might switch it
        (setq-local +format-with nil)
      ;; else :: don't format
      (setq-local +format-with :none))
    )
  )
#+end_src


*** javascript/typescript

#+begin_src emacs-lisp
(setq-hook! '(typescript-mode-hook rjsx-mode-hook) +format-with-lsp nil)
#+end_src


* Projectile


#+begin_src emacs-lisp
(use-package! projectile
  :custom
  (projectile-project-search-path '("~/dev"))
  (projectile-auto-discover t)
  (projectile-indexing-method 'alien)
  :config
  (add-to-list 'projectile-project-root-files "pyproject.toml")
  )
#+end_src
* Javascript/Typescript

#+begin_src emacs-lisp :tangle packages.el
(package! add-node-modules-path :recipe (:host github :repo "codesuki/add-node-modules-path"))
#+end_src

#+begin_src emacs-lisp
(add-hook! '(typescript-mode-hook rjsx-mode-hook) #'add-node-modules-path)
#+end_src


* Directory/Project navigation

** COMMENT Treemacs

#+begin_src emacs-lisp
(after! treemacs
  (setq treemacs-show-hidden-files nil
        treemacs-is-never-other-window nil)
  (treemacs-project-follow-mode t)
  (treemacs-follow-mode t)
  )
#+end_src

** dired

- [ ] todo: add hydra
- See dired-subtree [https://github.com/Fuco1/dired-hacks#dired-subtree] and dired-sidebar [https://github.com/jojojames/dired-sidebar]

*** sidebar

#+begin_src emacs-lisp :tangle packages.el
(package! dired-sidebar)
#+end_src


#+begin_src emacs-lisp
(after! dired-sidebar
  (add-hook! 'dired-sidebar-mode-hook  #'hide-mode-line-mode))
#+end_src

*** xdg open

#+begin_src emacs-lisp
(defun dired-open-file ()
  "In dired, open the file named on this line."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (message "Opening %s..." file)
    (call-process "xdg-open" nil 0 nil file)
    (message "Opening %s done" file)))

(map! :map dired-mode-map "C-<return>" #'dired-open-file)
#+end_src

*** wdired

#+begin_src emacs-lisp
(map! :map dired-mode-map "w" #'wdired-change-to-wdired-mode)
#+end_src
*** all the icons


#+begin_src emacs-lisp :tangle packages.el
(package! all-the-icons-dired)
#+end_src
https://old.reddit.com/r/emacs/comments/imy9f1/all_the_icons_dired_subtree/

#+begin_src emacs-lisp
(use-package! all-the-icons-dired
  :config
  :hook (dired-mode . (lambda ()
                       (interactive)
                       (unless (file-remote-p default-directory)
                         (all-the-icons-dired-mode)))))

(use-package! dired-subtree
  :config
  (advice-add 'dired-subtree-toggle :after (lambda ()
                                             (interactive)
                                             (when all-the-icons-dired-mode
                                               (revert-buffer)))))

#+end_src


* Firestarter

Execute commands on save
https://github.com/emacsmirror/firestarter

#+begin_src emacs-lisp :tangle packages.el
(package! firestarter)
#+end_src

#+begin_src emacs-lisp
(use-package! firestarter
  :after-call doom-first-file-hook
  :custom
  (firestarter-mode)
  )
#+end_src
* dir-locals

https://emacs.stackexchange.com/questions/13080/reloading-directory-local-variables
#+begin_src emacs-lisp
(defun vi/reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(defun vi/reload-dir-locals-for-all-buffer-in-this-directory ()
  "For every buffer with the same `default-directory` as the
current buffer's, reload dir-locals."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir))
        (vi/reload-dir-locals-for-current-buffer)))))
#+end_src

* docker

#+begin_src emacs-lisp :tangle packages.el
(package! dockerfile-mode)
#+end_src



#+begin_src emacs-lisp

(after! ob-tangle
  (setq org-babel-pre-tangle-hook
        (list (lambda ()
                (let (before-save-hook after-save-hook)
                  (save-buffer))))))
#+end_src

^ this doesn't work https://github.com/hlissner/doom-emacs/issues/4651


Also note that dockerfile-mode sets up an auto-mode-alist rule that maps
Dockerfile.* -> dockerfile-mode, including ~Dockerfile.org~

This seems to mainly depend on load order, since it conflicts with the org mode
rule for "*.org" :/

So we could:

- add another rule in dockerfile-mode use-package :mode that maps *.org to org
  mode
- use file-local-variables like below in Dockerfile.org


#+begin_example
# Local Variables:
# mode: org
# End:
#+end_example


* Misc

#+begin_src emacs-lisp :tangle packages.el
(package! git-modes)
(package! ssh-config-mode)
(package! jsonnet-mode)
#+end_src

** jsonnet


#+begin_src emacs-lisp :tangle packages.el
(package! jsonnet-mode)
#+end_src


#+begin_src emacs-lisp
(use-package! jsonnet-mode
  :after-call doom-first-file-hook
  :mode ("\\.jsonnet\\'"
         "\\.libsonnet\\'"))
#+end_src

** Just

#+begin_src emacs-lisp :tangle packages.el
(package! just-mode)
(package! justl)
#+end_src

** Cuda mode doesn't inherit from prog-mode?
#+begin_src emacs-lisp
(add-hook! 'cuda-mode-hook #'prog-mode)
#+end_src

** case cycle

#+begin_src emacs-lisp
(defun cycle-letter-case ()
  "Toggle the letter case of current word or text selection.
Always cycle in this order: Init Caps, ALL CAPS, all lower.

URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
Version 2016-01-08"
  (interactive)
  (let (
        (deactivate-mark nil)
        -p1 -p2)
    (if (use-region-p)
        (setq -p1 (region-beginning)
              -p2 (region-end))
      (save-excursion
        (skip-chars-backward "[:alnum:]")
        (setq -p1 (point))
        (skip-chars-forward "[:alnum:]")
        (setq -p2 (point))))
    (when (not (eq last-command this-command))
      (put this-command 'state 0))
    (cond
     ((equal 0 (get this-command 'state))
      (upcase-initials-region -p1 -p2)
      (put this-command 'state 1))
     ((equal 1  (get this-command 'state))
      (upcase-region -p1 -p2)
      (put this-command 'state 2))
     ((equal 2 (get this-command 'state))
      (downcase-region -p1 -p2)
      (put this-command 'state 0)))))

(map! :g "M-c" #'cycle-letter-case)
#+end_src
** numbers commas


#+begin_src emacs-lisp :tangle packages.el
(package! commify)
#+end_src


#+begin_src emacs-lisp
(use-package! commify
  :chords (",," . commify-toggle))
#+end_src

* atomic chrome



#+begin_src emacs-lisp :tangle packages.el
(package! atomic-chrome)
#+end_src
#+begin_src emacs-lisp
(use-package! atomic-chrome
  :after-call doom-first-file-hook
  :custom
  (atomic-chrome-default-major-mode 'python-mode)
  (atomic-chrome-url-major-mode-alist
   '(("\\.ipynb$" . python-mode))
   )
  ;; (atomic-chrome-extension-type-list '(atomic-chrome))
  (atomic-chrome-buffer-open-style 'full)

  :config
  (atomic-chrome-start-server)
  )
#+end_src


* Annotations

- annot breaks things quite badly
- bookmark+ is too convoluted, no inline display

** TODO org-remark

https://github.com/nobiot/org-remark
* Screencasts

** gif screencast

#+begin_src emacs-lisp :tangle packages.el
(package! gif-screencast :recipe (:host gitlab :repo "ambrevar/emacs-gif-screencast"))
#+end_src

Turn on gif-screencast to initiate these bindings

#+begin_src emacs-lisp
(use-package! gif-screencast
  :after-call doom-first-input-hook
  :bind (:map gif-screencast-mode-map
         (("<f8>" . #'gif-screencast-stop)
          ("<f9>" . #'gif-screencast-toggle-pause)))
  )
#+end_src

** Keycast
#+begin_src emacs-lisp :tangle packages.el
(package! keycast :recipe (:host github :repo "tarsius/keycast"))
#+end_src

#+begin_src emacs-lisp
(use-package! keycast
  :after-call doom-first-input-hook
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))
  )
(after! (keycast doom-modeline)
  ;; based on keycast-mode-line function
  (doom-modeline-def-segment keycast
    (and keycast-mode-line-window-predicate (keycast--format keycast-mode-line-format))
    )
  (doom-modeline-def-modeline 'vi/keycast
    '(bar buffer-info keycast)
    '(minor-modes major-mode)
    )
  (add-hook! 'keycast-mode-hook (doom-modeline-set-modeline 'vi/keycast))
  )
;; (add-hook! keycast-mode-hook
;;   (add-to-list 'global-mode-string '("" keycast-mode-line)))
#+end_src

* Bookmarks

- Linkmarks depends on helm. also it doesn't play nice with org-capture
  templates in Doom. Unclear if it even offers anything beyond org-capture.

- Bookmark+ is very complicated

** COMMENT Linkmarks
#+begin_src emacs-lisp :tangle packages.el
(package! linkmarks :recipe (:host github :repo "dustinlacewell/linkmarks"))
#+end_src


#+begin_src emacs-lisp
(defun vi/setup-linkmarks ()
  (setq-local linkmarks-file (expand-file-name (concat (projectile-acquire-root) "/Bookmarks.org")))
  )

(use-package! linkmarks
  :hook (prog-mode . vi/setup-linkmarks)
  )
#+end_src

** TODO harpoon

https://github.com/otavioschwanck/harpoon.el
* PDF

** Rotation
#+begin_src emacs-lisp
(after! pdf-view
  ;; https://emacs.stackexchange.com/questions/24738/how-do-i-rotate-pages-in-pdf-tools/24766#24766
  (defun pdf-view--rotate (&optional counterclockwise-p page-p)
    "Rotate PDF 90 degrees.  Requires pdftk to work.\n
Clockwise rotation is the default; set COUNTERCLOCKWISE-P to
non-nil for the other direction.  Rotate the whole document by
default; set PAGE-P to non-nil to rotate only the current page.
\nWARNING: overwrites the original file, so be careful!"
    ;; error out when pdftk is not installed
    (if (null (executable-find "pdftk"))
        (error "Rotation requires pdftk")
      ;; only rotate in pdf-view-mode
      (when (eq major-mode 'pdf-view-mode)
        (let* ((rotate (if counterclockwise-p "left" "right"))
               (file   (format "\"%s\"" (pdf-view-buffer-file-name)))
               (page   (pdf-view-current-page))
               (pages  (cond ((not page-p)                        ; whole doc?
                              (format "1-end%s" rotate))
                             ((= page 1)                          ; first page?
                              (format "%d%s %d-end"
                                      page rotate (1+ page)))
                             ((= page (pdf-info-number-of-pages)) ; last page?
                              (format "1-%d %d%s"
                                      (1- page) page rotate))
                             (t                                   ; interior page?
                              (format "1-%d %d%s %d-end"
                                      (1- page) page rotate (1+ page))))))
          ;; empty string if it worked
          (if (string= "" (shell-command-to-string
                           (format (concat "pdftk %s cat %s "
                                           "output %s.NEW "
                                           "&& mv %s.NEW %s")
                                   file pages file file file)))
              (pdf-view-revert-buffer nil t)
            (error "Rotation error!"))))))

  (defun pdf-view-rotate-clockwise (&optional arg)
    "Rotate PDF page 90 degrees clockwise.  With prefix ARG, rotate
entire document."
    (interactive "P")
    (pdf-view--rotate nil (not arg)))

  (defun pdf-view-rotate-counterclockwise (&optional arg)
    "Rotate PDF page 90 degrees counterclockwise.  With prefix ARG,
rotate entire document."
    (interactive "P")
    (pdf-view--rotate :counterclockwise (not arg)))

  (define-key pdf-view-mode-map (kbd "R") 'pdf-view-rotate-clockwise)

  )
#+end_src

* Pomodoro


#+begin_src emacs-lisp :tangle packages.el
(package! org-pomodoro)
#+end_src
* Documentation

** dash

#+begin_src emacs-lisp
(after! dash-docs
  ;; (dash-docs-install-docset "Python_3")
  (set-docsets! 'python-mode "Python 3")
  )
#+end_src

** dev-docs

#+begin_src emacs-lisp :tangle packages.el
(package! devdocs)
#+end_src

** hydra


#+begin_src emacs-lisp
(pretty-hydra-define doc-hydra (:exit t)
  ("Reference"
   (("d" +lookup/in-docsets "Dash")
    ("D" devdocs-lookup "Devdocs")
    ("O" +lookup/online-select "Online"))
   "Jump"
    (("c" +lookup/documentation "Docstring")
    ("f" +lookup/definition "Definition")
    ("u" +lookup/references "Usages")
    ("i" +lookup/implementations "Impls")
    ("t" +lookup/type-definition "Type")
    ("F" +lookup/file "file"))
   ))
#+end_src

* Profiling

** Keyfreq


#+begin_src emacs-lisp :tangle packages.el
(package! keyfreq :recipe (:host github :repo "dacap/keyfreq"))
#+end_src


#+begin_src emacs-lisp
(use-package! keyfreq
  :after-call doom-first-input-hook
  :custom
  (keyfreq-excluded-commands
   '(self-insert-command
     forward-char
     backward-char
     previous-line
     next-line))
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
  )
#+end_src

** startup

https://github.com/hlissner/doom-emacs/issues/4498


#+begin_src emacs-lisp :tangle packages.el
(package! benchmark-init)
#+end_src


doom-debug-p renamed to init-file-debug (https://github.com/doomemacs/doomemacs/commit/14b239542414db812b32f9eca4fb58016d93d687)
~emacs --debug-init~ to do profiling

#+begin_src emacs-lisp :tangle init.el
(when init-file-debug
  ;; https://github.com/dholm/benchmark-init-el/issues/15#issuecomment-766083560
  (define-advice define-obsolete-function-alias (:filter-args (ll) fix-obsolete)
    (let ((obsolete-name (pop ll))
          (current-name (pop ll))
          (when (if ll (pop ll) "1"))
          (docstring (if ll (pop ll) nil)))
      (list obsolete-name current-name when docstring)))
  (require 'benchmark-init-modes)
  (require 'benchmark-init)
  (add-hook 'doom-first-input-hook #'benchmark-init/deactivate))
#+end_src


** COMMENT explain-pause

?? seems to be built into doom.. but it works?
seems to be broken in nativecomp emacs <2022-05-05 Thu>

#+begin_src emacs-lisp :tangle packages.el
(package! explain-pause-mode :recipe (:host github :repo "lastquestion/explain-pause-mode"))
#+end_src


#+begin_src emacs-lisp
(use-package! explain-pause-mode
  :config
  (explain-pause-mode)
  )
#+end_src
