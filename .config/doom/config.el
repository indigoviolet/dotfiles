;; config.el

;; [[file:config.org::*config.el][config.el:1]]
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-vibrant)
(doom-themes-treemacs-config)
(doom-themes-org-config)
(doom-themes-visual-bell-config)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;; config.el:1 ends here

;; Basic config


;; [[file:config.org::*Basic config][Basic config:1]]
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Venky Iyer"
      user-mail-address "indigoviolet@gmail.com")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)


;; For some reason Doom disables auto-save and backup files by default. Let's reenable them.
(setq auto-save-default t
      make-backup-files t)

;; Disable exit confirmation.
(setq confirm-kill-emacs nil)

;; indent anywhere, no completion on tab
(setq tab-always-indent t)

(setq scroll-preserve-screen-position 'always)

;; gets pageup/pagedown to ends of buffer
(setq scroll-error-top-bottom t)

;; https://stackoverflow.com/a/19782939/14044156
(setq suggest-key-bindings nil)

;; no line wrapping
(global-visual-line-mode t)
(global-whitespace-mode +1)
(global-git-gutter-mode t)
(setq! whitespace-style '(face tabs tab-mark trailing))

(blink-cursor-mode)
;; Basic config:1 ends here

;; Custom.el handling


;; [[file:config.org::*Custom.el handling][Custom.el handling:1]]
;; (setq custom-file (make-temp-file "emacs-custom"))
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
;; (setq custom-file "/tmp/emacs-custom")

(load custom-file 'noerror)
;; Custom.el handling:1 ends here

;; dir-locals.el safe Variables

;; Turn off "don't remember risky variables" feature


;; [[file:config.org::*dir-locals.el safe Variables][dir-locals.el safe Variables:1]]
;; https://emacs.stackexchange.com/a/44604
;; This actually just skips them instead of setting them regardless
;; (advice-add 'risky-local-variable-p :override #'ignore)


(setq enable-local-variables :all)
;; dir-locals.el safe Variables:1 ends here

;; Prevent *Warnings* buffer from popping up



;; [[file:config.org::*Prevent *Warnings* buffer from popping up][Prevent *Warnings* buffer from popping up:1]]
(setq warning-minimum-level :error)
;; Prevent *Warnings* buffer from popping up:1 ends here

;; Global keybindings



;; [[file:config.org::*Global keybindings][Global keybindings:1]]
(map! :g "M-i" #'delete-indentation)
(map! :g "M-t" #'beginning-of-buffer)
(map! :g "M-z" #'end-of-buffer)
;; Global keybindings:1 ends here

;; [[file:config.org::*Chords][Chords:2]]
(use-package! use-package-chords
  :custom

  ;; Max time delay between two key presses to be considered a key chord
  (key-chord-two-keys-delay 0.2) ; default 0.1

  ;; Max time delay between two presses of the same key to be considered a key chord.
  ;; Should normally be a little longer than `key-chord-two-keys-delay'.
  (key-chord-one-key-delay 0.3) ; default 0.2

  :config (key-chord-mode 1)
  )
;; Chords:2 ends here

;; [[file:config.org::*dim other buffers][dim other buffers:2]]
(use-package! auto-dim-other-buffers
  :after-call pre-command-hook
  :config
  (auto-dim-other-buffers-mode t)
  )
;; dim other buffers:2 ends here

;; [[file:config.org::*Rainbow][Rainbow:2]]
(use-package! rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :custom
  (rainbow-delimiters-max-face-count 9)

  :config
  (set-face-foreground 'rainbow-delimiters-depth-1-face "white")
  (set-face-foreground 'rainbow-delimiters-depth-2-face "cyan")
  (set-face-foreground 'rainbow-delimiters-depth-3-face "yellow")
  (set-face-foreground 'rainbow-delimiters-depth-4-face "green")
  (set-face-foreground 'rainbow-delimiters-depth-5-face "orange")
  (set-face-foreground 'rainbow-delimiters-depth-6-face "purple")
  (set-face-foreground 'rainbow-delimiters-depth-7-face "white")
  (set-face-foreground 'rainbow-delimiters-depth-8-face "cyan")
  (set-face-foreground 'rainbow-delimiters-depth-9-face "yellow")
  (set-face-foreground 'rainbow-delimiters-unmatched-face "red"))


(use-package! rainbow-identifiers
  :init
  ;; Use C-u what-cursor-position to figure out what face
  ;; https://stackoverflow.com/questions/1242352/get-font-face-under-cursor-in-emacs
  (setq rainbow-identifiers-faces-to-override '(font-lock-type-face
                                                font-lock-variable-name-face
                                                font-lock-function-name-face
                                                font-lock-function-name-face
                                                font-lock-constant-face
                                                ;; font-lock-string-face

                                                js2-function-call
                                                js2-object-property
                                                js2-object-property-access

                                                ))


  :config
  (setq rainbow-identifiers-face-count 222)
  ;; (setq rainbow-identifiers-choose-face-function (quote rainbow-identifiers-cie-l*a*b*-choose-face))
  (setq rainbow-identifiers-choose-face-function (quote rainbow-identifiers-predefined-choose-face))

  (defmacro vi-rainbow-identifiers--define-faces ()
    (let ((faces '())
          ;; Light colors don't matter, but we need them to define the face
          (light-colors [
                         ;; "#78683f" "#43783f" "#3f7178" "#513f78" "#783f5a"
                         ;; "#707e4f" "#4f7e67" "#4f5c7e" "#7a4f7e" "#7e544f"
                         ;; "#783778" "#784437" "#5e7837" "#37785e" "#374478"

                         ;; 219 colors derived from list-colors-display with dark colors removed
                         "#0000af" "#0000d7" "#0000ee" "#0000ff" "#005f00" "#005f5f" "#005f87"
                         "#005faf" "#005fd7" "#005fff" "#008700" "#00875f" "#008787" "#0087af"
                         "#0087d7" "#0087ff" "#00af00" "#00af5f" "#00af87" "#00afaf" "#00afd7"
                         "#00afff" "#00cd00" "#00cdcd" "#00d700" "#00d75f" "#00d787" "#00d7af"
                         "#00d7d7" "#00d7ff" "#00ff00" "#00ff5f" "#00ff87" "#00ffaf" "#00ffd7"
                         "#00ffff" "#5c5cff"
                         ;; "#5f0000" "#5f005f"
                         ;; "#5f0087"
                         ;; "#5f00af"
                         ;; "#5f00d7"
                         ;; "#5f00ff"
                         "#5f5f00" "#5f5f5f" "#5f5f87" "#5f5faf" "#5f5fd7" "#5f5fff"
                         "#5f8700" "#5f875f" "#5f8787" "#5f87af" "#5f87d7" "#5f87ff" "#5faf00"
                         "#5faf5f" "#5faf87" "#5fafaf" "#5fafd7" "#5fafff" "#5fd700" "#5fd75f"
                         "#5fd787" "#5fd7af" "#5fd7d7" "#5fd7ff" "#5fff00" "#5fff5f" "#5fff87"
                         "#5fffaf" "#5fffd7" "#5fffff" "#7f7f7f"
                         ;; "#870000"
                         "#87005f"
                         ;; "#870087"
                         "#8700af"
                         ;; "#8700d7"
                         ;; "#8700ff"
                         "#875f00" "#875f5f" "#875f87" "#875faf"
                         "#875fd7" "#875fff" "#878700" "#87875f" "#878787" "#8787af" "#8787d7"
                         "#8787ff" "#87af00" "#87af5f" "#87af87" "#87afaf" "#87afd7" "#87afff"
                         "#87d700" "#87d75f" "#87d787" "#87d7af" "#87d7d7" "#87d7ff" "#87ff00"
                         "#87ff5f" "#87ff87" "#87ffaf" "#87ffd7" "#87ffff" "#af0000" "#af005f"
                         "#af0087" "#af00af" "#af00d7" "#af00ff" "#af5f00" "#af5f5f" "#af5f87"
                         "#af5faf" "#af5fd7" "#af5fff" "#af8700" "#af875f" "#af8787" "#af87af"
                         "#af87d7" "#af87ff" "#afaf00" "#afaf5f" "#afaf87" "#afafaf" "#afafd7"
                         "#afafff" "#afd700" "#afd75f" "#afd787" "#afd7af" "#afd7d7" "#afd7ff"
                         "#afff00" "#afff5f" "#afff87" "#afffaf" "#afffd7" "#afffff" "#cd0000"
                         "#cd00cd" "#cdcd00" "#d70000" "#d7005f" "#d70087" "#d700af" "#d700d7"
                         "#d700ff" "#d75f00" "#d75f5f" "#d75f87" "#d75faf" "#d75fd7" "#d75fff"
                         "#d78700" "#d7875f" "#d78787" "#d787af" "#d787d7" "#d787ff" "#d7af00"
                         "#d7af5f" "#d7af87" "#d7afaf" "#d7afd7" "#d7afff" "#d7d700" "#d7d75f"
                         "#d7d787" "#d7d7af" "#d7d7d7" "#d7d7ff" "#d7ff00" "#d7ff5f" "#d7ff87"
                         "#d7ffaf" "#d7ffd7" "#d7ffff" "#e5e5e5" "#ff0000" "#ff005f" "#ff0087"
                         "#ff00af" "#ff00d7" "#ff00ff" "#ff5f00" "#ff5f5f" "#ff5f87" "#ff5faf"
                         "#ff5fd7" "#ff5fff" "#ff8700" "#ff875f" "#ff8787" "#ff87af" "#ff87d7"
                         "#ff87ff" "#ffaf00" "#ffaf5f" "#ffaf87" "#ffafaf" "#ffafd7" "#ffafff"
                         "#ffd700" "#ffd75f" "#ffd787" "#ffd7af" "#ffd7d7" "#ffd7ff" "#ffff00"
                         "#ffff5f" "#ffff87" "#ffffaf" "#ffffd7" "#ffffff"
                         ])
          (dark-colors [
                        ;; Original 15
                        ;; "#9999bb" "#bb99b4" "#bba699" "#a6bb99" "#99bbb4"
                        ;; "#e0d0a0" "#a3e0a0" "#a0d6e0" "#b6a0e0" "#e0a0bc"
                        ;; "#a7c0b9" "#a7aac0" "#c0a7bd" "#c0afa7" "#b3c0a7"

                        ;; 219 colors derived from list-colors-display with dark colors removed
                        "#0000af" "#0000d7" "#0000ee" "#0000ff" "#005f00" "#005f5f" "#005f87"
                        "#005faf" "#005fd7" "#005fff" "#008700" "#00875f" "#008787" "#0087af"
                        "#0087d7" "#0087ff" "#00af00" "#00af5f" "#00af87" "#00afaf" "#00afd7"
                        "#00afff" "#00cd00" "#00cdcd" "#00d700" "#00d75f" "#00d787" "#00d7af"
                        "#00d7d7" "#00d7ff" "#00ff00" "#00ff5f" "#00ff87" "#00ffaf" "#00ffd7"
                        "#00ffff" "#5c5cff"
                        ;; "#5f0000" too dark
                        ;; "#5f005f" too dark
                        ;; "#5f0087"
                        ;; "#5f00af" "#5f00d7"
                        ;; "#5f00ff"
                        "#5f5f00" "#5f5f5f" "#5f5f87" "#5f5faf" "#5f5fd7" "#5f5fff"
                        "#5f8700" "#5f875f" "#5f8787" "#5f87af" "#5f87d7" "#5f87ff" "#5faf00"
                        "#5faf5f" "#5faf87" "#5fafaf" "#5fafd7" "#5fafff" "#5fd700" "#5fd75f"
                        "#5fd787" "#5fd7af" "#5fd7d7" "#5fd7ff" "#5fff00" "#5fff5f" "#5fff87"
                        "#5fffaf" "#5fffd7" "#5fffff" "#7f7f7f"
                        ;; "#870000"  too dark
                        "#87005f"
                        ;; "#870087"
                        "#8700af"
                        ;; "#8700d7"
                        ;; "#8700ff"
                        "#875f00" "#875f5f" "#875f87" "#875faf"
                        "#875fd7" "#875fff" "#878700" "#87875f" "#878787" "#8787af" "#8787d7"
                        "#8787ff" "#87af00" "#87af5f" "#87af87" "#87afaf" "#87afd7" "#87afff"
                        "#87d700" "#87d75f" "#87d787" "#87d7af" "#87d7d7" "#87d7ff" "#87ff00"
                        "#87ff5f" "#87ff87" "#87ffaf" "#87ffd7" "#87ffff" "#af0000" "#af005f"
                        "#af0087" "#af00af" "#af00d7" "#af00ff" "#af5f00" "#af5f5f" "#af5f87"
                        "#af5faf" "#af5fd7" "#af5fff" "#af8700" "#af875f" "#af8787" "#af87af"
                        "#af87d7" "#af87ff" "#afaf00" "#afaf5f" "#afaf87" "#afafaf" "#afafd7"
                        "#afafff" "#afd700" "#afd75f" "#afd787" "#afd7af" "#afd7d7" "#afd7ff"
                        "#afff00" "#afff5f" "#afff87" "#afffaf" "#afffd7" "#afffff" "#cd0000"
                        "#cd00cd" "#cdcd00" "#d70000" "#d7005f" "#d70087" "#d700af" "#d700d7"
                        "#d700ff" "#d75f00" "#d75f5f" "#d75f87" "#d75faf" "#d75fd7" "#d75fff"
                        "#d78700" "#d7875f" "#d78787" "#d787af" "#d787d7" "#d787ff" "#d7af00"
                        "#d7af5f" "#d7af87" "#d7afaf" "#d7afd7" "#d7afff" "#d7d700" "#d7d75f"
                        "#d7d787" "#d7d7af" "#d7d7d7" "#d7d7ff" "#d7ff00" "#d7ff5f" "#d7ff87"
                        "#d7ffaf" "#d7ffd7" "#d7ffff" "#e5e5e5" "#ff0000" "#ff005f" "#ff0087"
                        "#ff00af" "#ff00d7" "#ff00ff" "#ff5f00" "#ff5f5f" "#ff5f87" "#ff5faf"
                        "#ff5fd7" "#ff5fff" "#ff8700" "#ff875f" "#ff8787" "#ff87af" "#ff87d7"
                        "#ff87ff" "#ffaf00" "#ffaf5f" "#ffaf87" "#ffafaf" "#ffafd7" "#ffafff"
                        "#ffd700" "#ffd75f" "#ffd787" "#ffd7af" "#ffd7d7" "#ffd7ff" "#ffff00"
                        "#ffff5f" "#ffff87" "#ffffaf" "#ffffd7" "#ffffff"
                        ]))
      (dotimes (i 212)
        (push `(defface ,(intern (format "rainbow-identifiers-identifier-%d" (1+ i)))
                 '((((class color) (background dark)) :foreground ,(aref dark-colors i))
                   ;; doesn't matter, we don't use light background
                   (((class color) (background light)) :foreground ,(aref light-colors i)))
                 ,(format "Identifier face #%d" (1+ i))
                 :group 'rainbow-identifiers-faces)
              faces))
      `(progn ,@faces)))
  (vi-rainbow-identifiers--define-faces)

  :hook
  (prog-mode . rainbow-identifiers-mode)
  )
;; Rainbow:2 ends here

;; Parens


;; [[file:config.org::*Parens][Parens:1]]
(after! paren
  (setq show-paren-style 'expression)
  (setq show-paren-priority -50)
  (setq show-paren-delay 0)
  (set-face-attribute 'show-paren-match nil :inherit 'secondary-selection)
  (set-face-attribute 'show-paren-match-expression nil :inherit nil :underline nil :background "midnight blue")
  (set-face-attribute 'show-paren-mismatch nil :weight 'bold :underline t :overline nil :slant 'normal)
  )
;; Parens:1 ends here

;; Sessions, Persistence etc.

;; If we turned off the ~workspaces~ module, the recentf list isn't loaded
;; automatically. ~pre-command-hook~ seems to be sufficient to have recentf
;; available, though there is some suspicion that it loads the list many times?
;; (see Messages buffer).


;; [[file:config.org::*Sessions, Persistence etc.][Sessions, Persistence etc.:1]]
;; recentf list isn't loaded on startup with doom/workspaces turned off
;; (add-hook! 'pre-command-hook #'recentf-load-list)
;; Sessions, Persistence etc.:1 ends here

;; [[file:config.org::*Movement][Movement:2]]
(use-package! windmove
  :after-call pre-command-hook
  :custom
  (windmove-wrap-around t)
  :config
  (windmove-default-keybindings 'shift)
  )
;; Movement:2 ends here

;; Splitting


;; [[file:config.org::*Splitting][Splitting:1]]
(map! :g "C-x |" #'split-window-horizontally)
(map! :g "C-x _" #'split-window-vertically)
(map! :g "C-x /" #'delete-window)
;; Splitting:1 ends here

;; Keep windows balanced

;; [[file:config.org::*Keep windows balanced][Keep windows balanced:1]]
(setq split-width-threshold nil)
(defadvice split-window-below (after restore-balance-below activate)
  (balance-windows))

(defadvice split-window-right (after restore-balance-right activate)
  (balance-windows))

(defadvice delete-window (after restore-balance activate)
  (balance-windows))
;; Keep windows balanced:1 ends here

;; Switching


;; [[file:config.org::*Switching][Switching:1]]
(after! consult
  (map! :g "M-j" #'consult-buffer)
  (map! :g "M-k" #'consult-buffer)
  )
;; Switching:1 ends here

;; [[file:config.org::*Restore][Restore:2]]
(use-package! winner
  :config
  (winner-mode)
  :bind
  ("M-[" . winner-undo)
  ("M-]" . winner-redo)
  )
;; Restore:2 ends here

;; [[file:config.org::*zoom][zoom:2]]
(use-package! zoom
  :hook (after-init . zoom-mode)
  :custom
  (zoom-size '(0.618 . 0.618))
  (zoom-ignored-major-modes '(undo-tree-visualizer-mode))
  )
;; zoom:2 ends here

;; [[file:config.org::*bufler][bufler:2]]
(use-package! bufler
  :commands (bufler bufler-switch-buffer)
  :custom
  (bufler-vc-state nil)
  (bufler-columns '("Name" "VC" "Path"))
  (bufler-filter-buffer-modes '(bufler-list-mode calendar-mode
                                                 magit-diff-mode magit-process-mode magit-revision-mode magit-section-mode
                                                 special-mode timer-list-mode))
  (bufler-groups
   (bufler-defgroups
     (group
      ;; Subgroup collecting all named workspaces.
      (auto-workspace))
     (group
      ;; Group all Ein buffers
      (name-match "*Ein*" (rx bos "*ein")))
     (group
      ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
      (group-or "*Help/Info*"
                (mode-match "*Help*" (rx bos "help-"))
                (mode-match "*Info*" (rx bos "info-"))))
     (group
      ;; Subgroup collecting all special buffers (i.e. ones that are not
      ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
      ;; through to other groups, so they end up grouped with their project buffers).
      (group-and "*Special*"
                 (lambda (buffer)
                   (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                        buffer)
                               (funcall (mode-match "Dired" (rx bos "dired"))
                                        buffer)
                               (funcall (auto-file) buffer))
                     "*Special*")))
      (group
       ;; Subgroup collecting these "special special" buffers
       ;; separately for convenience.
       (name-match "**Special**"
                   (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
      (group
       ;; Subgroup collecting all other Magit buffers, grouped by directory.
       (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
       ;; (auto-directory)
       )
      ;; Subgroup for Helm buffers.
      ;; (mode-match "*Helm*" (rx bos "helm-"))
      ;; Remaining special buffers are grouped automatically by mode.
      (auto-mode)
      )
     ;; All buffers under "~/.emacs.d" (or wherever it is).
     (dir user-emacs-directory)
     (group
      ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
      ;; `org-directory' is not yet defined).
      (dir (if (bound-and-true-p org-directory)
               org-directory
             "~/org"))
      (group
       ;; Subgroup collecting indirect Org buffers, grouping them by file.
       ;; This is very useful when used with `org-tree-to-indirect-buffer'.
       (auto-indirect)
       (auto-file)
       )
      ;; Group remaining buffers by whether they're file backed, then by mode.
      (group-not "*special*" (auto-file))
      (auto-mode)
      )
     (group
      ;; Subgroup collecting buffers in a projectile project.
      (auto-projectile))
     ;; auto-project will cause issues with tramp buffers (https://github.com/alphapapa/bufler.el/issues/63)
     ;; (group
     ;;  ;; Subgroup collecting buffers in a version-control project,
     ;;  ;; grouping them by directory.
     ;;  (auto-project))
     ;; Group remaining buffers by directory, then major mode.
     (auto-directory)
     (auto-mode)
     )
   )
  :config
  (bufler-mode)
  :bind
  ("C-x C-b" . bufler)
  )
;; bufler:2 ends here

;; Adjust for display change

;; [[file:config.org::*Adjust for display change][Adjust for display change:1]]
(defun vi/set-font-size (sz)
  (setq doom-font (font-spec :size sz))
  (doom/reload-font)
  )

(defun vi/adjust-font-size-for-display (disp)
  (message "rejiggering for %s" disp)
  (cond ((equal disp '(3440 . 1440))   ; LG monitor
         (vi/set-font-size 13))
        ((equal disp '(4002 . 2668))    ; just laptop
         (vi/set-font-size 27))
        (t (message "Unknown display size %sx%s" (car disp) (cdr disp)))))
;; Adjust for display change:1 ends here

;; [[file:config.org::*Adjust for display change][Adjust for display change:3]]
(use-package dispwatch
  :config
  (dispwatch-mode 1)
  (add-hook! 'dispwatch-display-change-hooks #'vi/adjust-font-size-for-display)
  )
;; Adjust for display change:3 ends here

;; [[file:config.org::*Kill/Yank][Kill/Yank:2]]
(use-package! hungry-delete
  :after-call after-find-file
  :config
  (global-hungry-delete-mode))

(use-package! easy-kill
  :after-call after-find-file
  :custom
  (easy-mark-try-things (quote (url email word forward-line-edge)))
  :config

  ;; (defun easy-kill-on-inside-pairs (_n)
  ;;   (er/mark-inside-pairs)
  ;;   (easy-kill-adjust-candidate 'expand-region (mark) (point))
  ;;   )

  ;; (defun easy-kill-on-outside-pairs (_n)
  ;;   (er/mark-outside-pairs)
  ;;   (easy-kill-adjust-candidate 'expand-region (mark) (point)))
  :bind (
         ([remap kill-ring-save] . easy-kill)
         ("M-SPC" . easy-mark)
         )
  ;; (global-set-key [remap kill-ring-save] 'easy-kill)
  ;; (global-set-key [remap set-mark-command] 'easy-mark)
  )

(use-package easy-kill-extras
  :after easy-kill
  :init
  (setq easy-kill-ace-jump-enable-p nil)
  :config
  (add-to-list 'easy-kill-alist '(?^ backward-line-edge ""))
  (add-to-list 'easy-kill-alist '(?$ forward-line-edge ""))
  (add-to-list 'easy-kill-alist '(?b buffer ""))
  ;; (add-to-list 'easy-kill-alist '(?< buffer-before-point ""))
  ;; (add-to-list 'easy-kill-alist '(?> buffer-after-point ""))
  (add-to-list 'easy-kill-alist '(?< inside-pairs ""))
  (add-to-list 'easy-kill-alist '(?> outside-pairs ""))
  (add-to-list 'easy-kill-alist '(?f string-to-char-forward ""))
  (add-to-list 'easy-kill-alist '(?F string-up-to-char-forward ""))
  ;; (add-to-list 'easy-kill-alist '(?t string-to-char-backward ""))
  ;; (add-to-list 'easy-kill-alist '(?T string-up-to-char-backward ""))
  )
;; Kill/Yank:2 ends here

;; no yanking whitespace

;; https://stackoverflow.com/a/69307156/14044156

;; [[file:config.org::*no yanking whitespace][no yanking whitespace:1]]
(defun night/h-kill-skip-whitespace (orig-fn string &optional rest)
  (let* (
         (string-raw (substring-no-properties string))
         (space-p (not (string-match-p "[^ \t\n\r]" string-raw))))

    (cond
     ((not space-p)
      (apply orig-fn string rest))
     (t
      (message "skipped whitespace kill")
     ))))

(advice-add 'kill-new :around #'night/h-kill-skip-whitespace)
;; no yanking whitespace:1 ends here

;; Undo


;; [[file:config.org::*Undo][Undo:1]]
(after! undo-tree
  (map! "C--" #'undo-tree-undo)
  )
;; Undo:1 ends here

;; [[file:config.org::*Yankpad][Yankpad:2]]
(after! yasnippet
  (setq yas-wrap-around-region t)
  (yas-global-mode 1))

(use-package! yankpad
  :after-call after-find-file
  :commands (yankpad-insert company-yankpad)
  :custom
  (yankpad-file "~/.config/doom/yankpad.org")
  :config
  (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand)
  )
;; Yankpad:2 ends here

;; [[file:config.org::*Fill][Fill:2]]
(use-package! unfill
  :bind ("M-a" . unfill-paragraph))

(use-package! fill-function-arguments
  :hook
  (prog-mode . (lambda () (local-set-key (kbd "M-q") #'fill-function-arguments-dwim)))
  (emacs-lisp-mode . (lambda ()
                       (setq-local fill-function-arguments-first-argument-same-line t)
                       (setq-local fill-function-arguments-second-argument-same-line t)
                       (setq-local fill-function-arguments-last-argument-same-line t)
                       (setq-local fill-function-arguments-argument-separator " ")))
  )
;; Fill:2 ends here

;; [[file:config.org::*Comment editing][Comment editing:2]]
(use-package! rebox2
  :config
  (setq rebox-style-loop '(13 15 23 25 16 17 26 27 11 21))
  :bind
  (
   ("M-:" . rebox-dwim)
   :map rebox-mode-map ("M-q" . nil)
   )
  ;; (define-key rebox-mode-map (kbd "M-q") nil)
  )

(defun python-mode-poporg-hook ()
  (setq-local poporg-edit-hook '(sql-mode))
  )

(use-package! poporg
  :custom
  ;; don't match * in common prefix - this will break C-style comments
  ;; poporg but it is necessary to retain org headings
  (poporg-comment-skip-regexp "[[:space:]]*")
  :hook (python-mode . python-mode-poporg-hook)
  :bind ("M-\\" . poporg-dwim)
  )
;; Comment editing:2 ends here

;; Shift regions


;; [[file:config.org::*Shift regions][Shift regions:1]]
;; Shift the selected region right if distance is postive, left if
;; negative

(defun vi/shift-region (distance)
  (let ((mark (mark)))
    (save-excursion
      (indent-rigidly (region-beginning) (region-end) distance)
      (push-mark mark t t)
      ;; Tell the command loop not to deactivate the mark
      ;; for transient mark mode
      (setq deactivate-mark nil))))

(defun vi/shift-right ()
  (interactive)
  (vi/shift-region 1))

(defun vi/shift-left ()
  (interactive)
  (vi/shift-region -1))

(map! :g "M->" #'vi/shift-right)
(map! :g "M-<" #'vi/shift-left)
;; Shift regions:1 ends here

;; [[file:config.org::*Movement][Movement:2]]
(use-package! mwim
  :bind
  ("C-a" . mwim-beginning)
  ("C-e" . mwim-end)
  )
;; Movement:2 ends here

;; [[file:config.org::*smartscan][smartscan:2]]
(use-package! smartscan
  :after-call after-find-file
  :config
  (global-smartscan-mode 1)

  ;; M-p, M-n interfere in git-rebase mode
  (add-hook! git-rebase-mode (smartscan-mode -1))
  )
;; smartscan:2 ends here

;; [[file:config.org::*Jumping][Jumping:2]]
(use-package! smart-jump
  :config
  (smart-jump-setup-default-registers)
  :commands (smart-jump-go smart-jump-back smart-jump-references)
  )

(after! dumb-jump
  (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
  (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t))
;; Jumping:2 ends here

;; [[file:config.org::*Narrowing][Narrowing:2]]
(use-package! recursive-narrow
  :after-call after-find-file
  :commands (hydra-narrow/body recursive-narrow-or-widen-dwim recursive-widen)
  :config
  (defhydra hydra-narrow (:exit t :columns 2)
    "Narrow"
    ("n" recursive-narrow-or-widen-dwim "narrow")
    ("w" recursive-widen "widen")
    )
  )
;; Narrowing:2 ends here

;; Folding

;; - Outshine is not compatible with Python https://github.com/alphapapa/outshine/issues/42
;; - bicycle doesn't seem to do anything more than outline-cycle and outline-cycle-buffer


;; [[file:config.org::*Folding][Folding:1]]
(use-package! outline
  :hook (prog-mode . outline-minor-mode)
  :bind (:map outline-minor-mode-map
         ([C-tab] . outline-cycle)
         ([s-tab] . outline-cycle-buffer)))
;; Folding:1 ends here

;; Completion



;; [[file:config.org::*Completion][Completion:1]]
(after! company
  (setq company-idle-delay 0.0
        company-selection-wrap-around t
        company-minimum-prefix-length 1
        company-tooltip-idle-delay 0.1
        company-async-redisplay-delay 0.0
        company-tooltip-align-annotations t)
  )
;; Completion:1 ends here

;; [[file:config.org::*Prescient][Prescient:2]]
(after! company #'company-prescient-mode)
;; Prescient:2 ends here

;; [[file:config.org::*Tabnine][Tabnine:2]]
(use-package! company-tabnine
  :after company
  :after-call after-find-file
  :config
  ;; https://github.com/TommyX12/company-tabnine#known-issues
  ;; workaround for company-transformers
  (setq company-tabnine--disable-next-transform nil)
  (defun my-company--transform-candidates (func &rest args)
    (if (not company-tabnine--disable-next-transform)
        (apply func args)
      (setq company-tabnine--disable-next-transform nil)
      (car args)))

  (defun my-company-tabnine (func &rest args)
    (when (eq (car args) 'candidates)
      (setq company-tabnine--disable-next-transform t))
    (apply func args))

  (advice-add #'company--transform-candidates :around #'my-company--transform-candidates)
  (advice-add #'company-tabnine :around #'my-company-tabnine)
  )

;; We want these grouped so they are merged
;; since they are prepended, and company uses only one (maybe grouped) backend, any others should be ignored.
(set-company-backend! '(prog-mode conf-mode sh-mode text-mode) '(company-tabnine company-yankpad company-capf))
;; Tabnine:2 ends here

;; [[file:config.org::*Iedit][Iedit:2]]
(use-package! iedit
  :bind
  ("C-;" . iedit-mode))
;; Iedit:2 ends here

;; [[file:config.org::*wgrep][wgrep:2]]
(after! wgrep
  (setq wgrep-auto-save-buffer t)
  )
;; wgrep:2 ends here

;; Which-key


;; [[file:config.org::*Which-key][Which-key:1]]
;; Allow C-h to trigger which-key before it is done automatically
(setq which-key-show-early-on-C-h t)
;; Which-key:1 ends here

;; Hydra


;; [[file:config.org::*Hydra][Hydra:1]]
(use-package! hydra
  :after-call pre-command-hook
  :config
  (defhydra hydra-global (:exit t :columns 3)
    " Hydra "
    ("a" hydra-annotate/body "Annotate")
    ("A" org-agenda-list "Agenda")
    ("c" hydra-flycheck/body "flycheck")
    ("e" hydra-ein/body "ein")
    ("g" magit-status-here "magit")
    ("i" vi/lsp-ui-imenu "imenu")
    ("n" hydra-narrow/body "narrow")
    ("o" hydra-org/body "org")
    ("p" org-pomodoro "Pomodoro")
    ("f" vi/consult-fd "fd")
    ("s" consult-ripgrep "rg in project")
    ("b" consult-buffer "Buffers")
    ("l" consult-line "Line isearch")
    ("t" treemacs-select-window "treemacs")
    ("T" +treemacs/toggle "Toggle treemacs")
    ("v" multi-vterm-next "vterm-toggle")
    ("V" multi-vterm "vterm")
    ("y" yankpad-insert "yankpad")
    ;;("b" bufler-switch-buffer "Buffers") ;; won't show recent files
    )
  :chords
  ("hh" . hydra-global/body))
;; Hydra:1 ends here

;; Org mode


;; [[file:config.org::*Org mode][Org mode:1]]
(after! org
  ;; hide org markup indicators
  (setq org-hide-emphasis-markers t
        ;; Insert Org headings at point, not after the current subtree (this is enabled by default by Doom).
        org-insert-heading-respect-content nil
        org-cycle-separator-lines 0
        org-blank-before-new-entry '((heading . never) (plain-list-item . never))
        org-startup-folded t
        org-startup-indented t
        org-startup-numerated nil
        org-startup-align-all-tables t
        ;; Leads to 'File mode specification error: (user-error Not at a table)' in some org files
        ;;        org-startup-shrink-all-tables t
        org-log-into-drawer t
        org-src-window-setup 'current-window
        org-src-preserve-indentation nil
        org-edit-src-content-indentation 0
        org-num-skip-commented t
        org-M-RET-may-split-line t
        ;; https://old.reddit.com/r/orgmode/comments/fagcaz/show_schedule_and_deadlines_for_standard_todo_list/
        org-agenda-files '("~/org/Notes.org")
        org-agenda-entry-types '(:deadline :scheduled)
        org-agenda-skip-scheduled-if-done t
        org-todo-keywords '((sequence "TODO(t)" "WAIT(w!)" "SOMEDAY(s!)" "REVISIT(r!)" "|" "DONE(d!)" "KILL(k!)" ))
        org-todo-keyword-faces '(("WAIT" . +org-todo-onhold)
                                 ("HOLD" . +org-todo-onhold)
                                 ("REVISIT" . +org-todo-onhold)
                                 ("SOMEDAY" . +org-todo-onhold)
                                 ("KILL" . +org-todo-cancel))
        org-use-fast-todo-selection 'expert)
  (defhydra hydra-org (:exit t)
    "Org"
    ("k" org-cut-subtree "cut subtree")
    ("y" org-paste-subtree "paste subtree")
    ("s" org-babel-demarcate-block "split src block")
    )
  )
;; Org mode:1 ends here

;; Company backends

;; - company-tabnine is currently excluded because it always triggers (see
;;   company-tabnine-always-trigger), and actually makes it annoying to type free
;;   text.

;; - It would be good to tweak some of these parameters specific to org-mode and
;;   make it less noisy


;; [[file:config.org::*Company backends][Company backends:1]]
(after! org
  ;; since they are prepended, and company uses only one (maybe grouped)
  ;; backend, any others should be ignored.
  (set-company-backend! 'org-mode '(company-yankpad company-capf))
  )
;; Company backends:1 ends here

;; Electric pairs


;; [[file:config.org::*Electric pairs][Electric pairs:1]]
(after! smartparens
  (sp-local-pair 'org-mode "~" "~")
  ;; (sp-local-pair 'org-mode "=" "=")
  ;; (sp-local-pair 'org-mode "$" "$")
  )
;; Electric pairs:1 ends here

;; [[file:config.org::*show delimiters][show delimiters:2]]
(use-package! org-appear
  :custom (
           (org-appear-autoemphasis t)
           (org-appear-autolinks t)
           (org-appear-autosubmarkers t)
           (org-appear-autoentities t)
           )
  :hook (org-mode . org-appear-mode)
  )
;; show delimiters:2 ends here

;; [[file:config.org::*Use auto-tangle][Use auto-tangle:2]]
(use-package! org-auto-tangle
  :after-call after-find-file
  :config
  (setq org-auto-tangle-default t)      ;this doesn't work with :custom
  :hook (org-mode . org-auto-tangle-mode))
;; Use auto-tangle:2 ends here

;; [[file:config.org::*Images][Images:2]]
(after! org
  (setq org-download-method 'directory
        org-download-image-dir "org-images"
        org-download-heading-lvl nil
        org-download-timestamp "%Y%m%d-%H%M%S_"
        org-startup-with-inline-images t
        org-image-actual-width 300))
;; Images:2 ends here

;; Reformatting an Org buffer

;; (originally:
;; https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/ A
;; function that reformats the current buffer by regenerating the text from its
;; internal parsed representation. Quite amazing.)


;; [[file:config.org::*Reformatting an Org buffer][Reformatting an Org buffer:1]]
(after! org
  (defun vi/org-reformat-buffer ()
    (interactive)
    (when (y-or-n-p "Really format current buffer? ")
      (let ((document (org-element-interpret-data (org-element-parse-buffer))))
        (erase-buffer)
        (insert document)
        (goto-char (point-min))))))
;; Reformatting an Org buffer:1 ends here

;; misc

;; [[file:config.org::*misc][misc:1]]
(after! org
  ;; http://emacs.stackexchange.com/a/10712/115
  (defun modi/org-delete-link ()
    "Replace an Org link of the format [[LINK][DESCRIPTION]] with DESCRIPTION.
If the link is of the format [[LINK]], delete the whole Org link.

In both the cases, save the LINK to the kill-ring.

Execute this command while the point is on or after the hyper-linked Org link."
    (interactive)
    (when (derived-mode-p 'org-mode)
      (let ((search-invisible t) start end)
        (save-excursion
          (when (re-search-backward "\\[\\[" nil :noerror)
            (when (re-search-forward "\\[\\[\\(.*?\\)\\(\\]\\[.*?\\)*\\]\\]"
                                     nil :noerror)
              (setq start (match-beginning 0))
              (setq end   (match-end 0))
              (kill-new (match-string-no-properties 1)) ;Save link to kill-ring
              (replace-regexp "\\[\\[.*?\\(\\]\\[\\(.*?\\)\\)*\\]\\]" "\\2"
                              nil start end)))))))

  (defun modi/lower-case-org-keywords ()
    "Lower case Org keywords and block identifiers.

Example: \"#+TITLE\" -> \"#+title\"
         \"#+BEGIN_EXAMPLE\" -> \"#+begin_example\"

Inspiration:
https://code.orgmode.org/bzg/org-mode/commit/13424336a6f30c50952d291e7a82906c1210daf0."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((case-fold-search nil)
            (count 0))
        ;; Match examples: "#+FOO bar", "#+FOO:", "=#+FOO=", "~#+FOO~",
        ;;                 "‘#+FOO’", "“#+FOO”", ",#+FOO bar",
        ;;                 "#+FOO_bar<eol>", "#+FOO<eol>".
        (while (re-search-forward "\\(?1:#\\+[A-Z_]+\\(?:_[[:alpha:]]+\\)*\\)\\(?:[ :=~’”]\\|$\\)" nil :noerror)
          (setq count (1+ count))
          (replace-match (downcase (match-string-no-properties 1)) :fixedcase nil nil 1))
        (message "Lower-cased %d matches" count))))
)
;; misc:1 ends here

;; Archive all done tasks

;; [[file:config.org::*Archive all done tasks][Archive all done tasks:1]]
(after! org
  ;; https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command
  (defun vi/org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'tree))
)
;; Archive all done tasks:1 ends here



;; Needs ~brew install pandoc~


;; [[file:config.org::*Import from various formats into org][Import from various formats into org:2]]
(use-package! org-pandoc-import :after org)
;; Import from various formats into org:2 ends here

;; emacs-jupyter fontification

;; https://github.com/nnicandro/emacs-jupyter/issues/366#issuecomment-985758277


;; [[file:config.org::*emacs-jupyter fontification][emacs-jupyter fontification:1]]
(after! org
  (defun display-ansi-colors ()
    (ansi-color-apply-on-region (point-min) (point-max)))

  (add-hook! org-babel-after-execute #'display-ansi-colors)
  )
;; emacs-jupyter fontification:1 ends here



;; Let's use this with file-locals instead


;; [[file:config.org::*literate calc][literate calc:2]]
;; (add-hook! org-mode #'literate-calc-minor-mode)
;; literate calc:2 ends here

;; [[file:config.org::*ein][ein:2]]
(use-package! ein
  :after-call pre-command-hook
  :commands (hydra-ein/body)
  :init
  (setq ein:notebooklist-render-order '(render-opened-notebooks render-directory render-header))
  (setq ein:truncate-long-cell-output 10000)
  (setq ein:cell-max-num-outputs 10000)
  (setq markdown-header-scaling t)
  (setq ein:output-area-inlined-images t)
  (setq ein:url-or-port '("http://localhost:8888"))
  (setq ein:jupyter-server-args '("--no-browser" "--port=8889"))
  ;; https://github.com/millejoh/emacs-ipython-notebook/issues/423#issuecomment-458254069
  (setq ein:query-timeout nil)

  :config
  (defun vi/ein-fix ()
    (interactive)
    (set-face-extend 'ein:cell-input-area t)
    (setq ein:worksheet-enable-undo t)
    (turn-on-undo-tree-mode)
    )

  (defun vi/ein-toggle-inlined-images ()
    (interactive)
    (setq ein:output-area-inlined-images (if ein:output-area-inlined-images nil t))
    )

  (defun vi/restart-and-execute-all-above ()
    (interactive)
    (aif (ein:get-notebook)
        (lexical-let ((ws (ein:worksheet--get-ws-or-error)))
          (ein:kernel-delete-session
           (lambda (kernel)
             (ein:events-trigger (ein:$kernel-events kernel) 'status_restarting.Kernel)
             (ein:kernel-retrieve-session kernel 0
                                          (lambda (kernel)
                                            (ein:events-trigger (ein:$kernel-events kernel)
                                                                'status_restarted.Kernel)
                                            (ein:worksheet-execute-all-cells-above ws))))
           :kernel (ein:$notebook-kernel it)))
      (message "Not in notebook buffer!"))
    )

  (defhydra hydra-ein (:exit t)
    "Ein"
    ("x" ein:worksheet-execute-all-cells-above "Execute all above")
    ("X" vi/restart-and-execute-all-above "Restart & x")
    ("n" ein:notebooklist-open "Notebook list")
    ("l" ein:notebooklist-login "Login")
    ("r" ein:notebook-reconnect-session-command "Reconnect")
    ("R" ein:notebook-restart-session-command "Restart")
    ("i" vi/ein-toggle-inlined-images "Toggle inlined images")
    ("f" vi/ein-fix "Fix")
    ("z" ein:notebook-kernel-interrupt-command "interrupt")
    )
  )
;; ein:2 ends here

;; [[file:config.org::*vterm][vterm:2]]
(setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
(use-package! vterm
  :custom
  (vterm-max-scrollback 100000)
  (vterm-buffer-name-string "vterm: %s")
  :bind
  (
   :map vterm-mode-map
   ("M-j" . nil)
   ("M-k" . nil)
   ("S-<left>" . windmove-left)
   ("S-<right>" . windmove-right)
   ("S-<up>" . windmove-up)
   ("S-<down>" . windmove-down)
   ("C-c C-r" . vterm-send-C-r)
   )
  :hook (
         (vterm-mode . goto-address-mode) ; linkify urls
         (vterm-mode . (lambda () (whitespace-mode -1))) ;don't highlight trailing whitespace
         )
  )

;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Query-Before-Exit.html
(defun vi/vterm-no-confirm-on-exit ()
  (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)
  )

(add-hook! 'vterm-mode-hook #'vi/vterm-no-confirm-on-exit)

(use-package! multi-vterm
  :custom
  (multi-vterm-buffer-name "%s")
  :commands (multi-vterm-next multi-vterm))
;; vterm:2 ends here

;; Flycheck


;; [[file:config.org::*Flycheck][Flycheck:1]]
(use-package! flycheck
  :commands (hydra-flycheck/body)
  :custom
  (flycheck-check-syntax-automatically '(mode-enabled save idle-change idle-buffer-switch))
  (flycheck-idle-change-delay 10)
  (flycheck-idle-buffer-switch-delay 5)
  :config
  (defhydra hydra-flycheck (:exit t)
    "flycheck"
    ("c" (flycheck-buffer) "check buffer")
    ;; annoying in doom, something about popups
    ;; ("l" (flycheck-list-errors) "list errors")
    ("l" consult-flycheck "flycheck")
    ("q" nil "quit")
    )
  )
;; Flycheck:1 ends here

;; magit/git


;; [[file:config.org::*magit/git][magit/git:1]]
(after! magit
  ;; Set magit log date formats
  (setq magit-log-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))

  ;; Add ignored files section to magit status
  (magit-add-section-hook 'magit-status-sections-hook
                          'magit-insert-ignored-files       ;insert this one
                          'magit-insert-unstaged-changes t) ;after this one
  )
;; magit/git:1 ends here

;; Handle bare repos (yadm/$HOME)

;; Yadm (yadm.io) keeps its git directory in .local/share/yadm/repo.git (found this
;; by running =yadm=). This teaches Magit to use the right git directory for $HOME

;; https://github.com/magit/magit/issues/460#issuecomment-837449105


;; [[file:config.org::*Handle bare repos (yadm/$HOME)][Handle bare repos (yadm/$HOME):1]]
(defun home-magit-process-environment (env)
  "Add GIT_DIR and GIT_WORK_TREE to ENV when in a special directory.
https://github.com/magit/magit/issues/460 (@cpitclaudel)."
  (let ((default (file-name-as-directory (expand-file-name default-directory)))
        (home (expand-file-name "~/")))
    (when (string= default home)
      (let ((gitdir (expand-file-name "~/.local/share/yadm/repo.git/")))
        (push (format "GIT_WORK_TREE=%s" home) env)
        (push (format "GIT_DIR=%s" gitdir) env))))
  env)

(advice-add 'magit-process-environment
            :filter-return #'home-magit-process-environment)
;; Handle bare repos (yadm/$HOME):1 ends here

;; Another approach to magit/yadm

;; See https://www.reddit.com/r/emacs/comments/gjukb3/yadm_magit/gasc8n6/



;; [[file:config.org::*Another approach to magit/yadm][Another approach to magit/yadm:1]]
(with-eval-after-load 'tramp
  (add-to-list 'tramp-methods
               '("yadm"
                 (tramp-login-program "yadm")
                 (tramp-login-args (("enter")))
                 (tramp-remote-shell "/bin/bash")
                 (tramp-remote-shell-args ("-c"))))
  (defun yadm-status ()
    (interactive)
    (require 'tramp)
    (with-current-buffer (magit-status "/yadm::")
      )))
;; Another approach to magit/yadm:1 ends here

;; Stage files from dired

;; TODO: Use https://github.com/conao3/dired-git.el instead for the git portion of
;; this. I wonder if it will also "just" work for the yadm case if I'm using
;; /yadm:: dired via tramp

;; https://gist.github.com/justinhj/5945047

;; [[file:config.org::*Stage files from dired][Stage files from dired:1]]
(defun git-add-files(files)
  "Run git add with the input file"
  (shell-command (format "git add %s" files)))

(defun yadm-add-files(files)
  "Run git add with the input file"
  (let ((default-directory "~/"))
    (shell-command (format "yadm add %s" files))))

(defun dired-git-add-marked-files()
  "For each marked file in a dired buffer add it to the index"
  (interactive)
  (if (eq major-mode 'dired-mode)
      (let ((filenames (dired-get-marked-files))
	    (files ""))
	(dolist (fn filenames)
	  (setq fn (shell-quote-argument fn))
	  (setq files (concat files " " fn)))
	(git-add-files files))
    (error (format "Not a Dired buffer \(%s\)" major-mode))))

(defun dired-yadm-add-marked-files()
  "For each marked file in a dired buffer add it to the index"
  (interactive)
  (if (eq major-mode 'dired-mode)
      (let ((filenames (dired-get-marked-files))
	    (files ""))
	(dolist (fn filenames)
	  (setq fn (shell-quote-argument fn))
	  (setq files (concat files " " fn)))
	(yadm-add-files files))
    (error (format "Not a Dired buffer \(%s\)" major-mode))))
;; Stage files from dired:1 ends here

;; [[file:config.org::*LSP][LSP:2]]
(use-package! lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")

  :custom
  ;; We prefer to use TabNine::sem
  (lsp-completion-mode -1)
  (lsp-completion-enable nil)
  (lsp-enable-snippet nil)
  (lsp-prefer-capf nil)

  ;; https://emacs-lsp.github.io/lsp-mode/page/settings/
  (lsp-auto-configure t)
  (lsp-enable-imenu t)
  (lsp-signature-auto-activate t)
  (lsp-headerline-breadcrumb-enable t)
  (lsp-keep-workspace-alive nil)
  (lsp-semantic-tokens-enable nil)      ;no semantic highlighting: rainbow-identifiers
  (lsp-symbol-highlighting-skip-current t)
  (lsp-enable-xref nil)
  (lsp-lens-enable t)

  ;; This will disable the flycheck checkers.
  ;; (lsp-diagnostics-provider :flycheck)

  ;; https://github.com/emacs-lsp/lsp-mode#performance
  (read-process-output-max (* 1024 1024)) ;; 1mb
  (lsp-file-watch-threshold 2000)

  :config
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.venv\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.mypy_cache\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]wandb\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]__pycache__\\'")

  (defhydra hydra-lsp (:exit t :columns 2)
    "LSP"
    ("?" lsp-ui-peek-find-references "Find references")
    ("." lsp-ui-peek-find-definition "Find definition")
    ("e" lsp-treemacs-errors-list "Errors")
    ("i" vi/lsp-ui-imenu "Imenu")
    )

  :hook (
         (python-mode . vi/setup-python-lsp)
         (c++-mode . vi/setup-c++-lsp)
         (lsp-mode . lsp-enable-which-key-integration)
         (lsp-mode . lsp-treemacs-sync-mode)
         )
  :commands (lsp lsp-deferred hydra-lsp/body)
  )


(use-package! lsp-ui
  :after-call after-find-file
  :custom
  (lsp-ui-imenu-window-width 30)
  (lsp-ui-imenu-auto-refresh t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable t)
  (lsp-ui-peek-enable t)
  :config
  (defun vi/lsp-ui-imenu ()
    (interactive)
    (lsp-ui-imenu)
    (window-preserve-size (get-buffer-window lsp-ui-imenu-buffer-name) t t)
    )
  )

(use-package! lsp-treemacs
  :after-call after-find-file
  :custom
  (lsp-treemacs-sync-mode 1)
  )
;; LSP:2 ends here

;; ccls vs clangd

;; doom-emacs default c++ lsp server is ccls. (See https://github.com/hlissner/doom-emacs/issues/2689)

;; Switching to clangd seems to require some or all of the following:

;; 1. Disable ccls package


;; [[file:config.org::*ccls vs clangd][ccls vs clangd:1]]
;; (disable-packages! ccls)
;; ccls vs clangd:1 ends here

;; Turn off lens

;; Lens shows refs for each variable in an overlay which is annoying. Also duplicated between lsp-lens and ccls-code-lens


;; [[file:config.org::*Turn off lens][Turn off lens:1]]
(defun vi/setup-c++-lsp ()
  ;; For now we are using ccls, might want to try clangd someday. ccls is
  ;; default in doom-emacs, switching to clangd didn't work out of the box.
  (setq-local lsp-lens-enable nil)
  (remove-hook! lsp-lens-mode #'ccls-code-lens-mode)
  (ccls-code-lens-mode -1)
  )
;; Turn off lens:1 ends here

;; [[file:config.org::*Python][Python:2]]
(defun vi/setup-python-lsp ()
  ;; mspyls
  ;; (require 'lsp-python-ms)
  ;; (lsp-register-custom-settings '(("python.analysis.downloadChannel" "beta" t)))

  ;; pyright
  (require 'lsp-pyright)
  (lsp-deferred)
  )

(defun vi/setup-python-flycheck ()
  (setq-local flycheck-disabled-checkers '(python-pylint))
  (setq-local flycheck-python-mypy-executable (concat (projectile-project-root) "/.venv/bin/mypy"))
  (flycheck-select-checker 'python-flake8-vi)
  (flycheck-add-next-checker 'python-flake8-vi 'python-mypy-vi)
  )

(setq-hook! 'python-mode-hook +format-with-lsp nil)
(add-hook! 'python-mode-hook #'vi/setup-python-flycheck #'python-black-on-save-mode)
(set-formatter! 'isort "isort --profile=black --stdout -" :modes '(python-mode))

;; even switch-buffer is slow. and we use direnv anyway
;; (after! poetry
;;   (setq poetry-tracking-strategy 'switch-buffer)
;;   )

(after! projectile
  (add-to-list 'projectile-project-root-files "pyproject.toml")
  )
;; Python:2 ends here

;; Define flake8 checkers (for file and project)

;; - the builtin flake8 has to be configured via flake8rc, and I want a python-flake8-project-vi anyway
;; - also the builtin flake8 looks for setup.cfg instead of projectile-project-root for :working-directory
;; - filters flake8 to only pyflakes errors
;; - skips .venv directory


;; [[file:config.org::*Define flake8 checkers (for file and project)][Define flake8 checkers (for file and project):1]]
(after! flycheck
  (flycheck-define-checker python-flake8-vi
    "flake8 -> pyflakes "

    :command ("flake8"
              "--format" "default"
              "--select" "F"                ;only pyflakes
              "--extend-exclude" ".venv"  ;no venvs
              (config-file "--append-config" flycheck-flake8rc)
              (option "--max-complexity" flycheck-flake8-maximum-complexity nil
                      flycheck-option-int)
              (option "--max-line-length" flycheck-flake8-maximum-line-length nil
                      flycheck-option-int)
              source-original)
    :working-directory (lambda (_) (projectile-project-root))
    :error-filter (lambda (errors)
                    (let ((errors (flycheck-sanitize-errors errors)))
                      (seq-map #'flycheck-flake8-fix-error-level errors)))
    :error-patterns
    ((warning line-start
              (file-name) ":" line ":" (optional column ":") " "
              (id (one-or-more (any alpha)) (one-or-more digit)) " "
              (message (one-or-more not-newline))
              line-end))
    :modes python-mode
    )

  (add-to-list 'flycheck-checkers 'python-flake8-vi)

  (flycheck-define-checker python-flake8-project-vi
    "flake8 -> pyflakes, and running on whole project"

    ;; Not calling flake8 directly makes it easier to switch between different
    ;; Python versions; see https://github.com/flycheck/flycheck/issues/1055.
    :command ("flake8"
              "--format" "default"
              "--select" "F"                ;only pyflakes
              "--extend-exclude" ".venv"  ;no venvs
              (config-file "--append-config" flycheck-flake8rc)
              (option "--max-complexity" flycheck-flake8-maximum-complexity nil
                      flycheck-option-int)
              (option "--max-line-length" flycheck-flake8-maximum-line-length nil
                      flycheck-option-int)
              "."
              )
    :working-directory (lambda (_) (projectile-project-root))
    :error-filter (lambda (errors)
                    (let ((errors (flycheck-sanitize-errors errors)))
                      (seq-map #'flycheck-flake8-fix-error-level errors)))
    :error-patterns
    ((warning line-start
              (file-name) ":" line ":" (optional column ":") " "
              (id (one-or-more (any alpha)) (one-or-more digit)) " "
              (message (one-or-more not-newline))
              line-end))
    :modes python-mode
    )

  (add-to-list 'flycheck-checkers 'python-flake8-project-vi)
  )
;; Define flake8 checkers (for file and project):1 ends here

;; Run mypy from projectile root dir

;; There are some weird errors that show up if you don't run mypy from the root directory


;; [[file:config.org::*Run mypy from projectile root dir][Run mypy from projectile root dir:1]]
(after! flycheck
  (flycheck-define-checker python-mypy-vi
    "Mypy syntax and type checker (copied from flycheck, but with :working-directory)"
    :command ("mypy"
              "--show-column-numbers"
              (config-file "--config-file" flycheck-python-mypy-config)
              (option "--cache-dir" flycheck-python-mypy-cache-dir)
              source-original)
    :error-patterns
    ((error line-start (file-name) ":" line (optional ":" column)
            ": error:" (message) line-end)
     (warning line-start (file-name) ":" line (optional ":" column)
              ": warning:" (message) line-end)
     (info line-start (file-name) ":" line (optional ":" column)
           ": note:" (message) line-end))
    :working-directory (lambda (_) (projectile-project-root))
    :modes python-mode
    ;; Ensure the file is saved, to work around
    ;; https://github.com/python/mypy/issues/4746.
    :predicate flycheck-buffer-saved-p)

  (add-to-list 'flycheck-checkers 'python-mypy-vi))
;; Run mypy from projectile root dir:1 ends here

;; Run mypy for the entire project


;; [[file:config.org::*Run mypy for the entire project][Run mypy for the entire project:1]]
(after! flycheck
  (flycheck-define-checker python-mypy-project-vi
    "Mypy the entire project"
    :command ("mypy"
              "--show-column-numbers"
              (config-file "--config-file" flycheck-python-mypy-config)
              (option "--cache-dir" flycheck-python-mypy-cache-dir)
              "."
              )
    :error-patterns
    ((error line-start (file-name) ":" line (optional ":" column)
            ": error:" (message) line-end)
     (warning line-start (file-name) ":" line (optional ":" column)
              ": warning:" (message) line-end)
     (info line-start (file-name) ":" line (optional ":" column)
           ": note:" (message) line-end))
    :working-directory (lambda (_) (projectile-project-root))
    :modes python-mode
    )
  (add-to-list 'flycheck-checkers 'python-mypy-project-vi)
  )
;; Run mypy for the entire project:1 ends here

;; Projectile



;; [[file:config.org::*Projectile][Projectile:1]]
(use-package! projectile
  :custom
  (projectile-project-search-path '("~/dev"))
  (projectile-auto-discover t)
  (projectile-indexing-method 'alien)
  )
;; Projectile:1 ends here

;; [[file:config.org::*Javascript/Typescript][Javascript/Typescript:2]]
(setq-hook! '(typescript-mode-hook rjsx-mode-hook) +format-with-lsp nil)
(add-hook! '(typescript-mode-hook rjsx-mode-hook) #'add-node-modules-path)
;; Javascript/Typescript:2 ends here

;; Treemacs



;; [[file:config.org::*Treemacs][Treemacs:1]]
(after! treemacs
  (setq treemacs-show-hidden-files nil
        treemacs-is-never-other-window nil)
  (treemacs-project-follow-mode t)
  (treemacs-follow-mode t)
  )
;; Treemacs:1 ends here

;; [[file:config.org::*Firestarter][Firestarter:2]]
(use-package! firestarter
  :after-call after-find-file
  :custom
  (firestarter-mode)
  )
;; Firestarter:2 ends here

;; dir-locals

;; https://emacs.stackexchange.com/questions/13080/reloading-directory-local-variables

;; [[file:config.org::*dir-locals][dir-locals:1]]
(defun vi/reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(defun vi/reload-dir-locals-for-all-buffer-in-this-directory ()
  "For every buffer with the same `default-directory` as the
current buffer's, reload dir-locals."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir))
        (vi/reload-dir-locals-for-current-buffer)))))
;; dir-locals:1 ends here



;; dockfmt does a bad job: rips out comments, uses tabs.


;; [[file:config.org::*docker][docker:2]]
(after! dockerfile-mode
  (setq-hook! 'dockerfile-mode-hook +format-with :none))


(after! ob-tangle
  (setq org-babel-pre-tangle-hook
        (list (lambda ()
                (let (before-save-hook after-save-hook)
                  (save-buffer))))))
;; docker:2 ends here

;; Cuda mode doesn't inherit from prog-mode?

;; [[file:config.org::*Cuda mode doesn't inherit from prog-mode?][Cuda mode doesn't inherit from prog-mode?:1]]
(add-hook! 'cuda-mode-hook #'prog-mode)
;; Cuda mode doesn't inherit from prog-mode?:1 ends here

;; shell mode



;; [[file:config.org::*shell mode][shell mode:1]]
(setq-hook! sh-mode +format-with :none)
;; shell mode:1 ends here

;; [[file:config.org::*atomic chrome][atomic chrome:2]]
(use-package! atomic-chrome
  :after-call after-find-file
  :custom
  (atomic-chrome-default-major-mode 'python-mode)
  (atomic-chrome-url-major-mode-alist
   '(("\\.ipynb$" . python-mode))
   )
  ;; (atomic-chrome-extension-type-list '(atomic-chrome))
  (atomic-chrome-buffer-open-style 'full)

  :config
  (atomic-chrome-start-server)
  )
;; atomic chrome:2 ends here



;; - [ ] Fix vi/setup-annotate to handle src buffers in org-mode (buffer-file-name is nil). What should this do? will the default file work?



;; [[file:config.org::*annotate][annotate:2]]
(defun vi/setup-annotate ()
  (when (buffer-file-name)
    (setq-local annotate-file (expand-file-name (concat buffer-file-name ".annotate")))))

;; No longer used: this was for https://github.com/bastibe/annotate.el/issues/104
;; (defun vi/annotate-annotate ()
;;   (interactive)
;;   ;; Turn on annotate-mode if not already
;;   (unless annotate-mode (annotate-mode))
;;   (annotate-annotate)
;;   )

(use-package! annotate
  :after-call after-find-file
  :custom
  (annotate-endline-annotate-whole-line t)
  (annotate-database-confirm-deletion nil)
  (annotate-use-echo-area nil)          ;shows in overlays
  (annotate-use-messages nil)           ;No messages like "annotations loaded"
  (annotate-annotation-max-size-not-place-new-line 200)
  (annotate-annotation-position-policy :by-length)
  :hook (
         ;; disable in general prog-mode for time-being - leads to args-out-of-range errors in company? [Jan 24 2022]
         ;; (prog-mode . annotate-mode)
         (annotate-mode . vi/setup-annotate)
         )
  :config
  (set-face-attribute 'annotate-annotation nil :foreground "red" :background "white")
  (set-face-attribute 'annotate-annotation-secondary nil :foreground "red" :background "white")
  (set-face-attribute 'annotate-highlight nil :underline "#51afef" :background "#2c3946")
  (set-face-attribute 'annotate-highlight-secondary nil :underline "#51afef" :background "#2c3946")
  (defhydra hydra-annotate (:exit t :columns 2)
    "Annotate"
    ("a" annotate-annotate "Add")
    ("l" annotate-summary-of-file-from-current-pos "list")
    )
  )
;; annotate:2 ends here
