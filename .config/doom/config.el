;; config.el

;; [[file:config.org::*config.el][config.el:1]]
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:

;; On ubuntu this would be set in Tweaks, but on mac we have to set it here
(setq doom-font (font-spec :family "Iosevka Nerd Font Mono" :size 12))
;;  doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory (file-truename "~/org/"))

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;; config.el:1 ends here

;; Themes


;; [[file:config.org::*Themes][Themes:1]]
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; Themes:1 ends here



;; https://protesilaos.com/emacs/modus-themes


;; [[file:config.org::*modus][modus:2]]
(setq!
  modus-themes-disable-other-themes t
  modus-themes-italic-constructs t
  modus-themes-bold-constructs t
  modus-themes-mixed-fonts nil
  modus-themes-variable-pitch-ui nil
  modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}
  )
(setq! modus-themes-common-palette-overrides
  '(
     ;;(bg-region bg-dim)

     (fg-region unspecified)
     (border-mode-line-active unspecified)
     (border-mode-line-inactive unspecified)
     (fg-mode-line-active fg-main)
     (border-mode-line-active blue-intense)
     (bg-tab-bar bg-main)
     (bg-tab-current bg-cyan-intense)
     (bg-tab-other bg-inactive)
     (bg-paren-match bg-magenta-intense)
     (prose-done green-intense)
     (prose-todo red-intense)

     ;; headings
     (fg-heading-1 fg-main)
     (bg-heading-1 bg-dim)
     (overline-heading-1 border)

     )
  )
(setq doom-theme 'modus-vivendi-tinted)
;; modus:2 ends here



;; doom-debug-p renamed to init-file-debug (https://github.com/doomemacs/doomemacs/commit/14b239542414db812b32f9eca4fb58016d93d687)
;; ~emacs --debug-init~ to do profiling

;; according to the doom emacs issues, this block should be in init.el, but that
;; doesn't work.. so it's at the beginning of config.el and commented out.


;; [[file:config.org::*profiling code][profiling code:2]]
(when init-file-debug
  ;; https://github.com/dholm/benchmark-init-el/issues/15#issuecomment-766083560
  (define-advice define-obsolete-function-alias (:filter-args (ll) fix-obsolete)
    (let ((obsolete-name (pop ll))
          (current-name (pop ll))
          (when (if ll (pop ll) "1"))
          (docstring (if ll (pop ll) nil)))
      (list obsolete-name current-name when docstring)))
  ;; (require 'benchmark-init-modes)
  (require 'benchmark-init)
  (add-hook 'doom-first-input-hook #'benchmark-init/deactivate))
;; profiling code:2 ends here

;; Timestamped \*Messages\*

;; https://old.reddit.com/r/emacs/comments/16tzu9/anyone_know_of_a_reasonable_way_to_timestamp/

;; [[file:config.org::*Timestamped \*Messages\*][Timestamped \*Messages\*:1]]
;; timestamps in *Messages*

(require 'ts)
(defalias 'message-plain (symbol-function 'message))
(defun message (fmt-string &rest args)
  (let ((message-truncate-lines t))
    (apply
     'message-plain
     (concat (ts-format "[%Y-%m-%dT%T]: ") fmt-string)
     args)))
;; Timestamped \*Messages\*:1 ends here

;; General

;; [[file:config.org::*General][General:1]]
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Venky Iyer"
      user-mail-address "indigoviolet@gmail.com")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;; For some reason Doom disables auto-save and backup files by default. Let's reenable them.
(setq auto-save-default t
      make-backup-files t)

;; Disable exit confirmation.
(setq confirm-kill-emacs nil)

;; indent anywhere, no completion on tab
(setq tab-always-indent t)

(setq scroll-preserve-screen-position 'always)

;; gets pageup/pagedown to ends of buffer
(setq scroll-error-top-bottom t)

;; https://stackoverflow.com/a/19782939/14044156
(setq suggest-key-bindings nil)

;; ;; truncates lines so that when you scroll toward the end of one, the line
;; ;; itself moves to the left independently of the rest of the text.
;; (setq auto-hscroll-mode 'current-line)
(setq auto-hscroll-mode t) ; not 'current-line

;; line wrapping
;;
(global-visual-line-mode t)
(add-hook! '(prog-mode-hook bufler-list-mode-hook)
           (defun vi/truncate-lines ()
             (setq-local truncate-partial-width-windows t)
             (visual-line-mode -1)))

;; truncate-lines t)
;;
(setq message-truncate-lines t)


;; https://www.masteringemacs.org/article/demystifying-emacs-window-manager
(setq switch-to-buffer-obey-display-actions t)

(global-git-gutter-mode t)

;; (repeat-mode 1)

(require 'server)
(unless (server-running-p)
  (server-start))

;; https://pragmaticemacs.wordpress.com/2016/11/07/add-the-system-clipboard-to-the-emacs-kill-ring/
;; Save whatever’s in the current (system) clipboard before
;; replacing it with the Emacs’ text.
;; https://github.com/dakrone/eos/blob/master/eos.org
(setq save-interprogram-paste-before-kill t)
;; General:1 ends here

;; uniquify



;; [[file:config.org::*uniquify][uniquify:1]]
(setq! uniquify-buffer-name-style 'post-forward
  uniquify-after-kill-buffer-p t
  uniquify-min-dir-content 3
  uniquify-separator " | "
  uniquify-strip-common-prefix t)
;; uniquify:1 ends here

;; whitespace



;; [[file:config.org::*whitespace][whitespace:1]]
;; (global-whitespace-mode +1)
(setq! whitespace-style '(face tabs tab-mark trailing))
(add-hook! (prog-mode org-mode text-mode) (whitespace-mode t))
;; whitespace:1 ends here

;; specpdl size

;; https://old.reddit.com/r/emacs/comments/9jp9zt/anyone_know_what_variable_binding_depth_exceeds/

;; [[file:config.org::*specpdl size][specpdl size:1]]
(setq max-specpdl-size 25000)
;; specpdl size:1 ends here

;; Custom.el handling


;; [[file:config.org::*Custom.el handling][Custom.el handling:1]]
;; (setq custom-file (make-temp-file "emacs-custom"))
(setq custom-file (expand-file-name "custom.el" doom-private-dir))
;; (setq custom-file "/tmp/emacs-custom")

(load custom-file 'noerror)
;; Custom.el handling:1 ends here

;; dir-locals.el safe Variables

;; Turn off "don't remember risky variables" feature


;; [[file:config.org::*dir-locals.el safe Variables][dir-locals.el safe Variables:1]]
;; https://emacs.stackexchange.com/a/44604
;; This actually just skips them instead of setting them regardless
;; (advice-add 'risky-local-variable-p :override #'ignore)


(setq enable-local-variables :all)
;; dir-locals.el safe Variables:1 ends here

;; Prevent *Warnings* buffer from popping up



;; [[file:config.org::*Prevent *Warnings* buffer from popping up][Prevent *Warnings* buffer from popping up:1]]
(setq warning-minimum-level :error)
;; Prevent *Warnings* buffer from popping up:1 ends here

;; Unadvice functions

;; https://emacs.stackexchange.com/a/24658 -- not sure if this works?


;; [[file:config.org::*Unadvice functions][Unadvice functions:1]]
(defun advice-unadvice (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))
;; Unadvice functions:1 ends here

;; [[file:config.org::*persistent scratch][persistent scratch:2]]
(use-package! persistent-scratch
  :after-call doom-first-buffer-hook
  :custom
  (persistent-scratch-save-file (concat doom-emacs-dir "persistent-scratch"))
  :config
  (persistent-scratch-setup-default)
  )
;; persistent scratch:2 ends here

;; backups





;; [[file:config.org::*backups][backups:1]]
(defun vi/backup-enable-predicate (filename)
  "Enable backup for files in specific directories and their subdirectories"
  (let ((dirs '("~/.config/doom/"
                 )))
    (cl-some (lambda (dir)
               (string-prefix-p (file-truename dir) (file-truename filename)))
             dirs)))
(defvar --backup-directory (concat doom-emacs-dir "backups"))
(if (not (file-exists-p --backup-directory))
        (make-directory --backup-directory t))

(setq backup-directory-alist `(("." . ,--backup-directory)))
(setq make-backup-files t               ; backup of a file the first time it is saved.
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)

  backup-enable-predicate #'vi/backup-enable-predicate
      )

(defun vi/backup-files ()
  "Find backup files for a specified file."
  (interactive)
  (let* ((filename (read-file-name "Enter file name: "))
         (backup-files (file-backup-file-names filename)))
    (if backup-files
      (let ((backup-file (completing-read "Select backup file: " backup-files)))
        (find-file backup-file))
      (message "No backup files found for %s" filename))))
;; backups:1 ends here

;; Global keybindings



;; [[file:config.org::*Global keybindings][Global keybindings:1]]
(map! "M-i" #'delete-indentation
      "M-t" #'beginning-of-buffer
      "M-z" #'end-of-buffer
  "<escape>" #'keyboard-escape-quit
      "C-x k" #'kill-buffer-and-window
      "<f5>" (cmd! (revert-buffer t t)))
;; Global keybindings:1 ends here

;; digit-argument

;; Unbind digit-argument keys across multiple maps -- we never use this and it's
;; occupying keyspace


;; [[file:config.org::*digit-argument][digit-argument:1]]
(dolist (num (number-sequence 0 9))
  (dolist (prefix (list "C-" "M-" "C-M-" "ESC "))
    (let ((k (concat prefix (format "%s" num))))
      (map! :map (global-map splash-screen-keymap) k nil)
      )))
;; digit-argument:1 ends here



;; https://old.reddit.com/r/emacs/comments/qfhzjg/make_better_use_of_cx_ce/



;; [[file:config.org::*Eval][Eval:2]]
(use-package! pp+
  :commands (pp-eval-expression pp-eval-last-sexp)
  :custom
  (pp-max-tooltip-size nil) ;; (cons 40 20)) ;; tooltips are slowww
  :config
  (global-set-key [remap eval-expression] 'pp-eval-expression)
  ;; (global-set-key [remap eros-eval-last-sexp] 'pp-eval-last-sexp)
  (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp))
;; Eval:2 ends here

;; [[file:config.org::*(Disable) Mouse][(Disable) Mouse:2]]
(use-package! disable-mouse
  :after-call doom-first-input-hook
  :config
  (global-disable-mouse-mode))
;; (Disable) Mouse:2 ends here

;; [[file:config.org::*Chords][Chords:2]]
;; distributed with use-package? TODO errors -- use key-chord-define-global directly
;; (use-package! use-package-chords)

(use-package! key-chord
  :after-call doom-first-input-hook
  :custom

  ;; Max time delay between two key presses to be considered a key chord
  (key-chord-two-keys-delay 0.2) ; default 0.1

  ;; Max time delay between two presses of the same key to be considered a key chord.
  ;; Should normally be a little longer than `key-chord-two-keys-delay'.
  (key-chord-one-key-delay 0.3) ; default 0.2

  :config (key-chord-mode 1)
  )
;; Chords:2 ends here

;; [[file:config.org::*dim other buffers][dim other buffers:2]]
(use-package! auto-dim-other-buffers
  :after-call doom-first-buffer-hook
  :config
  (auto-dim-other-buffers-mode t)
  )
;; dim other buffers:2 ends here

;; [[file:config.org::*Rainbow][Rainbow:2]]
(use-package! rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  :custom
  (rainbow-delimiters-max-face-count 9)

  :config
  (set-face-foreground 'rainbow-delimiters-depth-1-face "white")
  (set-face-foreground 'rainbow-delimiters-depth-2-face "cyan")
  (set-face-foreground 'rainbow-delimiters-depth-3-face "yellow")
  (set-face-foreground 'rainbow-delimiters-depth-4-face "green")
  (set-face-foreground 'rainbow-delimiters-depth-5-face "orange")
  (set-face-foreground 'rainbow-delimiters-depth-6-face "purple")
  (set-face-foreground 'rainbow-delimiters-depth-7-face "white")
  (set-face-foreground 'rainbow-delimiters-depth-8-face "cyan")
  (set-face-foreground 'rainbow-delimiters-depth-9-face "yellow")
  (set-face-foreground 'rainbow-delimiters-unmatched-face "red"))


(use-package! rainbow-identifiers
  :init
  ;; Use C-u what-cursor-position to figure out what face
  ;; https://stackoverflow.com/questions/1242352/get-font-face-under-cursor-in-emacs
  (setq rainbow-identifiers-faces-to-override '(font-lock-type-face
                                                font-lock-variable-name-face
                                                font-lock-function-name-face
                                                font-lock-function-name-face
                                                font-lock-constant-face
                                                ;; font-lock-string-face

                                                js2-function-call
                                                js2-object-property
                                                js2-object-property-access

                                                ))


  :config
  (setq rainbow-identifiers-face-count 222)
  ;; (setq rainbow-identifiers-choose-face-function (quote rainbow-identifiers-cie-l*a*b*-choose-face))
  (setq rainbow-identifiers-choose-face-function (quote rainbow-identifiers-predefined-choose-face))

  (defmacro vi-rainbow-identifiers--define-faces ()
    (let ((faces '())
          ;; Light colors don't matter, but we need them to define the face
          (light-colors [
                         ;; "#78683f" "#43783f" "#3f7178" "#513f78" "#783f5a"
                         ;; "#707e4f" "#4f7e67" "#4f5c7e" "#7a4f7e" "#7e544f"
                         ;; "#783778" "#784437" "#5e7837" "#37785e" "#374478"

                         ;; 219 colors derived from list-colors-display with dark colors removed
                         "#0000af" "#0000d7" "#0000ee" "#0000ff" "#005f00" "#005f5f" "#005f87"
                         "#005faf" "#005fd7" "#005fff" "#008700" "#00875f" "#008787" "#0087af"
                         "#0087d7" "#0087ff" "#00af00" "#00af5f" "#00af87" "#00afaf" "#00afd7"
                         "#00afff" "#00cd00" "#00cdcd" "#00d700" "#00d75f" "#00d787" "#00d7af"
                         "#00d7d7" "#00d7ff" "#00ff00" "#00ff5f" "#00ff87" "#00ffaf" "#00ffd7"
                         "#00ffff" "#5c5cff"
                         ;; "#5f0000" "#5f005f"
                         ;; "#5f0087"
                         ;; "#5f00af"
                         ;; "#5f00d7"
                         ;; "#5f00ff"
                         "#5f5f00" "#5f5f5f" "#5f5f87" "#5f5faf" "#5f5fd7" "#5f5fff"
                         "#5f8700" "#5f875f" "#5f8787" "#5f87af" "#5f87d7" "#5f87ff" "#5faf00"
                         "#5faf5f" "#5faf87" "#5fafaf" "#5fafd7" "#5fafff" "#5fd700" "#5fd75f"
                         "#5fd787" "#5fd7af" "#5fd7d7" "#5fd7ff" "#5fff00" "#5fff5f" "#5fff87"
                         "#5fffaf" "#5fffd7" "#5fffff" "#7f7f7f"
                         ;; "#870000"
                         "#87005f"
                         ;; "#870087"
                         "#8700af"
                         ;; "#8700d7"
                         ;; "#8700ff"
                         "#875f00" "#875f5f" "#875f87" "#875faf"
                         "#875fd7" "#875fff" "#878700" "#87875f" "#878787" "#8787af" "#8787d7"
                         "#8787ff" "#87af00" "#87af5f" "#87af87" "#87afaf" "#87afd7" "#87afff"
                         "#87d700" "#87d75f" "#87d787" "#87d7af" "#87d7d7" "#87d7ff" "#87ff00"
                         "#87ff5f" "#87ff87" "#87ffaf" "#87ffd7" "#87ffff" "#af0000" "#af005f"
                         "#af0087" "#af00af" "#af00d7" "#af00ff" "#af5f00" "#af5f5f" "#af5f87"
                         "#af5faf" "#af5fd7" "#af5fff" "#af8700" "#af875f" "#af8787" "#af87af"
                         "#af87d7" "#af87ff" "#afaf00" "#afaf5f" "#afaf87" "#afafaf" "#afafd7"
                         "#afafff" "#afd700" "#afd75f" "#afd787" "#afd7af" "#afd7d7" "#afd7ff"
                         "#afff00" "#afff5f" "#afff87" "#afffaf" "#afffd7" "#afffff" "#cd0000"
                         "#cd00cd" "#cdcd00" "#d70000" "#d7005f" "#d70087" "#d700af" "#d700d7"
                         "#d700ff" "#d75f00" "#d75f5f" "#d75f87" "#d75faf" "#d75fd7" "#d75fff"
                         "#d78700" "#d7875f" "#d78787" "#d787af" "#d787d7" "#d787ff" "#d7af00"
                         "#d7af5f" "#d7af87" "#d7afaf" "#d7afd7" "#d7afff" "#d7d700" "#d7d75f"
                         "#d7d787" "#d7d7af" "#d7d7d7" "#d7d7ff" "#d7ff00" "#d7ff5f" "#d7ff87"
                         "#d7ffaf" "#d7ffd7" "#d7ffff" "#e5e5e5" "#ff0000" "#ff005f" "#ff0087"
                         "#ff00af" "#ff00d7" "#ff00ff" "#ff5f00" "#ff5f5f" "#ff5f87" "#ff5faf"
                         "#ff5fd7" "#ff5fff" "#ff8700" "#ff875f" "#ff8787" "#ff87af" "#ff87d7"
                         "#ff87ff" "#ffaf00" "#ffaf5f" "#ffaf87" "#ffafaf" "#ffafd7" "#ffafff"
                         "#ffd700" "#ffd75f" "#ffd787" "#ffd7af" "#ffd7d7" "#ffd7ff" "#ffff00"
                         "#ffff5f" "#ffff87" "#ffffaf" "#ffffd7" "#ffffff"
                         ])
          (dark-colors [
                        ;; Original 15
                        ;; "#9999bb" "#bb99b4" "#bba699" "#a6bb99" "#99bbb4"
                        ;; "#e0d0a0" "#a3e0a0" "#a0d6e0" "#b6a0e0" "#e0a0bc"
                        ;; "#a7c0b9" "#a7aac0" "#c0a7bd" "#c0afa7" "#b3c0a7"

                        ;; 219 colors derived from list-colors-display with dark colors removed
                        "#0000af" "#0000d7" "#0000ee" "#0000ff" "#005f00" "#005f5f" "#005f87"
                        "#005faf" "#005fd7" "#005fff" "#008700" "#00875f" "#008787" "#0087af"
                        "#0087d7" "#0087ff" "#00af00" "#00af5f" "#00af87" "#00afaf" "#00afd7"
                        "#00afff" "#00cd00" "#00cdcd" "#00d700" "#00d75f" "#00d787" "#00d7af"
                        "#00d7d7" "#00d7ff" "#00ff00" "#00ff5f" "#00ff87" "#00ffaf" "#00ffd7"
                        "#00ffff" "#5c5cff"
                        ;; "#5f0000" too dark
                        ;; "#5f005f" too dark
                        ;; "#5f0087"
                        ;; "#5f00af" "#5f00d7"
                        ;; "#5f00ff"
                        "#5f5f00" "#5f5f5f" "#5f5f87" "#5f5faf" "#5f5fd7" "#5f5fff"
                        "#5f8700" "#5f875f" "#5f8787" "#5f87af" "#5f87d7" "#5f87ff" "#5faf00"
                        "#5faf5f" "#5faf87" "#5fafaf" "#5fafd7" "#5fafff" "#5fd700" "#5fd75f"
                        "#5fd787" "#5fd7af" "#5fd7d7" "#5fd7ff" "#5fff00" "#5fff5f" "#5fff87"
                        "#5fffaf" "#5fffd7" "#5fffff" "#7f7f7f"
                        ;; "#870000"  too dark
                        "#87005f"
                        ;; "#870087"
                        "#8700af"
                        ;; "#8700d7"
                        ;; "#8700ff"
                        "#875f00" "#875f5f" "#875f87" "#875faf"
                        "#875fd7" "#875fff" "#878700" "#87875f" "#878787" "#8787af" "#8787d7"
                        "#8787ff" "#87af00" "#87af5f" "#87af87" "#87afaf" "#87afd7" "#87afff"
                        "#87d700" "#87d75f" "#87d787" "#87d7af" "#87d7d7" "#87d7ff" "#87ff00"
                        "#87ff5f" "#87ff87" "#87ffaf" "#87ffd7" "#87ffff" "#af0000" "#af005f"
                        "#af0087" "#af00af" "#af00d7" "#af00ff" "#af5f00" "#af5f5f" "#af5f87"
                        "#af5faf" "#af5fd7" "#af5fff" "#af8700" "#af875f" "#af8787" "#af87af"
                        "#af87d7" "#af87ff" "#afaf00" "#afaf5f" "#afaf87" "#afafaf" "#afafd7"
                        "#afafff" "#afd700" "#afd75f" "#afd787" "#afd7af" "#afd7d7" "#afd7ff"
                        "#afff00" "#afff5f" "#afff87" "#afffaf" "#afffd7" "#afffff" "#cd0000"
                        "#cd00cd" "#cdcd00" "#d70000" "#d7005f" "#d70087" "#d700af" "#d700d7"
                        "#d700ff" "#d75f00" "#d75f5f" "#d75f87" "#d75faf" "#d75fd7" "#d75fff"
                        "#d78700" "#d7875f" "#d78787" "#d787af" "#d787d7" "#d787ff" "#d7af00"
                        "#d7af5f" "#d7af87" "#d7afaf" "#d7afd7" "#d7afff" "#d7d700" "#d7d75f"
                        "#d7d787" "#d7d7af" "#d7d7d7" "#d7d7ff" "#d7ff00" "#d7ff5f" "#d7ff87"
                        "#d7ffaf" "#d7ffd7" "#d7ffff" "#e5e5e5" "#ff0000" "#ff005f" "#ff0087"
                        "#ff00af" "#ff00d7" "#ff00ff" "#ff5f00" "#ff5f5f" "#ff5f87" "#ff5faf"
                        "#ff5fd7" "#ff5fff" "#ff8700" "#ff875f" "#ff8787" "#ff87af" "#ff87d7"
                        "#ff87ff" "#ffaf00" "#ffaf5f" "#ffaf87" "#ffafaf" "#ffafd7" "#ffafff"
                        "#ffd700" "#ffd75f" "#ffd787" "#ffd7af" "#ffd7d7" "#ffd7ff" "#ffff00"
                        "#ffff5f" "#ffff87" "#ffffaf" "#ffffd7" "#ffffff"
                        ]))
      (dotimes (i 212)
        (push `(defface ,(intern (format "rainbow-identifiers-identifier-%d" (1+ i)))
                 '((((class color) (background dark)) :foreground ,(aref dark-colors i))
                   ;; doesn't matter, we don't use light background
                   (((class color) (background light)) :foreground ,(aref light-colors i)))
                 ,(format "Identifier face #%d" (1+ i))
                 :group 'rainbow-identifiers-faces)
              faces))
      `(progn ,@faces)))
  (vi-rainbow-identifiers--define-faces)

  :hook
  ((prog-mode . rainbow-identifiers-mode)
  (yaml-mode . rainbow-identifiers-mode))
  )
;; Rainbow:2 ends here

;; ansi colors

;; Changes the colors used for mapping from SGR codes to emacs colors, in the
;; function ~ansi-color-apply~ in ansi-colors.el

;; These are controlled by the variable ~ansi-color-normal-colors-vector~~ which
;; lists a bunch of faces like ~ansi-color-red~

;; This is used in ein:tb buffers to (presumably) display some server-side
;; traceback in emacs, and ansi-color-yellow is particularly hard to read.
;; (:background yellow3)


;; [[file:config.org::*ansi colors][ansi colors:1]]
(custom-set-faces!
  '(ansi-color-yellow :background "orange4")
  )
;; ansi colors:1 ends here

;; hl-line



;; [[file:config.org::*hl-line][hl-line:1]]
;; https://christiantietze.de/posts/2022/03/hl-line-priority/
(setq hl-line-overlay-priority -100)
;; hl-line:1 ends here

;; cursor



;; [[file:config.org::*cursor][cursor:1]]
(blink-cursor-mode)

;; Addition to nav-flash
;; (dolist (command '(scroll-up-command scroll-down-command previous-line next-line
;;                    recenter-top-bottom other-window))
;;   ;; (advice-add command :after #'pulse-line)
;;   (advice-add command :after #'+nav-flash-delayed-blink-cursor-h)
;;   )
;; cursor:1 ends here

;; [[file:config.org::*pulsar][pulsar:2]]
(use-package! pulsar
  :custom
  (pulsar-pulse t)
  (pulsar-delay 0.05)
  (pulsar-iterations 3)
  (pulsar-face 'pulsar-red)
  (pulsar-highlight-face 'pulsar-yellow)
  :config
  (pulsar-global-mode 1)
  :hook ((consult-after-jump . pulsar-recenter-top)
          (consult-after-jump . pulsar-reveal-entry)
          )
  :bind (
          ("C-x l" . pulsar-highlight-dwim)
          ("C-l" . pulsar-recenter-middle)
          )
  )

(custom-set-faces! '(pulsar-red :background "red"))
;; pulsar:2 ends here

;; font lock

;; Does this make things faster?

;; [[file:config.org::*font lock][font lock:1]]
(setq font-lock-maximum-decoration nil)
;; font lock:1 ends here

;; [[file:config.org::*highlights][highlights:2]]
(volatile-highlights-mode -1)
(use-package! goggles
  :hook ((prog-mode text-mode org-mode) . goggles-mode)
  :config
  (setq-default goggles-pulse t)) ;; set to nil to disable pulsing
;; highlights:2 ends here

;; with parens-mode


;; [[file:config.org::*with parens-mode][with parens-mode:1]]
  (after! paren
    (setq show-paren-style 'expression)
    (setq show-paren-priority -25)
    (setq show-paren-delay 0.5)
    (custom-set-faces!
      ;; these are modus operandi faces
      '(show-paren-match :inherit bg-paren-match)
      '(show-paren-match-expression :inherit bg-paren-expression)
      '(show-paren-mismatch :weight bold :underline t :slant normal)
      ))
;; https://github.com/doomemacs/doomemacs/issues/6223
  (remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
;; with parens-mode:1 ends here

;; [[file:config.org::*wrap region][wrap region:2]]
(use-package! wrap-region
  :after-call doom-first-input-hook
  :config
  (wrap-region-add-wrapper "~" "~" nil '(org-mode))
  (wrap-region-add-wrapper "'" "'" nil '(prog-mode))
  (wrap-region-add-wrapper "\"" "\"" nil '(prog-mode))
  :hook ((prog-mode . wrap-region-mode)
          (org-mode . wrap-region-mode))
  )
;; wrap region:2 ends here

;; Garbage collection


;; [[file:config.org::*Garbage collection][Garbage collection:1]]
(use-package! gcmh
    :custom
    (gcmh-verbose t)
    (gcmh-idle-delay 30)                ;;'auto)
    (gcmh-high-cons-threshold 10000000000)
  )
;; Garbage collection:1 ends here

;; Indentation


;; [[file:config.org::*Indentation][Indentation:1]]
(use-package! emacs
    :after-call doom-first-buffer-hook
    :custom
    (lisp-body-indent 4)
    (lisp-indent-offset 2))
;; Indentation:1 ends here

;; Debug hooks


;; [[file:config.org::*Debug hooks][Debug hooks:1]]
(defun vi/call-logging-hooks (command &optional verbose)
  "Call COMMAND, reporting every hook run in the process.
Interactively, prompt for a command to execute.

Return a list of the hooks run, in the order they were run.
Interactively, or with optional argument VERBOSE, also print a
message listing the hooks."
  (interactive "CCommand to log hooks: \np")
  (let* ((log nil)
         (logger (lambda (&rest hooks)
                   (setq log (append log hooks nil)))))
    (vi/with-advice 'run-hooks :before logger
                    (call-interactively command))
    (when verbose
      (message
       (if log "Hooks run during execution of %s:"
         "No hooks run during execution of %s.")
       command)
      (dolist (hook log)
        (message "> %s" hook)))
    log))


(defmacro vi/with-advice (func where adfunc body)
  `(unwind-protect
       (progn
         (advice-add ,func ,where ,adfunc '((name . "vi/with-advice")))
         ,body)
     (advice-remove ,func "vi/with-advice")))
;; Debug hooks:1 ends here



;; Notes:

;; - If a file is incorrectly marked read-only by hardhat, check variable ~~hardhat-reasons~~ (buffer-local), or ~hardhat-status~
;; - ~hardhat-computed-regexps~ is _cached_. Clear using ~(puthash major-mode nil hardhat-computed-regexps)~ -- see the hook below
;; - hardhat will only act after _the first interactive command in the buffer_


;; [[file:config.org::*Find file - mark readonly][Find file - mark readonly:2]]
(use-package! hardhat
  :after-call doom-first-file-hook
  :config
  (add-to-list 'hardhat-fullpath-protected-regexps "/node_modules/")
  (add-to-list 'hardhat-fullpath-protected-regexps "/site-packages/")
  (add-to-list 'hardhat-fullpath-protected-regexps "/straight/repos/")

  ;; We want to edit Jupytext files via ein/Jupyter
  (add-to-list 'hardhat-bof-content-protected-regexps '(python-mode . "^# +jupytext:"))

  ;; ignoramus-file-exact-names matches this
  ;; hardhat-fullpath-editable-regexps doesn't match it in all cases (eg. yadm/repo.git/COMMIT_EDITMSG)
  (add-to-list 'hardhat-basename-editable-regexps "\\`COMMIT_EDITMSG\\'")

  ;; (setq ignoramus-file-exact-names (remove "COMMIT_EDITMSG" ignoramus-file-exact-names))

  ;; clear the cache upon toggling
  (add-hook! 'hardhat-mode-hook (puthash major-mode nil hardhat-computed-regexps))
  (global-hardhat-mode 1)
  )
;; Find file - mark readonly:2 ends here

;; Auto saving and backups

;; https://pragmaticemacs.wordpress.com/2016/05/23/auto-save-and-backup-every-save/


;; [[file:config.org::*Auto saving and backups][Auto saving and backups:1]]
;; Every 20 characters
(setq! auto-save-interval 20)
;; Auto saving and backups:1 ends here

;; backups


;; [[file:config.org::*backups][backups:1]]
(setq! kept-new-versions 20
       vc-make-backup-files t
       kept-old-versions 0)
;; backups:1 ends here

;; modeline

;; Debugging: look at mode-line-format, mode-line-misc-info

;; TODO: would like to add a segment like anzu for iterm, ctrlf


;; [[file:config.org::*modeline][modeline:1]]
(setq doom-emoji-fallback-font-families nil)
(after! doom-modeline
  (setq mode-line-default-help-echo nil
    doom-modeline-checker-simple-format nil
    show-help-function nil
    ;; doom-modeline-icon nil
    ;; doom-modeline-major-mode-color-icon nil
    doom-modeline-persp-name nil)

  (doom-modeline-def-segment purpose
    ;; Purpose-mode segment
    (when (and (boundp 'purpose-mode) purpose-mode (doom-modeline--active) (not doom-modeline--limited-width-p))
      (format (if (purpose-window-purpose-dedicated-p) "[%s]*" "[%s]") (purpose-window-purpose))))


  (doom-modeline-def-segment vi/window-info
    ;; Useful for debugging: show window name in the modeline
    (concat (doom-modeline-spc) (format "%s" (get-buffer-window))))

  (doom-modeline-def-segment recursion-depth
    "Recursive-edit depth indicator. Used in yadm-status"
    (let ((rd (recursion-depth)))
      (when (> rd 0)
        (concat (doom-modeline-spc)
          (propertize
            (concat
              " "
              (doom-modeline-icon 'faicon "recycle" nil nil
                :face 'all-the-icons-dsilver
                :height 0.9
                :v-adjust 0.0)
              (format " %s " rd))
            'face 'doom-modeline-warning
            'help-echo "Recursive-edit: C-] to quit")
            ))))


  ;; best to name this 'main, since main gets set as the default in
  ;; doom-modeline. other names don't seem to take effect as default..
  (doom-modeline-def-modeline 'main
    '(bar buffer-info-simple selection-info remote-host checker recursion-depth)
    '(debug repl process lsp minor-modes major-mode misc-info vcs))

  (doom-modeline-def-modeline 'org-src
    '(bar buffer-info-simple selection-info checker)
    '(debug lsp minor-modes major-mode))

  (doom-modeline-def-modeline 'vcs
    '(bar buffer-info-simple selection-info remote-host recursion-depth)
    '( debug github process minor-modes major-mode misc-info vcs))


  ;; don't think we need this, since we modified 'main
  ;;(add-hook! '(prog-mode-hook org-mode-hook) (doom-modeline-set-modeline 'main))
  )
;; modeline:1 ends here

;; [[file:config.org::*minor modes][minor modes:2]]
(after! doom-modeline
  (setq doom-modeline-minor-modes t)
  (minions-mode)
  )
;; minor modes:2 ends here

;; [[file:config.org::*mode minder][mode minder:2]]
(use-package! mode-minder)
;; mode minder:2 ends here

;; delete-other-windows


;; [[file:config.org::*delete-other-windows][delete-other-windows:1]]
(setq ignore-window-parameters t)
;; delete-other-windows:1 ends here

;; Dedupe windows



;; [[file:config.org::*Dedupe windows][Dedupe windows:1]]
(defun vi/dedup-window-op (w table)
  (let ((b (window-buffer w)))
    ;; (message (format "%s" b))
    (if (ht-contains? table b)
        (progn
          (message (format "Deleting %s %s" w b))
          (delete-window w)
         )
      (ht-set! table b t))
    ))


(defun vi/dedup-windows()
  (interactive)
  (let ((table (ht-create)))
    (--each (window-list-1) (vi/dedup-window-op it table))
    ))
;; Dedupe windows:1 ends here

;; [[file:config.org::*Movement][Movement:2]]
(use-package! windmove
  :after-call doom-first-buffer-hook
  :custom
  (windmove-wrap-around nil)
  :config
  (windmove-default-keybindings 'shift)
  )
;; Movement:2 ends here

;; Splitting


;; [[file:config.org::*Splitting][Splitting:1]]
(defun vi/split-window-horizontally ()
  (interactive)
  (split-window-horizontally)
  (balance-windows))
(defun vi/split-window-vertically ()
  (interactive)
  (split-window-vertically)
  (balance-windows))
(defun vi/delete-window ()
  (interactive)
  (delete-window)
  (balance-windows))

(defadvice delete-window (after restore-balance activate)
  (balance-windows))

(map! :g
      "C-x |" #'vi/split-window-horizontally
      "C-x _" #'vi/split-window-vertically
  "C-x -" #'balance-windows
      "C-x /" #'vi/delete-window)

;; https://emacs.stackexchange.com/a/40517
;; control splitting to prefer vertical? (see split-window-sensibly)
(setq split-height-threshold 80)
(setq split-width-threshold 30)
;; Splitting:1 ends here

;; Keep windows balanced

;; [[file:config.org::*Keep windows balanced][Keep windows balanced:1]]
;; (defadvice split-window-below (after restore-balance-below activate)
;;   (balance-windows))

;; (defadvice split-window-right (after restore-balance-right activate)
;;   (balance-windows))

;; (defadvice delete-window (after restore-balance activate)
;;   (balance-windows))
;; Keep windows balanced:1 ends here

;; Switching


;; [[file:config.org::*Switching][Switching:1]]
(defmacro minibuffer-quit-and-run (&rest body)
  "Quit the minibuffer and run BODY afterwards."
  `(progn
     (put 'quit 'error-message "")
     (run-at-time nil nil
                  (lambda ()
                    (put 'quit 'error-message "Quit")
                    ,@body))
     (minibuffer-keyboard-quit)))


(map! "M-k" #'consult-buffer)
;; (map! :g
;;   "M-<right>" #'next-buffer
;;   "M-<left>" #'previous-buffer
;;   )

;; (map! :map org-mode-map
;;   "M-<right>" nil
;;   "M-<left>" nil
;; )

(setq! switch-to-prev-buffer-skip
  (lambda (win buf bury) (doom-special-buffer-p buf)))

;; (map! "M-k" #'purpose-switch-buffer-with-purpose)
;; (map! "M-k" #'vi/persp-consult-buffer)
;; (map! :map minibuffer-local-map "M-k" (cmd! (minibuffer-quit-and-run (consult-buffer))))
;; Switching:1 ends here



;; See [[*digit-argument][digit-argument]] for unbinding


;; [[file:config.org::*Restore][Restore:2]]
(use-package! winner
  :config
  (winner-mode)
  :bind
  ;; relies on unbinding digit-argument
  ("M-9" . winner-undo)
  ("M-0" . winner-redo)
  )
;; Restore:2 ends here

;; zygospore

;; Reversible C-x 1: if there are multiple windows, it does a winner-undo. Otherwise, delete-other-windows.

;; Inspired by https://github.com/LouisKottmann/zygospore.el


;; [[file:config.org::*zygospore][zygospore:1]]
(defun vi/zygospore ()
  (interactive)
  (if (= (count-windows) 1) (winner-undo) (delete-other-windows)))

(map! :g "C-x 1" #'vi/zygospore)
;; zygospore:1 ends here



;; Bufler groups:

;; - Constructs a tree, buffers are the leaves.
;; - Each buffer is assigned its path from the root to the leaf; so bufler-groups
;;   is ultimately a function like ~(buf) -> [node]~, where each ~node~ is a string.
;; - Each type function is ~(buf) -> node~; they assign one step along this path.
;;   eg. ~auto-*, *-match, dir, hidden~
;; - A list of type functions will therefore return ~[node]~ - the simple case.
;; - ~group*()~ functions define branching in this logic: if a buffer "matches" the
;;   group, it is then "captured" by this group and recurses into the type
;;   functions within that group for the remainder of its path.
;; - "Matching" a group can mean:

;;   ~group(T1 T2...)~ -> if T1 returns non-nil
;;   ~group-and(T1 T2...)~ -> if all T* return non-nil
;;   ~group-or(T1 T2...)~ -> if any of T* return non-nil

;;   Note that T* above are returning steps in ~[node]~.

;;   Any node == nil is dropped.

;; - Since groups will capture, their order matters, since buffers will recurse
;;   into the first group they match.

;; - ~bufler-filter-name-regexps~ and ~bufler-filter-buffer-modes~ can specify rules to
;;   match buffers to the hidden entirely; ~bufler-filter-buffer-fns~ implement the
;;   above filters via ~bufler--buffer-{mode,name}-filtered-p~



;; [[file:config.org::*bufler][bufler:2]]
(use-package! bufler
  :after-call doom-first-buffer-hook
  :custom
  (bufler-vc-state nil)
  (bufler-columns '("Name" "VC" "Path" "Mode"))
  (bufler-filter-name-regexps '("\\*Compile-Log\\*"
                                 "\\*Disabled Command\\*"
                                 ;; "\\*Org [^z-a]+Output\\*"
                                 ))
  (bufler-filter-buffer-modes '(bufler-list-mode
                                 ;; calendar-mode
                                 magit-diff-mode
                                 magit-process-mode
                                 magit-revision-mode
                                 magit-section-mode
                                 ;; special-mode
                                 timer-list-mode))
  (bufler-filter-buffer-fns
    '(bufler--buffer-hidden-p bufler--buffer-mode-filtered-p bufler--buffer-name-filtered-p)
    )
  (bufler-groups
    (bufler-defgroups
      ;; suppressed above by bufler--buffer-hidden-p
      ;; (group (hidden))
      (group
        ;; Group all Ein buffers
        (name-match "*Ein*" (rx bos (or " *ein" "*ein"))))
      (group (mode-match "*Vterm*" (rx bos "vterm-")))
      (group
        ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
        (group-or "*Help/Info*"
          (mode-match "*Help*" (rx bos "help-"))
          (mode-match "*Info*" (rx bos "info-"))))
      (group
        ;; Subgroup collecting all special buffers (i.e. ones that are not
        ;; file-backed), except `magit-status-mode'/dired buffers (which are allowed to fall
        ;; through to other groups, so they end up grouped with their project buffers).
        (group-and "*Special*"
          (lambda (buffer)
            (unless (or (funcall (mode-match "Magit" (rx bos "magit-status")) buffer)
                      (funcall (mode-match "Dired" (rx bos "dired")) buffer)
                      (funcall (auto-file) buffer))
              "*Special*"))
          )
        (group
          ;; Subgroup collecting these "special special" buffers
          ;; separately for convenience.
          (name-match "**Extra-Special**"
            (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
        (group
          ;; Subgroup collecting all other Magit buffers, grouped by directory.
          (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
          (auto-directory)
          )
        ;; Remaining special buffers are grouped automatically by mode.
        (auto-mode))
      ;; (group-and "Remaining specials?" (auto-special))
      ;; All buffers under "~/.emacs.d" (or wherever it is).
      (dir user-emacs-directory)
      (group
        ;; Subgroup collecting buffers in `org-directory'
        (dir org-directory)
        (group
          ;; Subgroup collecting indirect Org buffers, grouping them by file.
          ;; This is very useful when used with `org-tree-to-indirect-buffer'.
          (auto-indirect)
          (auto-file)
          )
        ;; Group remaining buffers by whether they're file backed, then by mode.
        (group-not "*special*" (auto-file))
        (auto-mode)
        )
      (group
        ;; Subgroup collecting buffers in a projectile project.
        (auto-projectile)
        (group (filename-match "venv" (rx ".venv/")))
        (auto-mode)
        )

      ;; Group remaining buffers by directory, then major mode.
      (auto-directory)
      (auto-mode)
      )
    )
  :config
  ;; (bufler-workspace-tabs-mode)

  ;; Note: tab-bar doesn't always update immediately
  ;; (add-hook! '(doom-switch-buffer-hook doom-switch-window-hook consult-after-jump-hook)
  ;;   (defun vi/bufler-workspace-focus-buffer ()
  ;;     (when (not (eq major-mode #'minibuffer-mode))
  ;;       ;; (message (format "Focusing %s %s" (current-buffer) (bufler-workspace-focus-buffer (current-buffer))))))
  ;;       (bufler-workspace-focus-buffer (current-buffer))))
  ;;   )

  :bind
  ("C-x C-b" . bufler)
  )

(after! bufler
  (bufler-define-buffer-command revert "Revert buffer."
    (lambda (buffer)
      (when (buffer-file-name buffer)
        (with-current-buffer buffer
          (revert-buffer)))))
  (map! :mode bufler-list-mode "v" #'bufler-list-buffer-revert)

  )
;; bufler:2 ends here

;; [[file:config.org::*Popups][Popups:3]]
(use-package! popper
  :after-call doom-first-buffer-hook
  :init
  (setq popper-mode-line " POP ")
  (setq popper-reference-buffers
        '(
             ;; "\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          "\\*doom eval\\*"
          help-mode
          comint-mode
          helpful-mode
          python-pytest-mode
          ;; bufler-list-mode

          ;; we want to use a custom doom-modeline segment vterm-copy-mode
          ;; vterm-mode ;; https://github.com/karthink/popper/issues/38

          flycheck-error-list-mode
          flycheck-projectile-error-list-mode
          inferior-python-mode
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))

(after! popper
  (add-hook! 'doom-escape-hook
             (defun vi/close-popup()
               ;; Return nil so the rest of the hooks do run
               (progn (popper-close-latest) nil))))
;; Popups:3 ends here

;; recentf

;; Load recentf files on startup


;; [[file:config.org::*recentf][recentf:1]]
(add-hook! 'doom-first-input-hook #'recentf-mode)
;; recentf:1 ends here

;; [[file:config.org::*Adjust for display size change][Adjust for display size change:2]]
(defun vi/set-font-size (sz)
  (setq doom-font (font-spec :size sz))
  (doom/reload-font)
  (message "Setting font size to: %s" sz)
  sz
  )

;; see (dispwatch--get-display)
;; Can be run manually like (vi/adjust-font-size-for-display '(3440 . 1440))
;; See https://github.com/doomemacs/doomemacs/issues/6131#issuecomment-1051576882
(defun vi/adjust-font-size-for-display (disp)
  (message "rejiggering for %s" disp)
  (cond ((equal disp '(3440 . 1440))   ; LG monitor
          (vi/set-font-size 13.0))
    ((equal disp '(3000 . 2000))    ; laptop @ 100%, 200%
      (vi/set-font-size 13.0))
    ((equal disp '(4800 . 3200))    ; laptop @ 125%
      (vi/set-font-size 14.0))
    ((equal disp '(4002 . 2668))    ; laptop @ 150%
      (vi/set-font-size 14.0))
    ((equal disp '(3426 . 2284))    ; laptop @ 175%
      (vi/set-font-size 13.0))
    ((equal disp '(1920 . 1080))    ; asus monitor
      (vi/set-font-size 12.0))
    (t (message "Unknown display size %sx%s" (car disp) (cdr disp)))))

(defun vi/trigger-dispwatch ()
  (interactive)
  (vi/adjust-font-size-for-display
    ;; extract dotted pair from display info
    (apply #'cons (-take-last 2 (nth 1 dispwatch-current-display))))
  )
(add-hook! 'doom-first-buffer-hook #'vi/trigger-dispwatch)

(use-package! dispwatch
  :after-call doom-first-buffer-hook
  :config
  (dispwatch-mode 1)
  (add-hook! 'dispwatch-display-change-hooks #'vi/adjust-font-size-for-display)
  )
;; Adjust for display size change:2 ends here

;; [[file:config.org::*visible mark][visible mark:2]]
(use-package! visible-mark
  :custom
  (visible-mark-max 1)
  :config
  (global-visible-mark-mode t)
  )
;; visible mark:2 ends here

;; [[file:config.org::*expand region][expand region:2]]
;; (use-package! hungry-delete
;;   :after-call doom-first-input-hook
;;   :config
;;   (global-hungry-delete-mode))

(use-package! expand-region
  :commands (er/mark-inside-pairs er/mark-inside-quotes er/mark-outside-pairs er/mark-outside-quotes)
  )
;; expand region:2 ends here

;; [[file:config.org::*easy-kill base][easy-kill base:2]]
(use-package! easy-kill
  :custom

  ;; Used for first marking
  (easy-mark-try-things '(symbol line forward-line-edge sexp)) ;see easy-kill-alist
  (easy-kill-try-things '(symbol line forward-line-edge sexp)) ;see easy-kill-alist
  :bind (
          ([remap kill-ring-save] . easy-kill) ; M-w
          ;; easy-mark supposedly sets the region immediately but it breaks
          ;; sometimes. Also doesn't use easy-kill-selection face
          ([remap set-mark-command] . easy-mark) ;C-SPC

          ;; ("M-SPC" . easy-mark)
          )

  :config
  (custom-set-faces! '(easy-kill-selection :inherit modus-themes-mark-sel))

  ;; These take arguments
  (setq easy-kill-cycle-ignored '(string-to-char-forward string-up-to-char-forward))

  ;; easy-kill/mark will cycle through things in this order (except for easy-kill-cycle-ignored)
  (setq easy-kill-alist
    '((?w word " ")
       (?s symbol " ")               ;added from extras
       ;; (?W WORD " ")
       (?l line "\n")
       (?< inside-pairs "");added from extras
       (?> outside-pairs "");added from extras
       (?\' inside-quotes "");added from extras
       (?\" outside-quotes "");added from extras
       (?$ forward-line-edge "")
       (?^ backward-line-edge "")
       (?d defun "\n\n")
       (?b buffer "")
       (?x sexp "\n")
       (?L list "\n")
       (?f string-to-char-forward "")
       (?F string-up-to-char-forward "")
       (?f filename "\n")
       (?D defun-name " ")
       (?b buffer-file-name)))

  )
;; easy-kill base:2 ends here

;; [[file:config.org::*easy-kill-extras][easy-kill-extras:2]]
;; Here we integrate some  expand-region marking as easy-kill candidates
(after! easy-kill
  (use-package! easy-kill-extras
    :demand t                           ; don't wait for autoload via :bind
    :init
    (setq easy-kill-ace-jump-enable-p nil)
    :config
    (require 'extra-things)
    (require 'easy-kill-mc)
    ;; Integrate `expand-region' functionality with easy-kill
    :bind (:map easy-kill-base-map
            ("o" . easy-kill-er-expand)
            ("i" . easy-kill-er-unexpand))

    ;; (define-key easy-kill-base-map (kbd "o") 'easy-kill-er-expand)
    ;; (define-key easy-kill-base-map (kbd "i") 'easy-kill-er-unexpand)
    )

  (defsubst vi/did-mark (mark-fn)
    ;; Did mark-fn succeed in setting the mark?
    ;; Remove any existing mark
    (deactivate-mark)
    ;; Catch scan-error and deactivate-mark if we do
    (save-excursion
      (condition-case nil
          (progn (funcall mark-fn) (region-active-p))
        (scan-error (deactivate-mark)))))

  (defmacro vi/er-easy-kill (thing)
    ;; create a function easy-kill-on-<thing> which tests er/mark-<thing> to see
    ;; if it set the region, and if so, adjusts the easy kill candidate.
    `(defun ,(intern (concat "easy-kill-on-" thing)) (_n)
         (when (vi/did-mark #',(intern (concat "er/mark-" thing)))
           (easy-kill-adjust-candidate ',(intern thing) (mark) (point))
           )
    ))

  (vi/er-easy-kill "symbol")
  (vi/er-easy-kill "inside-pairs")
  (vi/er-easy-kill "outside-pairs")
  (vi/er-easy-kill "inside-quotes")
  (vi/er-easy-kill "outside-quotes")

  )
;; easy-kill-extras:2 ends here

;; [[file:config.org::*clean-kill-ring][clean-kill-ring:2]]
(use-package! clean-kill-ring
  :after-call doom-first-input-hook
  :config
  (clean-kill-ring-mode)
  )
;; clean-kill-ring:2 ends here

;; [[file:config.org::*move-text][move-text:2]]
(use-package! move-text
  :config
  (move-text-default-bindings)          ;M-<up>, M-<down>

  (remove-hook 'org-metadown-hook #'org-babel-pop-to-session-maybe)
  (remove-hook 'org-metaup-hook #'org-babel-load-in-session-maybe)

  ;; messes with moving headings
  ;; (add-hook! 'org-metadown-hook (progn (apply #'move-text-down (move-text-get-region-and-prefix)) t))
  ;; (add-hook! 'org-metaup-hook (progn (apply #'move-text-up (move-text-get-region-and-prefix)) t))
  )
;; move-text:2 ends here

;; Undo

;; ein disables undo if C-/ is bound to anything but basic undo
;; https://github.com/millejoh/emacs-ipython-notebook/issues/841#issuecomment-1129176534

;; doom-emacs defines a global undo-fu-mode (minor-mode) which is activated on
;; doom-first-buffer. This means that it is turned on in the ein notebook buffers,
;; but it's not enough to turn it off via ein:notebook-mode-hook -- that's too
;; late, ein has already disabled undo.

;; so we define a non-global vi/undo-fu-mode and turn it on selectively.


;; [[file:config.org::*Undo][Undo:1]]
(map! "C--" #'undo "M--" #'redo "C-/" #'undo)
(map! :map undo-fu-mode-map "C-/" nil)

;; copied from doom's undo/config.el
(use-package! undo-fu
  :custom
  (setq! undo-limit 80000000)
  :unless (featurep! +tree)
  :config
  (define-minor-mode vi/undo-fu-mode
    "Enables `undo-fu' for the current session."
    :keymap (let ((map (make-sparse-keymap)))
              ;; (define-key map [remap undo] #'undo-fu-only-undo)
              ;; (define-key map [remap redo] #'undo-fu-only-redo)
              ;; (define-key map (kbd "C-_")     #'undo-fu-only-undo)
              ;; (define-key map (kbd "M-_")     #'undo-fu-only-redo)
              ;; (define-key map (kbd "C-M-_")   #'undo-fu-only-redo-all)
              (define-key map (kbd "C-x r u") #'undo-fu-session-save)
              (define-key map (kbd "C-x r U") #'undo-fu-session-recover)

              ;; Diff from undo-fu-mode
              (define-key map (kbd "C--")     #'undo-fu-only-undo)
              (define-key map (kbd "M--")     #'undo-fu-only-redo)
              (define-key map (kbd "C-M--")   #'undo-fu-only-redo-all)

              map)
    :predicate t
    :init-value nil
    :global nil)                       ;;only difference from doom-emacs' undo-fu-mode is that this isn't global
  )

;; We don't want this because it turns on in ein and ein disables undo if it is
;; bound to anything but the simple emacs undo, it is global
(remove-hook! 'doom-first-buffer-hook #'undo-fu-mode)
(add-hook! (prog-mode org-mode text-mode) #'vi/undo-fu-mode)
(add-hook! vi/undo-fu-mode #'global-undo-fu-session-mode)
;; Undo:1 ends here

;; [[file:config.org::*vundo][vundo:2]]
(use-package! vundo
  :custom
  (vundo-roll-back-on-quit nil)
  (vundo-glyph-alist vundo-unicode-symbols)
  ;; (vundo-glyph-alist vundo-ascii-symbols)
  :config
  ;; different fonts at different sizes mess up the alignment in vundo
  ;; Iosevka 13 seems to be ok
  ;; (set-face-attribute 'vundo-default nil :family "DejaVu Sans Mono")

  ;; https://github.com/casouri/vundo/issues/56
  (defun vi/vundo-diff ()
    (interactive)
    (let* ((orig vundo--orig-buffer)
            (source (vundo--current-node vundo--prev-mod-list))
            (dest (vundo-m-parent source)))
      (if (or (not dest) (eq source dest))
        (message "vundo diff not available.")
	(let ((buf (make-temp-name (concat (buffer-name orig) "-vundo-diff"))))
          (vundo--move-to-node source dest orig vundo--prev-mod-list)
          (with-current-buffer (get-buffer-create buf)
	    (insert-buffer orig))
          (vundo--refresh-buffer orig (current-buffer) 'incremental)
          (vundo--move-to-node dest source orig vundo--prev-mod-list)
          (vundo--refresh-buffer orig (current-buffer) 'incremental)
          (diff-buffers buf orig)
          (kill-buffer buf)))))

  :bind (
          ("C-x u" . vundo)
          :map vundo-mode-map (("d" . #'vi/vundo-diff))
          )
  )

(add-hook! 'vundo-mode-hook
  #'hide-mode-line-mode
  (visual-line-mode -1)
  (setq window-size-fixed t)
  ;; (buffer-face-set '(:family "DejaVu Sans Mono"))
  )
;; vundo:2 ends here

;; [[file:config.org::*Last change][Last change:2]]
(use-package! goto-chg
  :bind (
          ("C-." . goto-last-change)
          ("C-," . goto-last-change-reverse)
          :map org-mode-map ("C-," . nil)
  ))
;; (after! org
;;   ;; goto-last-change-reverse
;;   (map! :map org-mode-map "C-," nil)
;;   )
;; Last change:2 ends here

;; [[file:config.org::*point][point:2]]
(use-package! point-undo
  :bind(
         ("s-." . point-undo)
         ("s-," . point-redo)
         ))
;; point:2 ends here

;; [[file:config.org::*Snippets][Snippets:2]]
(after! yasnippet
  (setq yas-wrap-around-region t)
  (yas-global-mode 1))

(use-package! yankpad
  :commands (yankpad-insert);;  company-yankpad)
  :custom
  (yankpad-file "~/.config/doom/yankpad.org")
  :config
  (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand)
  )
;; Snippets:2 ends here

;; [[file:config.org::*unfill paragraphs][unfill paragraphs:2]]
(use-package! unfill
  :bind ("M-a" . unfill-paragraph))
;; unfill paragraphs:2 ends here

;; [[file:config.org::*Boxing][Boxing:2]]
(use-package! rebox2
  :commands (rebox-dwim)
  :config
  (setq rebox-style-loop '(13 15 23 25 16 17 26 27 11 21))
  :bind
  (
   ;; ("M-:" . rebox-dwim)
   :map rebox-mode-map ("M-q" . nil)
   )
  ;; (define-key rebox-mode-map (kbd "M-q") nil)
  )
;; Boxing:2 ends here

;; [[file:config.org::*separedit][separedit:2]]
(use-package! separedit
  :custom
  (separedit-remove-trailing-spaces-in-comment t)
  (separedit-default-mode 'org-mode)
  :bind ("M-\\" . separedit)
  )

(after! edit-indirect
  ;; https://github.com/Fanael/edit-indirect/issues/6
  (require 's)
  (require 'dash)

  (defvar edit-indirect--left-margin 0)

  (defun vbe:compute-left-margin (code)
    "Compute left margin of a string of code."
    (-min
      (-map #'(lambda (line) (length (car (s-match "^\\s-*" line))))
        (-remove 's-blank? (s-lines code)))))

  (defun vbe:after-indirect-edit-remove-left-margin ()
    "Remove left-margin and save it into a local variable."
    (let ((lm (vbe:compute-left-margin (buffer-substring (point-min) (point-max)))))
      (indent-rigidly (point-min) (point-max) (* -1 lm))
      (setq-local edit-indirect--left-margin lm)))

  (defun vbe:after-indirect-edit-restore-left-margin ()
    "Restore left-margin before commiting."
    (indent-rigidly (point-min) (point-max) edit-indirect--left-margin))

  (add-hook 'edit-indirect-after-creation-hook #'vbe:after-indirect-edit-remove-left-margin)
  (add-hook 'edit-indirect-before-commit-hook #'vbe:after-indirect-edit-restore-left-margin))
;; separedit:2 ends here

;; [[file:config.org::*Guides][Guides:2]]
(use-package! highlight-indent-guides
  :after-call doom-first-buffer-hook
  :custom
  (highlight-indent-guides-auto-enabled nil)
  (highlight-indent-guides-delay 1)
  (highlight-indent-guides-method 'bitmap)
  :config
  :hook (prog-mode . highlight-indent-guides-mode)
  )

(add-hook! highlight-indent-guides-mode
  (custom-set-faces!
    '(highlight-indent-guides-character-face :foreground "#2b3045") ;bg-inactive
    ))
;; Guides:2 ends here

;; Shift regions


;; [[file:config.org::*Shift regions][Shift regions:1]]
;; Shift the selected region right if distance is postive, left if
;; negative

(defun vi/shift-region (distance)
  (let ((mark (mark)))
    (save-excursion
      (indent-rigidly (region-beginning) (region-end) distance)
      (push-mark mark t t)
      ;; Tell the command loop not to deactivate the mark
      ;; for transient mark mode
      (setq deactivate-mark nil))))

(defun vi/shift-right ()
  (interactive)
  (vi/shift-region 1))

(defun vi/shift-left ()
  (interactive)
  (vi/shift-region -1))

(map! :g "M->" #'vi/shift-right)
(map! :g "M-<" #'vi/shift-left)
;; Shift regions:1 ends here

;; [[file:config.org::*Movement][Movement:2]]
(use-package! mwim
  :bind
  ("C-a" . mwim-beginning)
  ("C-e" . mwim-end)
  )
;; Movement:2 ends here

;; isearch

;; [[file:config.org::*isearch][isearch:1]]
(after! isearch
  ;; Show match/total in isearch prompt
  (setq isearch-lazy-count t
        isearch-lazy-highlight t))
;; isearch:1 ends here

;; [[file:config.org::*smartscan][smartscan:2]]
(use-package! smartscan
  :after-call doom-first-buffer-hook
  :config
  (global-smartscan-mode 1)

  ;; M-p, M-n interfere in git-rebase mode
  (add-hook! git-rebase-mode (smartscan-mode -1))
  )
;; smartscan:2 ends here

;; [[file:config.org::*Jumping][Jumping:2]]
;; better-jumper is built into doom
(use-package! smart-jump
  :after-call prog-mode-hook            ; don't defer till bind?
  :custom
  (smart-jump-find-references-fallback-function #'smart-jump-find-references-with-rg)
  (smart-jump-bind-keys nil)
  :config

  ;; this sets up hooks with the :modes, so it won't work without revert-buffer
  ;; since we use :bind to load this package (see :after-call above)
  (smart-jump-register :modes 'prog-mode
                       :jump-fn #'+lookup/definition
                       :pop-fn 'xref-pop-marker-stack
                       :refs-fn #'+lookup/references
                       :heuristic 'error
                       :refs-heuristic 'error
                       :should-jump t
                       :order 2
                       :async t)

  (smart-jump-register :modes 'lsp-mode
                       :jump-fn 'lsp-find-definition
                       :pop-fn 'xref-pop-marker-stack
                       :refs-fn 'lsp-find-references
                       :heuristic 'point
                       :refs-heuristic 'point
                       :should-jump t
                       :order 1
                       :async t)

  (smart-jump-setup-default-registers)
  :bind (("M-." . smart-jump-go)
          ;; seems to work with smart-jump without calling better-jumper-set-jump?
          ;; also advicing smart-jump with better-jumper-set-jump seems to break
          ("M-," . better-jumper-jump-backward)
          ("M-?" . smart-jump-references))
  :commands (smart-jump-go smart-jump-back smart-jump-references)
  )

(after! dumb-jump
  (setq xref-backend-functions (remq 'etags--xref-backend xref-backend-functions))
  (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate t))

(pretty-hydra-define jump-hydra (:exit t)
  ("Jump"
    (("c" +lookup/documentation "Docstring")
    ("f" +lookup/definition "Definition")
    ("u" +lookup/references "Usages")
    ("i" +lookup/implementations "Impls")
    ("t" +lookup/type-definition "Type")
    ("F" +lookup/file "file"))
   ))
;; Jumping:2 ends here

;; embark



;; [[file:config.org::*embark][embark:1]]
(after! embark
  ;; since we disabled which-key
  (advice-remove 'embark-completing-read-prompter '+vertico--embark-which-key-prompt-a)
  ;; try out embark-mixed-indicator which is more verbose than embark-which-key-indicator
  (setq! embark-indicators '(embark--vertico-indicator embark-minimal-indicator embark-highlight-indicator embark-isearch-highlight-indicator))
  )
;; embark:1 ends here

;; targets for buffer/file

;; https://github.com/oantolin/embark/issues/231#issuecomment-854390476


;; [[file:config.org::*targets for buffer/file][targets for buffer/file:1]]
(after! embark
  (defun embark-target-this-buffer-file ()
    (cons 'this-buffer-file (or (buffer-file-name) (buffer-name))))

  (add-to-list 'embark-target-finders #'embark-target-this-buffer-file 'append)

  (add-to-list 'embark-keymap-alist '(this-buffer-file . this-buffer-file-map))

  (defvar-keymap this-buffer-file-map
    :doc"Commands to act on current file or buffer."
    :parent embark-general-map
    "l" #'load-file
    "b" #'byte-compile-file
    ;; ("S" sudo-find-file)
    ;; ("U" 0x0-upload)
    ;; ("r" rename-file-and-buffer)
    ;; ("d" diff-buffer-with-file)
    "=" #'ediff-buffers
    "C-=" #'ediff-files
    "!" #'shell-command
    "&" #'async-shell-command
    "x" #'consult-file-externally
    ;; ("C-a" mml-attach-file)
    "c" #'copy-file
    "k" #'kill-buffer
    "z" #'bury-buffer
    "|" #'embark-shell-command-on-buffer
    "g" #'revert-buffer
    )
  )
;; targets for buffer/file:1 ends here

;; consult customization

;; # TODO: filter out dired-sidebar


;; [[file:config.org::*consult customization][consult customization:1]]
(after! consult
  (add-hook! 'consult-after-jump-hook #'recenter-top-bottom)
  (setq! consult-fontify-max-size 1024)   ;https://github.com/minad/consult/issues/329

  (defalias 'consult-line-thing-at-point 'consult-line)
  (consult-customize consult-line-thing-at-point :initial (thing-at-point 'symbol))

  (map! "C-s" #'consult-line "C-r" #'consult-line)               ;deliberately not setting initial

  (setq consult-line-start-from-top nil)
  (setq consult-line-point-placement 'match-beginning)
  )
;; consult customization:1 ends here

;; consult-dir

;; [[file:config.org::*consult-dir][consult-dir:1]]
(after! consult-dir
  (setq consult-dir-project-list-function #'consult-dir-projectile-dirs)

  ;; this is normally find-file, but it's perhaps more useful to find any file
  ;; (setq consult-dir-default-command #'+vertico/consult-fd)
  (setq consult-dir-default-command #'consult-dir-dired)

  ;; https://github.com/karthink/consult-dir/issues/20#issuecomment-1193087091
  (map! :map minibuffer-local-map "C-c b" #'embark-become)
  (map! :map embark-become-file+buffer-map
        "d" #'dired
        "S" #'+vertico/consult-fd
        "D" #'consult-dir)
  )
;; consult-dir:1 ends here

;; [[file:config.org::*vicb][vicb:2]]
(load! "lisp/vi-consult-buffers/vicb.el")
(use-package! vicb
  :after consult
  :config
  (vicb-setup)

  ;; delay previews so that these don't affect recency ranking
  ;; https://github.com/minad/consult#live-previews
  (eval `(consult-customize ,@consult-buffer-sources :preview-key '(:debounce 0.8 any)))
  )

;; (after! '(consult vicb)
;;   ;; (consult-customize consult-buffer :group nil :sort t)
;;   )
;; vicb:2 ends here

;; projectile




;; [[file:config.org::*projectile][projectile:1]]
(after! (consult projectile)
   (setq consult-project-function (lambda (_) (projectile-project-root)))
   )
;; projectile:1 ends here

;; [[file:config.org::*consult-projectile][consult-projectile:2]]
(use-package! consult-projectile
    :custom
  ;; (+workspaces-switch-project-function (lambda (_) (consult-projectile-find-file)))
  (consult-project-buffer-sources consult-projectile-sources)
    )
;; consult-projectile:2 ends here

;; Orderless

;; https://github.com/oantolin/orderless#interactively-changing-the-configuration
;; https://github.com/minad/vertico#completion-styles-and-tab-completion

;; https://old.reddit.com/r/emacs/comments/o9pue1/changing_consultline_matching_with_orderless/

;; [[file:config.org::*Orderless][Orderless:1]]
(after! orderless
  ;; https://github.com/minad/consult/issues/237
  (defun consult-basic-all-completions (string table pred _point)
    ;; Ignore the disambiguation prefix
    (let ((completion-regexp-list (list (concat "\\`[\x100000-\x10FFFD]*" (regexp-quote string)))))
      (all-completions "" table pred)))

  (defun consult-basic-try-completion (string table pred _point)
    ;; Ignore the disambiguation prefix
    (let ((completion-regexp-list (list (concat "\\`[\x100000-\x10FFFD]*" (regexp-quote string)))))
      (try-completion "" table pred)))

  (add-to-list 'completion-styles-alist
    '(consult-basic
       consult-basic-try-completion consult-basic-all-completions
       "Consult-compatible basic completion."))


  ;; (orderless-define-completion-style orderless+initialism
  ;;   (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))
  (setq completion-styles '(orderless)
    completion-category-defaults nil
    completion-category-overrides
    '((file (styles partial-completion))  ;; orderless+initialism))
       ;; (consult-location (styles consult-basic)) ;consult-line
       ;; (buffer (styles orderless+initialism))
       ;; (consult-multi (styles orderless+initialism))
       ;; (command (styles orderless+initialism))
       ;; (variable (styles orderless+initialism))
       ;; (symbol (styles orderless+initialism))
       )
    orderless-matching-styles '(orderless-literal orderless-regexp))
  )

(after! vertico
  (defun vi/match-components-literally ()
    "Components match literally for the rest of the session."
    (interactive)
    (setq-local orderless-matching-styles '(orderless-literal)
      orderless-style-dispatchers nil))

  ;; (define-key minibuffer-local-completion-map (kbd "C-l") #'vi/match-components-literally)
    (map! :map vertico-map
      "C-l" #'vi/match-components-literally)
      ;;"M-j" #'vertico-quick-jump)
  )
;; Orderless:1 ends here

;; [[file:config.org::*Narrowing][Narrowing:2]]
(use-package! recursive-narrow
  :commands (hydra-narrow/body recursive-narrow-or-widen-dwim recursive-widen)
  :config
  (defhydra hydra-narrow (:exit t :columns 2)
    "Narrow"
    ("n" recursive-narrow-or-widen-dwim "narrow")
    ("w" recursive-widen "widen")
    )
  )
;; Narrowing:2 ends here

;; [[file:config.org::*outline faces][outline faces:2]]
(use-package! outline
  :custom
  (outline-minor-mode-cycle t)
  (outline-minor-mode-use-buttons t)
  :after-call doom-first-buffer-hook
  ;; :hook (
  ;;         (prog-mode . outline-minor-mode)
  ;;        )
  :bind (:map outline-minor-mode-map
         ([C-tab] . outline-cycle)
         ("C-<iso-lefttab>" . outline-hide-other) ;C-S-<tab>
         ([s-tab] . outline-cycle-buffer)); win-tab
  )

(after! outline
  ;; Customize the distracting folding markers.
  (set-display-table-slot
   standard-display-table
   'selective-display
   (let ((face-offset (* (face-id 'shadow) (lsh 1 22))))
     (vconcat (mapcar (lambda (c) (+ face-offset c)) " ➤"))))
  )
;; outline faces:2 ends here

;; Python

;; https://old.reddit.com/r/emacs/comments/e2u5n9/code_folding_with_outlineminormode/

;; [[file:config.org::*Python][Python:1]]
(setq-hook! 'python-mode-hook outline-regexp (python-rx (* space) (or defun decorator)))
;; Python:1 ends here

;; [[file:config.org::*Tabnine][Tabnine:2]]
(use-package! company-tabnine
  :custom
  (company-tabnine-no-continue t)
  :commands (company-tabnine))
  ;; :config
  ;; ;; https://github.com/TommyX12/company-tabnine#known-issues
  ;; ;; workaround for company-transformers
  ;; (setq company-tabnine--disable-next-transform nil)
  ;; (defun my-company--transform-candidates (func &rest args)
  ;;   (if (not company-tabnine--disable-next-transform)
  ;;       (apply func args)
  ;;     (setq company-tabnine--disable-next-transform nil)
  ;;     (car args)))

  ;; (defun my-company-tabnine (func &rest args)
  ;;   (when (eq (car args) 'candidates)
  ;;     (setq company-tabnine--disable-next-transform t))
  ;;   (apply func args))

  ;; (advice-add #'company--transform-candidates :around #'my-company--transform-candidates)
  ;; (advice-add #'company-tabnine :around #'my-company-tabnine))
;; Tabnine:2 ends here

;; [[file:config.org::*Corfu/Cape][Corfu/Cape:2]]
(use-package! corfu
  :after-call doom-first-buffer-hook
  :custom
  (corfu-auto t)
  (corfu-auto-delay 0.2)
  (corfu-auto-prefix 2)
  (completion-styles '(basic))
  :config
  (custom-set-faces! '(corfu-current :background "ivory4"))
  ;; (global-corfu-mode)
  (corfu-history-mode 1)
  :hook (
          (prog-mode . corfu-mode)
          (org-mode . corfu-mode)
          (conf-mode . corfu-mode)
          (text-mode . corfu-mode)
          )
  )

;; (after! corfu
;;   (setq! corfu-terminal-disable-on-gui nil)
;;   (corfu-terminal-mode)
                                        ;  )

(use-package! cape
  :after corfu
  :config
  (require 'company)
  (defalias 'vi/cape-yankpad (cape-capf-buster (cape-company-to-capf #'company-yankpad)))

                        ;; (apply-partially #'company--multi-backend-adapter
                        ;;   '( ;;company-tabnine
                        ;;      company-yankpad)))))

  ;; (defalias 'vi/cape-tabnine (cape-company-to-capf #'company-tabnine))
  (defalias 'vi/cape-interactive-yankpad (cape-interactive-capf #'vi/cape-yankpad))

  (setq-hook! '(conf-mode-hook text-mode-hook json-mode-hook org-mode-hook ein:notebook-mode-hook)
    completion-at-point-functions
    (list #'vi/cape-yankpad #'cape-dabbrev))

  (defun vi/corfu-lsp-setup ()
    ;; Combine LSP via corfu so we can use it in combination with
    ;; company-tabnine and yankpad

    (interactive)
    ;; https://github.com/minad/corfu/wiki

    ;;;; these are set in LSP use-package
    ;; (setq-local lsp-enable-completion-at-point t)
    ;; (setq-local lsp-completion-provider :none)       ;we use corfu!

    (defun my/orderless-dispatch-flex-first (_pattern index _total)
      (and (eq index 0) 'orderless-flex))

    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
        '(orderless)))

    ;; Optionally configure the first word as flex filtered.
    (add-hook 'orderless-style-dispatchers #'my/orderless-dispatch-flex-first nil 'local)

    ;; Optionally configure the cape-capf-buster.
    (setq-local completion-at-point-functions (list
                                                (cape-super-capf
                                                  (cape-capf-buster #'lsp-completion-at-point)
                                                  #'vi/cape-yankpad
                                                  #'cape-dabbrev
                                                  )
                                                )))
  (add-hook! 'lsp-completion-mode-hook #'vi/corfu-lsp-setup)
  )
;; Corfu/Cape:2 ends here

;; config


;; [[file:config.org::*config][config:1]]
(use-package! copilot
  :after corfu
  :custom
  (copilot-idle-delay 0.3)
  :config

  ;; https://github.com/rksm/copilot-emacsd/blob/master/init.el
  (defun rk/copilot-complete-or-accept ()
    "Command that either triggers a completion or accepts one if one
is available. Useful if you tend to hammer your keys like I do."
    (interactive)
    (if (copilot--overlay-visible)
      (progn
        (copilot-accept-completion)
        (open-line 1)
        (next-line))
      (copilot-complete)))

  (defun rk/copilot-tab ()
    "Tab command that will complet with copilot if a completion is
available. Otherwise will try tab-indent."
    (interactive)
    ;; indent-for-tab-command compares last-command to this-command in python-indent-line-function to decide whether to dedent.
    ;; without this, it stops dedenting
    (set 'this-command 'indent-for-tab-command)
    (or (copilot-accept-completion)
      ;; (company-yasnippet-or-completion)
      (indent-for-tab-command)))


  (defun rk/copilot-complete-if-active (next-func n)
    (let ((completed (when copilot-mode (copilot-accept-completion))))
      (unless completed (funcall next-func n))))


  (defun rk/copilot-quit ()
    "Run `copilot-clear-overlay' or `keyboard-quit'. If copilot is
cleared, make sure the overlay doesn't come back too soon."
    (interactive)
    (condition-case err
      (when (copilot--overlay-visible)
        (lexical-let ((pre-copilot-disable-predicates copilot-disable-predicates))
          (setq copilot-disable-predicates (list (lambda () t)))
          (copilot-clear-overlay)
          (run-with-idle-timer
            0.3
            nil
            (lambda ()
              (setq copilot-disable-predicates pre-copilot-disable-predicates)))))
      (error handler)))

  ;; (advice-add 'keyboard-quit :before #'rk/copilot-quit)
  (add-hook! 'doom-escape-hook
    (defun vi/rk/copilot-quit()
      ;; return nil so other hooks can run
      (progn (rk/copilot-quit) nil)))

  ;; complete by pressing right or tab but only when copilot completions are
  ;; shown. This means we leave the normal functionality intact.
  ;;(advice-add 'right-char :around #'rk/copilot-complete-if-active)
  ;; (advice-add 'indent-for-tab-command :around #'rk/copilot-complete-if-active)

  :hook ((prog-mode . copilot-mode) (conf-mode . copilot-mode))
  :bind (
         :map copilot-completion-map
          ;; ("C-g" . 'copilot-clear-overlay)
         ;; ("<tab>" . 'copilot-accept-completion)
          ("<right>" . 'copilot-accept-completion)
         ("C-<up>" . 'copilot-previous-completion)
         ("C-<down>" . 'copilot-next-completion)
         ("C-<right>" . 'copilot-accept-completion-by-word)
         ("C-M-<right>" . 'copilot-accept-completion-by-line))
  ;; :bind (;; ("C-TAB" . 'copilot-accept-completion-by-word)
  ;;         ;; ("C-<tab>" . 'copilot-accept-completion-by-word)
  ;;         :map copilot-mode-map
  ;;         ;;;("C-/" . 'rk/copilot-complete-or-accept)
  ;;         ;; :map copilot-completion-map
  ;;         ;; ("C-<tab>" . 'copilot-accept-completion)
  ;;         )
  )

(add-hook! 'copilot-mode-hook (map! "C-<return>" #'rk/copilot-complete-or-accept))

;; try to turn off keybindings (up/down) that company-mode interferes with
;; (add-hook! prog-mode :append (progn (message "disabling company mode") (company-mode -1) (message "disabled")))
;; config:1 ends here

;; [[file:config.org::*chatgpt shell][chatgpt shell:2]]
(use-package chatgpt-shell
  :custom
  (chatgpt-shell-openai-key
    (lambda ()
      ;; ~/.authinfo.gpg
      (auth-source-pick-first-password :host "api.openai.com")))
  :bind (
          :map shell-maker-map
          (("C-<return>" . comint-send-input) ("<return>" . newline))
          )
  )
;; chatgpt shell:2 ends here

;; [[file:config.org::*Iedit][Iedit:2]]
(use-package! iedit
  :bind
  ("C-;" . iedit-mode))
;; Iedit:2 ends here

;; [[file:config.org::*wgrep][wgrep:2]]
(use-package! wgrep
  :commands (wgrep-change-to-wgrep-mode)
  :custom
  (wgrep-auto-save-buffer t)
  )
;; wgrep:2 ends here

;; [[file:config.org::*Hydra][Hydra:2]]
(after! major-mode-hydra
  (setq major-mode-hydra-invisible-quit-key "q")

  (defun vi/get-major-mode ()
    (cond
     ((and (boundp 'ein:notebook-mode) ein:notebook-mode) 'ein:notebook-mode)
     (major-mode)
     ))

  (defun vi/major-mode-hydra ()
    (interactive)
    (major-mode-hydra-dispatch (vi/get-major-mode)))
  )

(defun vi/revert-buffer ()
  (interactive)
  (find-alternate-file (buffer-file-name)))
;; Hydra:2 ends here

;; Global hydra

;; [[file:config.org::*Global hydra][Global hydra:1]]
(pretty-hydra-define global-hydra (:exit t :quit-key ("q" "C-g"))
  ("Searching"
   (;; ("f" +vertico/consult-fd "fd")
    ("s" +vertico/project-search "rg in project")
    ("l" consult-line "Line isearch")
     ("j" jump-hydra/body "Jump")
     )
   "Buffers"
   (("b" consult-buffer "Buffers")
     ("P" consult-projectile "Project buffers")
    ("T" dired-sidebar-jump-to-sidebar "Goto Tree")
    ("t" dired-sidebar-toggle-sidebar "Toggle tree")
     ("R" vi/revert-buffer "Revert")
     ("M-k" vi/force-kill-buffer "Force kill")
    ;; ("t" treemacs-select-window "treemacs")
    ;; ("T" +treemacs/toggle "Toggle treemacs")
     ;; ("`" popper-toggle-latest "Latest Popup")
    ;; ("'" popper-cycle "Popup cycles" :exit nil)
    )
   "Intra-buffer"
   (
     ("o" consult-outline "outlIne")
     ("i" consult-imenu "Imenu")
     ;; ("." push-mark-command "Push Mark")
     ;; ("m" consult-mark "consult-mark")
     ;; ("M" consult-global-mark "global-mark")
     ;;("f" fold-active-region "fold region")
    )
   "vterms"
    (
     ;;("v" multi-vterm-next "vterm-toggle")
     ;; ("V" multi-vterm "vterm")


     ;; TODO: handle no project case
     ;; ("v" multi-vterm-project "vterm toggle")
     ;; ("V" multi-vterm "vterm")

     ("v" vi/vterm-local "vterm-toggle")
     ("V" (vi/vterm-local t) "vterm")
      ("D" detached-list-sessions "Detached list sessions")
    )
   "Modes"
   (;; ("a" hydra-annotate/body "Annotate")
    ("SPC" vi/major-mode-hydra "Major")
    ("c" flycheck-hydra/body "flycheck")
    ("n" hydra-narrow/body "narrow")
    ("L" lsp-mode-hydra/body "LSP")
    ("e" ein-global-hydra/body "EIN")
    ("p" org-pomodoro "Pomodoro")
    ("M-m" minions-minor-modes-menu "Minor modes")
    )
   "Actions"
   (
    ("M-y" yankpad-insert "yankpad")
    ("g" magit-status-here "magit")
    ("M-\\" edit-indirect-region "edit indirect region")
    ("d" dirvish-dwim "dired" )
    ("r" consult-notes-org-roam-find-node "find node")
    ("M-l" org-store-link "store link")
    ("A" org-agenda-list "Agenda")
    ("W" vi/dedup-windows "Dedupe windows")
    )
   )
  )

(key-chord-define-global "hh" #'global-hydra/body)
(key-chord-define-global "jj" #'vi/major-mode-hydra)
;; Global hydra:1 ends here

;; org-mode config

;; [[file:config.org::*org-mode config][org-mode config:1]]
(after! org
  ;; Add created timestamps to all headings (https://stackoverflow.com/questions/12262220/add-created-date-property-to-todos-in-org-mode/13285957#13285957)
  (require 'org-expiry)
  (org-expiry-insinuate)
  (setq org-expiry-inactive-timestamps t)

  ;; hide org markup indicators
  (setq org-hide-emphasis-markers t
        ;; Insert Org headings at point, not after the current subtree (this is enabled by default by Doom).
        org-insert-heading-respect-content nil
        org-cycle-separator-lines 0
        org-attach-id-dir ".attach"
        org-blank-before-new-entry '((heading . never) (plain-list-item . never))
        org-startup-folded t
        org-startup-indented t
        org-startup-numerated nil
        org-startup-align-all-tables t
        ;; Leads to 'File mode specification error: (user-error Not at a table)' in some org files
        ;; replace with #+startup: shrink
        ;;        org-startup-shrink-all-tables t
        org-log-into-drawer t
        org-src-window-setup 'current-window
        org-src-preserve-indentation nil
        org-edit-src-content-indentation 0
        org-num-skip-commented t
        org-M-RET-may-split-line t
        ;; https://old.reddit.com/r/orgmode/comments/fagcaz/show_schedule_and_deadlines_for_standard_todo_list/
        org-agenda-files '("~/org/personal.org")
        org-refile-targets '(
                             ("~/org/personal.org" . (:maxlevel . 1))
                             ("~/org/ml.org" . (:maxlevel . 1))
                             ("~/org/work.org" . (:maxlevel . 1))
                             ("~/org/learning.org" . (:maxlevel . 1))
                             )
        org-agenda-entry-types '(:deadline :scheduled)
        org-agenda-skip-scheduled-if-done t
        org-todo-keywords '((sequence "TODO(t)" "WAIT(w!)" "REVISIT(r!)" "|" "DONE(d!)" "KILL(k!)" ))
        org-todo-keyword-faces '(("WAIT" . +org-todo-onhold)
                                 ("SOMEDAY" . +org-todo-project)
                                 ("KILL" . +org-todo-cancel))
        org-use-fast-todo-selection 'expert

        ;; https://github.com/radian-software/ctrlf/issues/118
        org-fold-core-style 'overlays)

  (major-mode-hydra-define org-mode (:quit-key ("q" "C-g") :title "test")
    ("Subtree"
     (("k" org-cut-subtree "cut")
      ("y" org-paste-subtree "paste")
      ("<up>" org-promote-subtree "promote" :exit nil)
      ("<down>" org-demote-subtree "demote" :exit nil)
      )
     "Src"
     (("/" org-babel-demarcate-block "split src block")
      ("T" org-babel-tangle "tangle")
       ("\\" org-edit-src-code "edit")
      )
     "Roam/Links"
     (
      ("N" org-id-get-create "Make into node")
      ("s" consult-notes-search-in-all-notes "search notes")
      ;; ("l" org-store-link "store link")
      ("i" org-insert-link "insert link")
      ("t" org-roam-tag-add "tag")
      ("X" org-roam-extract-subtree "Extract to node")
      ("w" org-roam-refile "refile")
      )
     "Misc"
     (
      ;; https://stackoverflow.com/a/6156444
      ;; '(4) is prefix (C-u)
      ;; '(16) is double-prefix C-u C-u
      ("x" (org-toggle-checkbox '(4)) "List [x]")
      ("*" org-toggle-heading "Toggle heading")
      ("-" org-toggle-item "Toggle item")
      ("Y" org-download-clipboard "pbpaste")
      )
     )
    )
  )
;; org-mode config:1 ends here

;; [[file:config.org::*show delimiters][show delimiters:2]]
(use-package! org-appear
 :after org
 :custom (
          (org-appear-autoemphasis t)
          (org-appear-autolinks t)
          (org-appear-autosubmarkers t)
          (org-appear-autoentities t)
          )
 :hook (org-mode . org-appear-mode)
 )
;; show delimiters:2 ends here

;; [[file:config.org::*Use auto-tangle][Use auto-tangle:2]]
(use-package! org-auto-tangle
 :after org
 :config
 (setq org-auto-tangle-default t)      ;this doesn't work with :custom
 :hook (org-mode . org-auto-tangle-mode))
;; Use auto-tangle:2 ends here

;; [[file:config.org::*Images][Images:2]]
(after! org
 (setq org-download-method 'directory
       org-download-image-dir "org-images"
       org-download-heading-lvl nil
       org-download-timestamp "%Y%m%d-%H%M%S_"
       org-startup-with-inline-images t
       org-image-actual-width 300))
;; Images:2 ends here

;; Reformatting an Org buffer

;; (originally:
;; https://zzamboni.org/post/my-doom-emacs-configuration-with-commentary/ A
;; function that reformats the current buffer by regenerating the text from its
;; internal parsed representation. Quite amazing.)


;; [[file:config.org::*Reformatting an Org buffer][Reformatting an Org buffer:1]]
(after! org
 (defun vi/org-reformat-buffer ()
   (interactive)
   (when (y-or-n-p "Really format current buffer? ")
     (let ((document (org-element-interpret-data (org-element-parse-buffer))))
       (erase-buffer)
       (insert document)
       (goto-char (point-min))))))
;; Reformatting an Org buffer:1 ends here

;; misc

;; [[file:config.org::*misc][misc:1]]
(after! org
 ;; http://emacs.stackexchange.com/a/10712/115
 (defun modi/org-delete-link ()
   "Replace an Org link of the format [[LINK][DESCRIPTION]] with DESCRIPTION.
If the link is of the format [[LINK]], delete the whole Org link.

In both the cases, save the LINK to the kill-ring.

Execute this command while the point is on or after the hyper-linked Org link."
   (interactive)
   (when (derived-mode-p 'org-mode)
     (let ((search-invisible t) start end)
       (save-excursion
         (when (re-search-backward "\\[\\[" nil :noerror)
           (when (re-search-forward "\\[\\[\\(.*?\\)\\(\\]\\[.*?\\)*\\]\\]"
                                    nil :noerror)
             (setq start (match-beginning 0))
             (setq end   (match-end 0))
             (kill-new (match-string-no-properties 1)) ;Save link to kill-ring
             (replace-regexp "\\[\\[.*?\\(\\]\\[\\(.*?\\)\\)*\\]\\]" "\\2"
                             nil start end)))))))

 (defun modi/lower-case-org-keywords ()
   "Lower case Org keywords and block identifiers.

Example: \"#+TITLE\" -> \"#+title\"
        \"#+BEGIN_EXAMPLE\" -> \"#+begin_example\"

Inspiration:
https://code.orgmode.org/bzg/org-mode/commit/13424336a6f30c50952d291e7a82906c1210daf0."
   (interactive)
   (save-excursion
     (goto-char (point-min))
     (let ((case-fold-search nil)
           (count 0))
       ;; Match examples: "#+FOO bar", "#+FOO:", "=#+FOO=", "~#+FOO~",
       ;;                 "‘#+FOO’", "“#+FOO”", ",#+FOO bar",
       ;;                 "#+FOO_bar<eol>", "#+FOO<eol>".
       (while (re-search-forward "\\(?1:#\\+[A-Z_]+\\(?:_[[:alpha:]]+\\)*\\)\\(?:[ :=~’”]\\|$\\)" nil :noerror)
         (setq count (1+ count))
         (replace-match (downcase (match-string-no-properties 1)) :fixedcase nil nil 1))
       (message "Lower-cased %d matches" count))))
)
;; misc:1 ends here

;; Archive all done tasks

;; [[file:config.org::*Archive all done tasks][Archive all done tasks:1]]
(after! org
 ;; https://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command
 (defun vi/org-archive-done-tasks ()
   (interactive)
   (org-map-entries
    (lambda ()
      (org-archive-subtree)
      (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
    "/DONE" 'tree))
)
;; Archive all done tasks:1 ends here



;; Needs ~brew install pandoc~


;; [[file:config.org::*Import from various formats into org][Import from various formats into org:2]]
(use-package! org-pandoc-import :after org)
;; Import from various formats into org:2 ends here



;; Let's use this with file-locals instead


;; [[file:config.org::*literate calc][literate calc:2]]
;; (add-hook! org-mode #'literate-calc-minor-mode)

(after! calc
 ;; converts
 (defalias 'calcFunc-uconv 'math-convert-units)

 ;; usimplify() simplifies units, alias to U
 (defalias 'calcFunc-U 'calcFunc-usimplify)
)
;; literate calc:2 ends here

;; sh-mode src blocks

;; sh-mode uses $SHELL by default: https://list.orgmode.org/87eeg0tz6t.fsf@gmail.com/T/


;; [[file:config.org::*sh-mode src blocks][sh-mode src blocks:1]]
(after! org
 (defun org-babel-bash-mode ()
   (sh-mode)
   (sh-set-shell "bash"))

 (add-to-list 'org-src-lang-modes '("bash" . org-babel-bash))
 )
;; sh-mode src blocks:1 ends here

;; org babel chaining

;; https://xenodium.com/emacs-chaining-org-babel-blocks/


;; [[file:config.org::*org babel chaining][org babel chaining:1]]
(defun adviced:org-babel-execute-src-block (&optional orig-fun arg info params)
 (let ((body (nth 1 info))
       (include (assoc :include (nth 2 info)))
       (named-blocks (org-element-map (org-element-parse-buffer)
                         'src-block (lambda (item)
                                      (when (org-element-property :name item)
                                        (cons (org-element-property :name item)
                                              item))))))
   (while include
     (unless (cdr include)
       (user-error ":include without value" (cdr include)))
     (unless (assoc (cdr include) named-blocks)
       (user-error "source block \"%s\" not found" (cdr include)))
     (setq body (concat (org-element-property :value (cdr (assoc (cdr include) named-blocks)))
                        body))
     (setf (nth 1 info) body)
     (setq include (assoc :include
                          (org-babel-parse-header-arguments
                           (org-element-property :parameters (cdr (assoc (cdr include) named-blocks)))))))
   (funcall orig-fun arg info params)))

(advice-add 'org-babel-execute-src-block :around 'adviced:org-babel-execute-src-block)
;; org babel chaining:1 ends here

;; calendar


;; [[file:config.org::*calendar][calendar:1]]
(after! org
  (defmacro vi/org-in-calendar (command)
    (let ((name (intern (format "vi/org-in-calendar-%s" command))))
      `(progn
         (defun ,name ()
           (interactive)
           (org-eval-in-calendar ,command))
         #',name)))

  (map! :map org-read-date-minibuffer-local-map
        "<right>" (vi/org-in-calendar '(calendar-forward-day 1))
        "<left>" (vi/org-in-calendar '(calendar-backward-day 1))
        ">" (vi/org-in-calendar '(calendar-forward-month 1))
        "<" (vi/org-in-calendar '(calendar-backward-month 1))
        "." (vi/org-in-calendar '(calendar-goto-today)))
)
;; calendar:1 ends here

;; Org Roam


;; - <2022-09-09 Fri> If we set org-roam-directory to ~org-directory~, syncing is
;;   much faster; but we can't convert things outside of that directory into Nodes

;;   by doing org-id-get-create. Let's see if this is a problem

;; - <2022-09-11 Sun> Yes it is a problem: startup is very slow and lots of direnv
;;   shit, dir-locals gets executed. We might have to use org-roam-refile


;; [[file:config.org::*Org Roam][Org Roam:1]]
(use-package! org-roam
 :after consult-notes
 :custom
 ;; (org-roam-directory (getenv "HOME"))
 (org-roam-directory org-directory)
 (org-roam-db-node-include-function (lambda () (not (member "ATTACH" (org-get-tags)))))
 :config
 (org-roam-db-autosync-mode)
 (require 'org-protocol)
 )
;; Org Roam:1 ends here

;; [[file:config.org::*consult-notes][consult-notes:2]]
(use-package! consult-notes
  :commands (consult-notes consult-notes-search-in-all-notes consult-notes-org-roam-find-node consult-notes-org-roam-find-node-relation)
  :config
  (consult-notes-org-roam-mode)
  )
;; consult-notes:2 ends here

;; fill paragraph



;; [[file:config.org::*fill paragraph][fill paragraph:1]]
(defun org-back-to-item ()
  (re-search-backward "^ *[-+*]\\|^ *[1-9]+[)\.] " nil nil 1))

(defun org-fill-paragraph-handle-lists (&optional num-paragraphs)
  (interactive "p")
  (save-excursion
    (let ((bound (if mark-active
                     (- (region-end) 2)
                   (progn
                     (org-back-to-item)
                     (while (>= num-paragraphs 0)
                       (call-interactively 'org-mark-element)
                       (setq num-paragraphs (1- num-paragraphs)))
                     (- (region-end) 2)))))
      (while (search-forward "\n" bound t)
        (replace-match " ")))
    (org-fill-paragraph)))

(map! :mode org-mode "C-M-q" #'org-fill-paragraph-handle-lists)
;; fill paragraph:1 ends here

;; [[file:config.org::*colored-text][colored-text:2]]
(use-package! org-colored-text :after org) ;; :load-path "/home/venky/dev/org-colored-text/")
;; colored-text:2 ends here

;; No htmlentities in quotes

;; [[file:config.org::*No htmlentities in quotes][No htmlentities in quotes:1]]
(after! org
  (setq org-export-with-smart-quotes nil)
  )
;; No htmlentities in quotes:1 ends here

;; [[file:config.org::*ein][ein:2]]
(use-package! ein
  :commands (ein:notebooklist-open ein:notebooklist-login)
  :init
  (setq ein:polymode t)
  (setq ein:notebooklist-render-order '(render-opened-notebooks render-directory render-header))
  (setq ein:truncate-long-cell-output 1000)
  (setq ein:cell-max-num-outputs 1000)
  (setq ein:worksheet-enable-undo t)
  (setq ein:markdown-header-scaling nil)    ;this leads to variable pitch faces for
                                        ;markdown headers, which doesn't work so
                                        ;well with fontlocking (and outline-minor-faces-mode)
  (setq ein:output-area-inlined-images t)
  (setq ein:url-or-port '("http://localhost:8888"))
  (setq ein:jupyter-server-command "~/.local/bin/jupyter")
  ;; https://stackoverflow.com/a/67804732/14044156
  (setq ein:jupyter-server-use-subcommand "server")
  (setq ein:jupyter-server-args '("--no-browser" "--port=8889"))
  ;; https://github.com/millejoh/emacs-ipython-notebook/issues/423#issuecomment-458254069
  (setq ein:query-timeout nil)
  :config

  (custom-set-faces!
    '(ein:cell-output-area :background "MidnightBlue" :extend t)
    '(ein:cell-output-area-error :background "OrangeRed4" :extend t)
    '(ein:codecell-input-area-face :background "#23272e" :extend t)
    '(ein:codecell-input-prompt-face :foreground "black" :background "cyan" :extend t)
    ;; '(ein:markdowncell-input-prompt-face :foreground "LightPink" :background "black" :extend t)
    '(ein:markdowncell-input-prompt-face :foreground nil :background nil :extend t)
    '(ein:markdowncell-input-area-face :background nil :extend t)
    '(ein:markdown-header-face-1 :inherit nil)
    '(ein:markdown-header-face-2 :inherit nil)
    '(ein:markdown-header-face-3 :inherit nil)
    '(ein:markdown-header-face-4 :inherit nil)
    '(ein:markdown-header-face-5 :inherit nil)
    '(ein:markdown-header-face-6 :inherit nil)
    ;; '(ein:markdown-header-face :foreground "snow" :weight bold)
    ;; '(ein:markdown-header-face :foreground nil :weight normal)
    )

  (defun vi/ein-toggle-inlined-images ()
    (interactive)
    (setq ein:output-area-inlined-images (if ein:output-area-inlined-images nil t))
    )

  (defun vi/restart-and-execute-all-above ()
    (interactive)
    ;; This is required for lexical-let
    (eval-when-compile (require 'cl))
    (aif (ein:get-notebook)
      (lexical-let ((ws (ein:worksheet--get-ws-or-error)))
        (ein:kernel-delete-session
          (lambda (kernel)
            (ein:events-trigger (ein:$kernel-events kernel) 'status_restarting.Kernel)
            (ein:kernel-retrieve-session kernel 0
              (lambda (kernel)
                (ein:events-trigger (ein:$kernel-events kernel) 'status_restarted.Kernel)
                (ein:worksheet-execute-all-cells-above ws))))
          :kernel (ein:$notebook-kernel it)))
      (message "Not in notebook buffer!"))
    )

  (defun vi/ein:select-cell-text (cell)
    (interactive (list (ein:worksheet-get-current-cell)))
    (let* ((beg (ein:cell-input-pos-min cell))
            (end (ein:cell-input-pos-max cell)))
      (set-mark (goto-char beg))
      (goto-char end))
    )

  (defun vi/revert-notebook ()
    (interactive)
    (aif (ein:get-notebook)
      (let ((nurl (ein:$notebook-url-or-port it))
             (npath (ein:$notebook-notebook-path it)))
        ;; fix disabled undo
        (setq! ein:worksheet-enable-undo t)
        (ein:notebook-close it)
        ;; Reopen, but put it in the same window we were in
        (ein:notebook-open nurl npath nil
          (lambda (nb _)
            (switch-to-buffer (ein:notebook-buffer nb))))
        )))
  )
;; ein:2 ends here

;; [[file:config.org::*ein][ein:3]]
;; ein-hydra
(pretty-hydra-define ein-global-hydra (:exit t :quit-key ("q" "C-g"))
  ("Connect"
    (("b" ein:notebooklist-open "Notebook list")
      ("l" ein:notebooklist-login "Login")
      ("s" ein:jupyter-server-start "Start")
      ("t" ein:jupyter-server-stop "Stop")
      ("C" ein:byte-compile-ein "Byte-compile")
      ))
  )

(major-mode-hydra-define (ein:notebook-mode ein:shared-output-mode) (:quit-key ("q" "C-g") :exit t :foreign-keys run)
  (
    "Reconnect"
    (("r" ein:notebook-reconnect-session-command "Reconnect")
      ("R" ein:notebook-restart-session-command "Restart")
      ("z" ein:notebook-kernel-interrupt-command "interrupt")
      ("v" vi/revert-notebook "Revert")
      ("K" ein:notebook-switch-kernel "Switch Kernel"))
    "Exec"
    (
      ("x" ein:worksheet-execute-all-cells-above "Execute all above")
      ("X" vi/restart-and-execute-all-above "Restart & x")
      )
    "Nav"
    (
      ("p" ein:worksheet-goto-prev-input-km "Prev Cell" :exit nil)
      ("n" ein:worksheet-goto-next-input-km "Next Cell" :exit nil)
      ("SPC" vi/ein:select-cell-text "Select cell")
      ("/" ein:notebook-scratchsheet-open-km "Scratch")
      )
    "Output"
    (
      ("o" ein:worksheet-toggle-output "Toggle output")
      ("O" ein:shared-output-show-code-cell-at-point "Show in shared output")
      ("M-o" (ein:worksheet-set-output-visibility-all (ein:worksheet--get-ws-or-error) t) "Hide all output")
      ("M-O" ein:worksheet-set-output-visibility-all "Show all output")
      )
    "Fix"
    (("i" vi/ein-toggle-inlined-images "Toggle inlined images")
      ;; ("M-f" vi/ein-fix "Fix")
      ("N" ein:notebook-rename-command "Rename")
      )
    "Python"
    (
      ("f" python-black-partial-dwim "Format")
      )
    ))
;; ein:3 ends here

;; [[file:config.org::*ein][ein:4]]
;; (setq scroll-preserve-screen-position t
;;       scroll-conservatively 0
;;       maximum-scroll-margin 0.5
;;       scroll-margin 99999)

;; (defun vi/ein-fix ()
;;   (interactive)
;;   ;; (set-face-extend 'ein:cell-input-area t)
;;   (setq ein:worksheet-enable-undo t)
;;   (buffer-enable-undo)
;;   ;; (turn-on-undo-tree-mode)
;;   )



(setq-hook! 'ein:notebook-mode-hook
  outline-minor-mode-use-buttons t
  outline-regexp "##+"
  )           ;capture markdown headings, excluding level 1 for comments

(add-hook! 'ein:notebook-mode-hook
  #'rainbow-delimiters-mode-disable

  ;; These fail on first load in this hook, but seem to work in poly-ein-mode-hook?

  ;; (outline-minor-faces-mode t)
  ;; (outline-minor-mode t)
  )

(add-hook! 'poly-ein-mode-hook
  ;;(outline-minor-faces-mode t)
  (outline-minor-mode t))               ;we disable outline-minor-mode in prog-mode, but turn it on in ein

;; Unsets M-n in ein polymode (which is normally bound to polymode-map) so that
;; we can use our smartscan-mode bindings
(map! :mode poly-ein-mode
  :map polymode-mode-map
  "M-n" nil)

(map! :map ein:notebook-mode-map
  "C-n" #'ein:worksheet-goto-next-input-km
  "C-p" #'ein:worksheet-goto-prev-input-km
  )


;; (advice-add 'json-parse-buffer :around
;;             (lambda (orig &rest rest)
;;               (while (re-search-forward "\\u0000" nil t)
;;                 (replace-match ""))
;;               (apply orig rest)))
;; ein:4 ends here

;; [[file:config.org::*vterm][vterm:2]]
(setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
(use-package! vterm
  :custom
  (vterm-max-scrollback 100000)
  (vterm-buffer-name-string "vterm %s")
  (vterm-enable-manipulate-selection-data-by-osc52 t)
  :bind
  (
    :map vterm-mode-map
    ("M-j" . nil)
    ("M-k" . nil)
    ("M-9" . nil)
    ("M-0" . nil)
    ("M-:" . nil)
    ("S-<left>" . nil)
    ("S-<right>" . nil)
    ("S-<up>" . nil)
    ("S-<down>" . nil)
    ("C-9" . nil)
    ("C-0" . nil)
    ("C-\\" . vterm-send-next-key)
    )
  :config

  (doom-modeline-def-segment vterm-copy-mode
    "Returns 'Copy' when vterm-copy-mode is active"
    (when
      (and (eq major-mode 'vterm-mode) vterm-copy-mode)
      (concat (doom-modeline-spc) "[Copy]")))


  (doom-modeline-def-modeline 'vi/vterm
    '(bar buffer-info-simple vterm-copy-mode selection-info remote-host)
    '(minor-modes major-mode))

  (remove-hook 'vterm-mode-hook #'hide-mode-line-mode)

  ;; This actually doesn't work with popper because it restores it to the old format
  (add-hook! 'vterm-mode-hook (doom-modeline-set-modeline 'vi/vterm)
    ;; (centered-cursor-mode -1)
    ))

;; (defun vi/vterm-copy ()
;; ;; shows in the misc-info segment
;; (add-to-list 'global-mode-string '(:eval (vi/vterm-copy)))

(defun vi/vterm-reset ()
  (interactive)
  (vterm-send-string "tput cnorm"))

(map! :map vterm-mode-map "C-c C-r" #'vi/vterm-reset)

(defun vi/vterm-hooks ()
  ;; linkify urls
  ;; (goto-address-mode)
  ;; Don't highlight trailing whitespace
  (whitespace-mode -1)
  ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Query-Before-Exit.html
  (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)
  )
(add-hook! 'vterm-mode-hook #'vi/vterm-hooks)
;; vterm:2 ends here

;; Home grown


;; [[file:config.org::*Home grown][Home grown:1]]
(defsubst vi/vterm-dir ()
  ;; TODO: if this is TRAMP, don't return default-directory
  (or (projectile-project-root) default-directory))

(defsubst vi/create-vterm-in-dir (dir)
  (let ((default-directory dir))
    (setq vterm-buf (vterm))
    (with-current-buffer vterm-buf
      (setq-local vi/vterm--created-with-dir default-directory))))

(defsubst vi/existing-vterms-created-with (dir)
  (seq-filter
   (lambda (elt)
     (and
      (eq (buffer-local-value 'major-mode elt) #'vterm-mode)
      (buffer-local-boundp 'vi/vterm--created-with-dir elt)
      (file-equal-p dir (buffer-local-value 'vi/vterm--created-with-dir elt))))
   (buffer-list)))

(defun vi/vterm-project-or-here (&optional force-create)
  (interactive)
  (if-let* ((dir (vi/vterm-dir))
            (check-existing (not force-create))
            (existing-vterm (seq-first (vi/existing-vterms-created-with dir))))
      (pop-to-buffer existing-vterm)
    (vi/create-vterm-in-dir dir)))

;; handle opening in tramp
(defun vi/vterm-local (&optional force-create)
  (interactive)
  (if (and (fboundp 'tramp-tramp-file-p) (tramp-tramp-file-p default-directory))
      (progn
        (message "Tramp dir: opening local vterm")
        (let ((default-directory (getenv "HOME")))
          (vterm)))
    (vi/vterm-project-or-here force-create)))
;; Home grown:1 ends here

;; Flycheck


;; [[file:config.org::*Flycheck][Flycheck:1]]
(use-package! flycheck
  :after-call doom-first-file-hook
  :custom
  (flycheck-check-syntax-automatically '(mode-enabled save idle-change idle-buffer-switch))
  (flycheck-idle-change-delay 10)
  (flycheck-idle-buffer-switch-delay 5)
  (flycheck-highlighting-style '(conditional 10 level-face (delimiters "" "")))
  (flycheck-global-modes '(prog-mode))
  :config
  (global-flycheck-mode -1)
  :hook ((prog-mode . flycheck-mode))
  :pretty-hydra
  (
   (:exit t)
   (
    "Flycheck"
    (
    ("c" flycheck-buffer "check buffer")
    ("l" (consult-lsp-diagnostics t) "file errors")
    ;; ("p" flycheck-projectile-list-errors "project errors")
    ("L" consult-flycheck "consult")
    ("d" (flycheck-mode -1) "Disable Flycheck")
    ("e" (flycheck-mode) "Enable Flycheck")
    ("q" nil "quit")
     )
    )
   )
  )
;; Flycheck:1 ends here

;; Check directory




;; [[file:config.org::*Check directory][Check directory:1]]
(defun endless/flycheck-dir (dir)
  "Run flycheck for each file in current directory.
Results are reported in a compilation buffer."
  (interactive "DDirectory: ")
  (displaying-byte-compile-warnings
   (let ((p nil))
     (with-current-buffer (get-buffer-create
                           byte-compile-log-buffer)
       (setq default-directory dir)
       (unless (eq major-mode 'compilation-mode)
         (compilation-mode))
       (goto-char (point-max))
       (let ((inhibit-read-only t))
         (insert "\n\xc\n\n"))
       (setq p (point)))
     (dolist (file (directory-files "./" nil
                                    "\\`[^\\.].*\\'"))
       (endless/-flycheck-file file))
     (with-selected-window (display-buffer
                            byte-compile-log-buffer)
       (goto-char p)
       (recenter 1)))))

(defun endless/-report-error (fmt &rest args)
  "Print an error on `byte-compile-log-buffer'."
  (let ((inhibit-read-only t)
        (fill-prefix "    "))
    (with-current-buffer byte-compile-log-buffer
      (let ((l (point)))
        (insert "\n" (apply #'format fmt args))
        (fill-region (1+ l) (point))))))

(defun endless/-flycheck-file (file)
  "Check FILE and report to `byte-compile-log-buffer'."
  (let ((was-visited (find-buffer-visiting file)))
    (with-current-buffer (or was-visited
                             (progn (find-file file)
                                    (current-buffer)))
      (when (ignore-errors (flycheck-buffer))
        (while (flycheck-running-p)
          (accept-process-output nil 0.1))
        (pcase flycheck-last-status-change
          ((or `errored `suspicious)
           (endless/-report-error
            "%s: Something wrong here!"
            (file-name-nondirectory (buffer-file-name))))
          (`finished
           (dolist (e flycheck-current-errors)
             (endless/-report-error
              "%s:%s:%s:%s: %s"
              (file-name-nondirectory (buffer-file-name))
              (flycheck-error-line e)
              (flycheck-error-column e)
              (flycheck-error-level e)
              (flycheck-error-message e))))))
      (if was-visited
          (bury-buffer was-visited)
        (kill-buffer (current-buffer))))))
;; Check directory:1 ends here

;; magit/git


;; [[file:config.org::*magit/git][magit/git:1]]
(after! magit
  ;; Set magit log date formats
  (setq magit-log-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))

  ;; set to 'all, this seems to make commits slow?
  (setq magit-diff-refine-hunk t)

  ;; Add ignored files section to magit status
  ;; This makes yadm-status very slow: https://github.com/magit/magit/discussions/4750
  (magit-add-section-hook 'magit-status-sections-hook
                          'magit-insert-ignored-files       ;insert this one
                          'magit-insert-unstaged-changes t) ;after this one
  )

(map! :map magit-mode-map
      "s-<tab>" #'magit-section-cycle-diffs
      "M-<tab>" nil
      )
;; magit/git:1 ends here

;; ediff



;; [[file:config.org::*ediff][ediff:1]]
(defun vi/ediff-setup-windows-plain-merge (buf-A buf-B buf-C control-buffer)
  ;; skip dedicated and unsplittable frames
  (ediff-destroy-control-frame control-buffer)
  (let ((window-min-height 1)
         (with-Ancestor-p (with-current-buffer control-buffer
                            ediff-merge-with-ancestor-job))
         split-window-function
         merge-window-share merge-window-lines
         (buf-Ancestor (with-current-buffer control-buffer
                         ediff-ancestor-buffer))
         wind-A wind-B wind-C wind-Ancestor)
    (with-current-buffer control-buffer
      (setq merge-window-share ediff-merge-window-share
        ;; this lets us have local versions of ediff-split-window-function
        split-window-function ediff-split-window-function))
    (delete-other-windows)
    (set-window-dedicated-p (selected-window) nil)
    (split-window-vertically)
    (ediff-select-lowest-window)
    (ediff-setup-control-buffer control-buffer)

    ;; go to the upper window and split it betw A, B, and possibly C
    (other-window 1)
    (setq merge-window-lines
      (max 2 (round (* (window-height) merge-window-share))))
    (switch-to-buffer buf-A)
    (setq wind-A (selected-window))

    (split-window-vertically (max 2 (- (window-height) merge-window-lines)))
    (if (eq (selected-window) wind-A)
      (other-window 1))

    (setq wind-C (selected-window))
    (switch-to-buffer buf-C)

    (select-window wind-A)
    (funcall split-window-function)

    (if (eq (selected-window) wind-A)
      (other-window 1))
    (switch-to-buffer buf-B)
    (setq wind-B (selected-window))

    (when (and ediff-show-ancestor with-Ancestor-p)
      (select-window wind-B)
      (split-window-horizontally)
      (when (eq (selected-window) wind-B)
        (other-window 1))
      (switch-to-buffer buf-Ancestor)
      (setq wind-Ancestor (selected-window)))

    (balance-windows-area)

    (with-current-buffer control-buffer
      (setq ediff-window-A wind-A
        ediff-window-B wind-B
        ediff-window-C wind-C
        ediff-window-Ancestor wind-Ancestor))

    (ediff-select-lowest-window)
    (minimize-window)
    (ediff-setup-control-buffer control-buffer)
    ))

(add-hook! '(ediff-before-setup-hook ediff-before-setup-windows-hook) (setq ediff-window-setup-function #'vi/ediff-setup-windows-plain-merge))
;; ediff:1 ends here

;; Another method, setting git flags

;; Quit recursive edit using C-]


;; [[file:config.org::*Another method, setting git flags][Another method, setting git flags:1]]
(defun yadm-status ()
  "Magit on dotfiles repo for the duration of a recursive edit."
  (interactive)
  (require 'magit)
  (let ((magit-git-global-arguments
          `(,(substitute-env-vars "--git-dir=/home/venky/.local/share/yadm/repo.git")
             ,(substitute-env-vars "--work-tree=/home/venky")
             ,@magit-git-global-arguments)))
    (magit-status "~")
    (recursive-edit)))
;; Another method, setting git flags:1 ends here

;; LSP



;; [[file:config.org::*LSP][LSP:1]]
(use-package! lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")

  :custom
  ;; We prefer to use TabNine::sem

  (lsp-enable-snippet nil)
  ;; https://emacs-lsp.github.io/lsp-mode/page/settings/
  (lsp-auto-configure t)
  (lsp-enable-imenu t)

  ;; controls doc buffers at bottom (this is not eldoc -- which in python-mode is truncated, so useless)
  ;; shows signature automatically inside arg params or <C-c l h s>
  ;; see lsp-ui-doc-mode for on cursor
  (lsp-signature-auto-activate '(:on-trigger-char :on-server-request))
  (lsp-signature-render-documentation nil)
  (lsp-headerline-breadcrumb-enable t)
  (lsp-headerline-breadcrumb-enable-diagnostics nil)
  (lsp-keep-workspace-alive nil)
  (lsp-semantic-tokens-enable nil)      ;no semantic highlighting: rainbow-identifiers
  (lsp-symbol-highlighting-skip-current t)
  (lsp-enable-xref nil)
  (lsp-lens-enable t)
  (lsp-idle-delay 0.1)
  (lsp-disabled-clients '((python-mode . '(pyls pylsp mspyls))))

    ;; This will disable the flycheck checkers. (we use them directly to have better control)
  ;; (lsp-diagnostics-provider :flycheck)
  (lsp-diagnostic-clean-after-change t)
  ;; https://github.com/emacs-lsp/lsp-mode#performance
  (read-process-output-max (* 1024 1024)) ;; 1mb
  (lsp-file-watch-threshold 2000)
  (lsp-enable-completion-at-point t)
  (lsp-completion-provider :none)       ;disable company-mode

  ;; sideline
  (lsp-ui-sideline-enable t)
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-sideline-show-symbol nil)
  (lsp-ui-sideline-show-diagnostics t)
  (lsp-ui-sideline-show-code-actions t)
  (lsp-ui-sideline-delay 0.1)
  ;; peek
  (lsp-ui-peek-enable t)
  ;; imenu
  ;; (lsp-ui-imenu-window-width 30)
  ;; (lsp-ui-imenu-auto-refresh t)


  :config
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.venv\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.mypy_cache\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]wandb\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]__pycache__\\'")

  ;; Fix the hint diagnostic to display as faded out, not error  (https://github.com/emacs-lsp/lsp-mode/issues/3104)
  ;; Unrelated error: Invalid face reference: lsp-flycheck-info-unnecessary (https://github.(com/emacs-lsp/lsp-mode/issues/2255)
  (add-hook! 'lsp-diagnostics-updated-hook
             ;; For some reason, this face is only defined after the
             ;; lsp-diagnostics-updated-hook, so this will fail the first time
             ;; through
    (if (facep 'lsp-flycheck-info-unnecessary-face)
        (set-face-attribute 'lsp-flycheck-info-unnecessary-face nil :foreground "gray30" :underline nil))
    )

  :pretty-hydra
  ((
    "LSP"
    (("?" lsp-find-references "Find references")
     ("." lsp-find-definition "Find definition")
     ("," lsp-find-type-definition "Find type"))
     ;; ("e" lsp-treemacs-errors-list "Errors"))
    )
    )
  )

(setq-hook! 'lsp-ui-doc-mode-hook
    ;; doc in childframe
  lsp-ui-doc-enable t
  lsp-ui-doc-include-signature t
  lsp-ui-doc-show-with-cursor t
  lsp-ui-doc-position 'bottom
  lsp-ui-doc-header nil
  lsp-ui-doc-max-height 50
  lsp-ui-doc-max-width 75
  lsp-ui-doc-delay 1)
;; LSP:1 ends here

;; ccls vs clangd

;; doom-emacs default c++ lsp server is ccls. (See https://github.com/hlissner/doom-emacs/issues/2689)

;; Switching to clangd seems to require some or all of the following:

;; 1. Disable ccls package


;; [[file:config.org::*ccls vs clangd][ccls vs clangd:1]]
;; (disable-packages! ccls)
;; ccls vs clangd:1 ends here

;; Turn off lens

;; Lens shows refs for each variable in an overlay which is annoying. Also duplicated between lsp-lens and ccls-code-lens


;; [[file:config.org::*Turn off lens][Turn off lens:1]]
(defun vi/setup-c++-lsp ()
  ;; For now we are using ccls, might want to try clangd someday. ccls is
  ;; default in doom-emacs, switching to clangd didn't work out of the box.
  (setq-local lsp-lens-enable nil)
  (remove-hook! lsp-lens-mode #'ccls-code-lens-mode)
  (ccls-code-lens-mode -1)
  )
;; Turn off lens:1 ends here

;; Python


;; [[file:config.org::*Python][Python:1]]
(use-package! python
  :custom
  (python-fill-docstring-style 'symmetric)
  )
;; Python:1 ends here

;; [[file:config.org::*Python][Python:2]]
(defun vi/setup-python-flycheck ()

  ;; This needs to happen after lsp else:
  ;; Error (python-mode-hook): Error running hook "vi/setup-python-flycheck" because: (user-error lsp is not a syntax checker)
  (flycheck-select-checker 'lsp)

  ;; Not sure if we need flake8 - it pegs the CPU on some buffers
  ;; (flycheck-add-next-checker 'lsp 'python-flake8-vi)

  ;; Why do we still have mypy? The theory is that it gives some better messages complementary to pyright
  ;;(setq-local flycheck-python-mypy-executable (concat (projectile-project-root) "/.venv/bin/mypy"))
  ;; (flycheck-add-next-checker 'lsp 'python-mypy-vi)

  ;; Check if the file is broken
  (flycheck-add-next-checker 'lsp 'python-pycompile)

  ;; we could disable mypy as well, since pyright does most of it, but pyright doesn't support attrs yet?
  (setq-local flycheck-disabled-checkers '(python-pylint python-mypy))
  )
;; Python:2 ends here

;; LSP setup

;; [[file:config.org::*LSP setup][LSP setup:1]]
(defun vi/python-mode-lsp ()

  ;;;; EDIT: this also filters out the visual rendering (https://discord.com/channels/789885435026604033/789890622424219658/993942950331551814)
  ;;;; Filter out "lsp-info-flycheck-"
  ;;;; severity=4 ("hint"), tag=1 ("unnecessary") -- see vi/filter-tag-diagnostics for reference
  ;; (setq-local lsp-diagnostic-filter (lambda (param work) (vi/filter-lsp-diagnostics param 4 1)))

  ;; So that lsp is available as a checker
  (add-hook! 'lsp-after-open-hook #'vi/setup-python-flycheck)

  ;; we prefer rainbow-delimiters-mode
  ;; (tree-sitter-hl-mode)
  )

(add-hook! 'python-mode-hook #'vi/python-mode-lsp)
;; LSP setup:1 ends here

;; Hydra


;; [[file:config.org::*Hydra][Hydra:1]]
(major-mode-hydra-define (python-mode python-pytest-mode) (:exit t :quit-key ("q" "C-g"))
  (
   "Pytest"
   (
    ("d" python-pytest-dispatch "Dispatch")
    ("r" python-pytest-repeat "Repeat")
    )
   "Misc"
   (("i" vi/pyflyby-tidy-imports "Imports"))
   )
  )
;; Hydra:1 ends here

;; Pyflyby

;; pipx install pyflyby
;; pipx inject pyflyby 'black[jupyter]'


;; [[file:config.org::*Pyflyby][Pyflyby:1]]
(use-package! pyflyby
  :commands (pyflyby-transform-region-with-command)
  :load-path "~/.local/pipx/venvs/pyflyby/share/emacs/site-lisp"
  )

(defun vi/pyflyby-tidy-imports ()
  (interactive "*")
  ;; even with this, it will drop comments https://github.com/deshaw/pyflyby/issues/154
  (pyflyby-transform-region-with-command "tidy-imports" "--black");;  "--align=0" "--from-spaces=1")
  )
;; Pyflyby:1 ends here

;; [[file:config.org::*apheleia][apheleia:2]]
(use-package! apheleia
  :after-call doom-first-buffer-hook
  :config
  (setf (alist-get 'isort apheleia-formatters) '("isort" "--profile=black" "--stdout" "-"))
  (setf (alist-get 'usort apheleia-formatters) '("usort" "format" "-"))

  ;; this may require `npm install -g prettier prettier-plugin-toml --save-dev --save-exact`
  (setf (alist-get 'prettier-toml apheleia-formatters) '(npx "prettier" "--stdin-filepath" filepath "--parser=toml"))

  ;; Black uses config in ~/.config/black but not if a pyproject.toml is present (https://github.com/psf/black/issues/2863)
  (setf (alist-get 'black apheleia-formatters) '("black" "--config" (substitute-in-file-name "$HOME/.config/black") "-"))

  ;; isort messes up type:ignore on imports (eg: https://github.com/psf/black/issues/997)
  ;; isort also messes up jupytext paired files by moving imports around
  ;; pyflyby also messes it up!
  ;; (setf (alist-get 'python-mode apheleia-mode-alist) '(isort black))

  (setf (alist-get 'python-mode apheleia-mode-alist) '(usort black))
  (setf (alist-get 'conf-toml-mode apheleia-mode-alist) '(prettier-toml))
  (apheleia-global-mode)
  )
;; apheleia:2 ends here

;; [[file:config.org::*Javascript/Typescript][Javascript/Typescript:2]]
(add-hook! '(typescript-mode-hook rjsx-mode-hook) #'add-node-modules-path)
;; Javascript/Typescript:2 ends here

;; [[file:config.org::*dirvish][dirvish:2]]
(use-package! dirvish
  :config
  (dirvish-override-dired-mode)
  (dirvish-peek-mode))
;; dirvish:2 ends here



;; doesn't work well with subtree inserts


;; [[file:config.org::*dired git info/log][dired git info/log:2]]
;; (add-hook 'dired-after-readin-hook 'dired-git-log-mode)
;; dired git info/log:2 ends here

;; Stage files from dired

;; +TODO: Use https://github.com/conao3/dired-git.el instead for the git portion of+
;; +this. I wonder if it will also "just" work for the yadm case if I'm using+
;; +/yadm:: dired via tramp+ <-- this sucks

;; https://gist.github.com/justinhj/5945047

;; [[file:config.org::*Stage files from dired][Stage files from dired:1]]
(defun git-add-files(files)
  "Run git add with the input file"
  (shell-command (format "git add %s" files)))

(defun yadm-add-files(files)
  "Run git add with the input file"
  (let ((default-directory "~/"))
    (shell-command (format "yadm add %s" files))))

(defun dired-git-add-marked-files()
  "For each marked file in a dired buffer add it to the index"
  (interactive)
  (if (eq major-mode 'dired-mode)
      (let ((filenames (dired-get-marked-files))
	    (files ""))
	(dolist (fn filenames)
	  (setq fn (shell-quote-argument fn))
	  (setq files (concat files " " fn)))
	(git-add-files files))
    (error (format "Not a Dired buffer \(%s\)" major-mode))))

(defun dired-yadm-add-marked-files()
  "For each marked file in a dired buffer add it to the index"
  (interactive)
  (if (eq major-mode 'dired-mode)
      (let ((filenames (dired-get-marked-files))
	    (files ""))
	(dolist (fn filenames)
	  (setq fn (shell-quote-argument fn))
	  (setq files (concat files " " fn)))
	(yadm-add-files files))
    (error (format "Not a Dired buffer \(%s\)" major-mode))))
;; Stage files from dired:1 ends here

;; subtree



;; [[file:config.org::*subtree][subtree:1]]
(after! dired
  (map! :map dired-mode-map
    "<tab>" #'dired-subtree-toggle
    "<backtab>" #'dired-subtree-cycle)
)
;; subtree:1 ends here

;; [[file:config.org::*sidebar][sidebar:2]]
(after! dired-sidebar
  (add-hook! 'dired-sidebar-mode-hook  #'hide-mode-line-mode))
;; sidebar:2 ends here

;; xdg open


;; [[file:config.org::*xdg open][xdg open:1]]
(defun dired-open-file ()
  "In dired, open the file named on this line."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (message "Opening %s..." file)
    (call-process "xdg-open" nil 0 nil file)
    (message "Opening %s done" file)))

(map! :map dired-mode-map "C-<return>" #'dired-open-file)
;; xdg open:1 ends here

;; wdired


;; [[file:config.org::*wdired][wdired:1]]
(map! :map dired-mode-map "w" #'wdired-change-to-wdired-mode)
;; wdired:1 ends here


;; https://old.reddit.com/r/emacs/comments/imy9f1/all_the_icons_dired_subtree/


;; [[file:config.org::*all the icons][all the icons:2]]
(use-package! all-the-icons-dired
  :after dired
  :config
  :hook (dired-mode . (lambda ()
                       (interactive)
                       (unless (file-remote-p default-directory)
                         (all-the-icons-dired-mode)))))

(use-package! dired-subtree
  :commands (dired-subtree-toggle)
  :config
  (advice-add 'dired-subtree-toggle :after (lambda ()
                                             (interactive)
                                             (when all-the-icons-dired-mode
                                               (revert-buffer)))))
;; all the icons:2 ends here

;; [[file:config.org::*sudo][sudo:2]]
(eval-after-load 'tramp
 '(progn
    ;; Allow to use: /sudo:user@host:/path/to/file
    (add-to-list 'tramp-default-proxies-alist
		  '(".*" "\\`.+\\'" "/ssh:%h:"))))
;; sudo:2 ends here

;; hydra


;; [[file:config.org::*hydra][hydra:1]]
(major-mode-hydra-define dired-mode (:hint nil :color pink)
    (
     "Act"
     (
      ("+" dired-create-directory "mkdir")
      ("C" dired-do-copy "Copy")        ;; Copy all marked files
      ("D" dired-do-delete "Delete")
      ("R" dired-do-rename "mv")
      ("$" dired-hide-subdir-nomove "hide-subdir")
      ("i" dired-maybe-insert-subdir "insert subdir")
      ("w" dired-kill-subdir "kill subdir")
      ("M-d" vi/dired-popup-dragon "Drag with dragon")
       ("a" dired-git-add-marked-files "Git add")
      )
     "view"
     (
      ("v" dired-view-file "view")      ;; q to exit, s to search, = gets line #
      ("o" dired-find-file-other-window "open other")
      ("O" dired-display-file "view other")
      ("F" dired-do-find-marked-files "find marked")
      ("A" dired-do-find-regexp "find rx")
      ("Q" dired-do-find-regexp-and-replace "rx replace")

      )
     "listing"
     (
      ("(" dired-hide-details-mode "details")
      (")" dired-omit-mode "omit-mode")
      ("s" dired-sort-toggle-or-edit "sort")
       ;; ("?" dired-summary "summary")
      ;; ("l" dired-do-redisplay "redisplay")   ;; relist the marked or singel directory
      )
     "mark"
     (
      ("m" dired-mark "mark")
      ("u" dired-unmark "unmark")
      ("t" dired-toggle-marks "toggle")
      ("U" dired-unmark-all-marks "unmark all")
      ("E" dired-mark-extension "mark ext")
      )

     "Misc"
     (
      ("z" diredp-compress-this-file "Compress file")
      ("Z" dired-do-compress "Compress")
      ("Y" dired-do-relsymlink "rel symlink")
      ("L" dired-do-symlink "symlink")
      ("M" dired-do-chmod "chmod")
      ("G" dired-do-chgrp "chgrp")
       ("S" dired-toggle-sudo "SUDO")
      )
     )
    )
;; hydra:1 ends here

;; drag and drop

;; brew install indigoviolet/tap/dragon

;; https://old.reddit.com/r/emacs/comments/uq6gxy/drag_files_from_dired_to_other_applications/i8xyxsn/


;; [[file:config.org::*drag and drop][drag and drop:1]]
(defun vi/dired-popup-dragon (&optional arg)
  "Open xdragon with the marked files or the file at point.
With optional prefix argument ARG, drag all the files at once."
  (interactive "P")
  ;; xdragon rename is a nix thing, pretty sure.
  (make-process
   :name "dragon"
   :command (append '("dragon")
                    (when arg '("-a"))
                    (dired-get-marked-files))
   :noquery t))
;; drag and drop:1 ends here

;; Projectile

;; Note: doom has significant customizations in advices around projectile: for
;; instance, it forces projectile to use the "generic" command and not the
;; vcs-specific command.


;; [[file:config.org::*Projectile][Projectile:1]]
(use-package! projectile
  :after-call doom-first-buffer-hook
  :custom
  (projectile-project-search-path '("~/dev"))
  (projectile-auto-discover t)
  ;; copied from doom-projects.el to add -I to fd
  (projectile-generic-command
        (lambda (_)
          ;; If fd exists, use it for git and generic projects. fd is a rust
          ;; program that is significantly faster than git ls-files or find, and
          ;; it respects .gitignore. This is recommended in the projectile docs.
          (cond
           ((when-let*
                ((bin (if (ignore-errors (file-remote-p default-directory nil t))
                          (cl-find-if (doom-rpartial #'executable-find t)
                                      (list "fdfind" "fd"))
                        doom-projectile-fd-binary))
                 ;; REVIEW Temporary fix for #6618. Improve me later.
                 (version (with-memoization doom-projects--fd-version
                            (cadr (split-string (cdr (doom-call-process bin "--version"))
                                                " " t))))
                 ((ignore-errors (version-to-list version))))
                (concat (format "%s . -0 -H -I --color=never --type file --type symlink --follow --exclude .git --exclude .venv --exclude .dvc %s"
                                bin (if (version< version "8.3.0")
                                        "" "--strip-cwd-prefix"))
                        (if IS-WINDOWS " --path-separator=/"))))
           ;; Otherwise, resort to ripgrep, which is also faster than find
           ((executable-find "rg" t)
            (concat "rg -0 --files --follow --color=never --hidden -g!.git"
                    (if IS-WINDOWS " --path-separator=/")))
           ("find . -type f -print0"))))
  :config
  (add-to-list 'projectile-project-root-files "pyproject.toml")
  )
;; Projectile:1 ends here

;; open all project files


;; [[file:config.org::*open all project files][open all project files:1]]
(after! projectile
  (defun vi/find-all-project-files ()
    (interactive)
    (let* (
           (root (projectile-acquire-root))
           (files (projectile-project-files root))
           (filenames (--map (expand-file-name it root) files)))
      (dolist-with-progress-reporter (f filenames) (format "Opening files in project [%s] " root) (find-file-noselect f))
      ))
  )
;; open all project files:1 ends here

;; [[file:config.org::*Firestarter][Firestarter:2]]
(use-package! firestarter
  :after-call doom-first-file-hook
  :custom
  (firestarter-mode)
  )
;; Firestarter:2 ends here

;; dir-locals

;; https://emacs.stackexchange.com/questions/13080/reloading-directory-local-variables

;; [[file:config.org::*dir-locals][dir-locals:1]]
(defun vi/reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))

(defun vi/reload-dir-locals-for-all-buffer-in-this-directory ()
  "For every buffer with the same `default-directory` as the
current buffer's, reload dir-locals."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir))
        (vi/reload-dir-locals-for-current-buffer)))))
;; dir-locals:1 ends here

;; [[file:config.org::*docker][docker:2]]
(after! ob-tangle
  (setq org-babel-pre-tangle-hook
        (list (lambda ()
                (let (before-save-hook after-save-hook)
                  (save-buffer))))))
;; docker:2 ends here

;; Tramp



;; [[file:config.org::*Tramp][Tramp:1]]
;; set in .ssh/config
(after! tramp
  (setq tramp-use-ssh-controlmaster-options nil)
  )
;; Tramp:1 ends here

;; [[file:config.org::*jsonnet][jsonnet:2]]
(use-package! jsonnet-mode
  :after-call doom-first-file-hook
  :mode ("\\.jsonnet\\'"
         "\\.libsonnet\\'"))
;; jsonnet:2 ends here

;; [[file:config.org::*Just][Just:2]]
(setq-hook! '(just-mode-hook) comment-start "# ")
;; Just:2 ends here

;; Cuda mode doesn't inherit from prog-mode?

;; [[file:config.org::*Cuda mode doesn't inherit from prog-mode?][Cuda mode doesn't inherit from prog-mode?:1]]
(add-hook! 'cuda-mode-hook #'prog-mode)
;; Cuda mode doesn't inherit from prog-mode?:1 ends here

;; case cycle


;; [[file:config.org::*case cycle][case cycle:1]]
(defun cycle-letter-case ()
  "Toggle the letter case of current word or text selection.
Always cycle in this order: Init Caps, ALL CAPS, all lower.

URL `http://ergoemacs.org/emacs/modernization_upcase-word.html'
Version 2016-01-08"
  (interactive)
  (let (
        (deactivate-mark nil)
        -p1 -p2)
    (if (use-region-p)
        (setq -p1 (region-beginning)
              -p2 (region-end))
      (save-excursion
        (skip-chars-backward "[:alnum:]")
        (setq -p1 (point))
        (skip-chars-forward "[:alnum:]")
        (setq -p2 (point))))
    (when (not (eq last-command this-command))
      (put this-command 'state 0))
    (cond
     ((equal 0 (get this-command 'state))
      (upcase-initials-region -p1 -p2)
      (put this-command 'state 1))
     ((equal 1  (get this-command 'state))
      (upcase-region -p1 -p2)
      (put this-command 'state 2))
     ((equal 2 (get this-command 'state))
      (downcase-region -p1 -p2)
      (put this-command 'state 0)))))

(map! :g "M-c" #'cycle-letter-case)
;; case cycle:1 ends here

;; [[file:config.org::*numbers commas][numbers commas:2]]
(use-package! commify)
  ;; :chords (",," . commify-toggle))
;; numbers commas:2 ends here

;; [[file:config.org::*latex][latex:2]]
(use-package! org-latex-impatient
  :after org
  :hook (org-mode . org-latex-impatient-mode)
  :custom
  ( org-latex-impatient-tex2svg-bin "/home/venky/.asdf/shims/tex2svg")
  )
;; latex:2 ends here

;; Force kill buffer




;; [[file:config.org::*Force kill buffer][Force kill buffer:1]]
(defun vi/force-kill-buffer ()
  (interactive)
  (let (kill-buffer-hook kill-buffer-query-functions)
    (kill-buffer)))
;; Force kill buffer:1 ends here

;; [[file:config.org::*atomic chrome][atomic chrome:2]]
(use-package! atomic-chrome
  :after-call doom-first-file-hook
  :custom
  (atomic-chrome-default-major-mode 'python-mode)
  (atomic-chrome-url-major-mode-alist
   '(("\\.ipynb$" . python-mode))
   )
  ;; (atomic-chrome-extension-type-list '(atomic-chrome))
  (atomic-chrome-buffer-open-style 'full)

  :config
  (atomic-chrome-start-server)
  )
;; atomic chrome:2 ends here



;; Turn on gif-screencast to initiate these bindings


;; [[file:config.org::*gif screencast][gif screencast:2]]
(use-package! gif-screencast
  :bind (:map gif-screencast-mode-map
         (("<f8>" . #'gif-screencast-stop)
          ("<f9>" . #'gif-screencast-toggle-pause)))
  )
;; gif screencast:2 ends here

;; [[file:config.org::*Keycast][Keycast:2]]
(use-package! keycast
  :commands (keycast-mode)
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))
  )
(after! (keycast doom-modeline)
  ;; based on keycast-mode-line function
  (doom-modeline-def-segment keycast
    (and keycast-mode-line-window-predicate (keycast--format keycast-mode-line-format))
    )
  (doom-modeline-def-modeline 'vi/keycast
    '(bar buffer-info keycast)
    '(minor-modes major-mode)
    )
  (add-hook! 'keycast-mode-hook (doom-modeline-set-modeline 'vi/keycast))
  )
;; (add-hook! keycast-mode-hook
;;   (add-to-list 'global-mode-string '("" keycast-mode-line)))
;; Keycast:2 ends here

;; [[file:config.org::*zotxt (zotero + emacs)][zotxt (zotero + emacs):2]]
(use-package! zotxt
  :hook (org-mode . org-zotxt-mode)
  :commands (org-zotxt-noter org-zotxt-mode)
  )
;; zotxt (zotero + emacs):2 ends here

;; [[file:config.org::*org-noter][org-noter:2]]
(use-package! org-noter
  :commands (org-noter)
  :custom
  (setq org-noter-always-create-frame nil
        org-noter-separate-notes-from-heading t
        org-noter-default-heading-title "Page $p$"
        org-noter-auto-save-last-location t
        org-noter-notes-search-path '("~/org")
        org-noter-separate-notes-from-heading t
        org-noter-doc-property-in-notes t
        )
  )
;; org-noter:2 ends here

;; Rotation

;; [[file:config.org::*Rotation][Rotation:1]]
(after! pdf-view
  ;; https://emacs.stackexchange.com/questions/24738/how-do-i-rotate-pages-in-pdf-tools/24766#24766
  (defun pdf-view--rotate (&optional counterclockwise-p page-p)
    "Rotate PDF 90 degrees.  Requires pdftk to work.\n
Clockwise rotation is the default; set COUNTERCLOCKWISE-P to
non-nil for the other direction.  Rotate the whole document by
default; set PAGE-P to non-nil to rotate only the current page.
\nWARNING: overwrites the original file, so be careful!"
    ;; error out when pdftk is not installed
    (if (null (executable-find "pdftk"))
        (error "Rotation requires pdftk")
      ;; only rotate in pdf-view-mode
      (when (eq major-mode 'pdf-view-mode)
        (let* ((rotate (if counterclockwise-p "left" "right"))
               (file   (format "\"%s\"" (pdf-view-buffer-file-name)))
               (page   (pdf-view-current-page))
               (pages  (cond ((not page-p)                        ; whole doc?
                              (format "1-end%s" rotate))
                             ((= page 1)                          ; first page?
                              (format "%d%s %d-end"
                                      page rotate (1+ page)))
                             ((= page (pdf-info-number-of-pages)) ; last page?
                              (format "1-%d %d%s"
                                      (1- page) page rotate))
                             (t                                   ; interior page?
                              (format "1-%d %d%s %d-end"
                                      (1- page) page rotate (1+ page))))))
          ;; empty string if it worked
          (if (string= "" (shell-command-to-string
                           (format (concat "pdftk %s cat %s "
                                           "output %s.NEW "
                                           "&& mv %s.NEW %s")
                                   file pages file file file)))
              (pdf-view-revert-buffer nil t)
            (error "Rotation error!"))))))

  (defun pdf-view-rotate-clockwise (&optional arg)
    "Rotate PDF page 90 degrees clockwise.  With prefix ARG, rotate
entire document."
    (interactive "P")
    (pdf-view--rotate nil (not arg)))

  (defun pdf-view-rotate-counterclockwise (&optional arg)
    "Rotate PDF page 90 degrees counterclockwise.  With prefix ARG,
rotate entire document."
    (interactive "P")
    (pdf-view--rotate :counterclockwise (not arg)))

  (define-key pdf-view-mode-map (kbd "R") 'pdf-view-rotate-clockwise)

  )
;; Rotation:1 ends here

;; [[file:config.org::*detached][detached:2]]
(use-package! detached
  :after vterm
  :init
  (detached-init)
  :bind (;; Replace `async-shell-command' with `detached-shell-command'
          ([remap async-shell-command] . detached-shell-command)
          ;; Replace `compile' with `detached-compile'
          ([remap compile] . detached-compile)
          ([remap recompile] . detached-compile-recompile)
          ;; Replace built in completion of sessions with `consult'
          ([remap detached-open-session] . detached-consult-session))
  :custom ((detached-show-output-on-attach t)
            (detached-session-directory "/tmp")
            (detached-terminal-data-command system-type))

  :config
  (connection-local-set-profile-variables
    'remote-detached
    '((detached-session-directory . "/tmp")
       (detached-dtach-program . "dtach")))
  (connection-local-set-profiles
    '(:application tramp :protocol "ssh") 'remote-detached)
  :hook (vterm-mode . detached-vterm-mode)
  )
;; detached:2 ends here

;; dash


;; [[file:config.org::*dash][dash:1]]
(after! dash-docs
  ;; (dash-docs-install-docset "Python_3")
  (set-docsets! 'python-mode "Python 3")
  )
;; dash:1 ends here

;; hydra



;; [[file:config.org::*hydra][hydra:1]]
(pretty-hydra-define doc-hydra (:exit t)
  ("Reference"
   (("d" +lookup/in-docsets "Dash")
    ("D" devdocs-lookup "Devdocs")
    ("O" +lookup/online-select "Online"))
   "Jump"
    (("c" +lookup/documentation "Docstring")
    ("f" +lookup/definition "Definition")
    ("u" +lookup/references "Usages")
    ("i" +lookup/implementations "Impls")
    ("t" +lookup/type-definition "Type")
    ("F" +lookup/file "file"))
   ))
;; hydra:1 ends here

;; [[file:config.org::*Keyfreq][Keyfreq:2]]
(use-package! keyfreq
  :after-call doom-first-input-hook
  :custom
  (keyfreq-excluded-commands
   '(self-insert-command
     forward-char
     backward-char
     previous-line
     next-line))
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
  )
;; Keyfreq:2 ends here
