:DOC-CONFIG:
#+auto_tangle: nil
:END:

* org-mode
** srcblock:

#+begin_src ${1:emacs-lisp}
$0
#+end_src

** bashblock:

#+begin_src bash :results output :epilogue "echo \"\n\nexit_status: $?\"" :prologue "exec 2>&1"
$0
#+end_src

** sudoblock:

#+begin_src bash :results output :dir "/sudo::/" :epilogue "echo \"\n\nexit_status: $?\"" :prologue "exec 2>&1"
$0
#+end_src


** exampleblock:

#+begin_example
$0
#+end_example

** srcpackage:

#+begin_src emacs-lisp :tangle packages.el
(package! $0)
#+end_src

** srcpackage-github:

#+begin_src emacs-lisp :tangle packages.el
(package! $1 :recipe (:host github :repo "$0/$1"))
#+end_src

** docconfig :src:

#+begin_src org
:DOC-CONFIG:
#+startup: fold
#+property: header-args :comments both :mkdirp yes
:END:
#+end_src

** block:

#+begin ${1:title}
$0
#+end

* python-mode

** ipydb: Jupyter debugger :src:
#+begin_src python
from IPython.core.debugger import set_trace
set_trace()
#+end_src

** ipdb: ipdb debugger :src:

#+begin_src python
import ipdb
ipdb.set_trace()
#+end_src

** ein-script-cell: :src:

#+begin_src
%%script echo ${1:nope}
#+end_src

** ein-first-cell: :src:


#+begin_src python
%reload_ext autoreload
%autoreload 2

from IPython.core.interactiveshell import InteractiveShell

InteractiveShell.ast_node_interactivity = "all"
#+end_src

** ein-pd-display: :src:
#+begin_src python
with pd.option_context('display.max_rows', 100, 'display.max_columns', 10):
#+end_src

** ein-matplotlib: :src:


#+begin_src python
%matplotlib inline

import matplotlib as mpl

mpl.rcParams["figure.facecolor"] = "white"
mpl.rcParams["axes.facecolor"] = "white"
mpl.rcParams["savefig.facecolor"] = "white"
#+end_src

** jupyter-terminal-display: :src:indent_nil:

#+begin_src python
# Datatables
import polars as pr
pr.Config.set_tbl_width_chars(550).set_fmt_str_lengths(200).set_tbl_rows(100)
# set_utf8_tables() is broken in emacs sometimes?
# pr.Config.set_ascii_tables()
pr.DataFrame({"a": [1, 2, 3], "b": [3, 4, 5]})

from tqdm import tqdm
for i in tqdm(range(3)):
    pass
#+end_src

** jupyter-altair-terminal :src:indent_nil:


#+begin_src python
import altair as alt
import altair_viewer

def init_altair(port_number: int = 9999, server_name: str = "localhost") -> None:
    class EventProviderMock(altair_viewer._event_provider.EventProvider):
        @property
        def url(self) -> str:
            return f"http://{server_name}:{self.port}"

        def start(self, port=None, timeout=1, daemon=True):
            return super().start(port=port_number, timeout=timeout, daemon=daemon)

    altair_viewer._viewer.EventProvider = EventProviderMock

init_altair(35549)
alt.renderers.enable("altair_viewer")
alt.Chart(pr.DataFrame({"a": [1, 2, 3], "b": [3, 4, 5]}).to_pandas()).mark_bar()
#+end_src


** jupyter-altair-notebook :src:indent_nil:


#+begin_src python
import altair as alt
alt.Chart(pr.DataFrame({"a": [1, 2, 3], "b": [3, 4, 5]}).to_pandas()).mark_bar()
#+end_src


** jupyter-notebook-display: :src:indent_nil:


#+begin_src python
from IPython.display import display, HTML
display(HTML("<style>.container { width:70% !important; }</style>"))

import itables
def polars_repr_html(df, *args, **kwargs):
    return df.to_pandas()._repr_html_(*args, **kwargs)
def itables_init():
    itables.init_notebook_mode(all_interactive=True)
    pr.DataFrame._repr_html_ = polars_repr_html
itables_init()
pr.DataFrame({"a": [1, 2, 3], "b": [3, 4, 5]})

from tqdm.notebook import tqdm
for i in tqdm(range(3)):
    pass
#+end_src


* lisp-data-mode

.dir-locals.el files start in this mode

** dir-locals-readonly: :src:
#+begin_src emacs-lisp
((nil . (
         (buffer-read-only . t)
         (+format-with . :none)
         (require-final-newline . nil)
         (eval . (setq-hook! 'lsp-mode-hook +format-with-lsp nil))
         (eval . (remove-hook 'write-file-hooks 'delete-trailing-whitespace))
         )
      ))
#+end_src
** dir-locals-python-noformat: :src:

#+begin_src emacs-lisp
((python-mode . ((eval . (python-black-on-save-mode -1))
                 (+format-with . :none)
                 (require-final-newline . nil)
                 (eval . (remove-hook 'write-file-hooks 'delete-trailing-whitespace)))))
#+end_src


* yaml-mode

** mutagen-project-ml-west :src:

#+begin_src yaml
$1:
  alpha: "/home/venky/dev/$1"
  beta: "venky@${GCLOUD_HOST}:/home/venky/dev/$1"
#+end_src

* conf-unix-mode

** mypy-missing-import: :src:

#+begin_src toml
[mypy-$0.*]
ignore_missing_imports = true
#+end_src

* Default :global:

** yadm-if :src:

#+begin_src shell
{% if yadm.$1 == "$2" %}
$0
{% endif %}
#+end_src

** yadm-template :src:


#+begin_src shell
# WARNING: Do not edit this file.
# It was generated by processing {{ yadm.source }}

$0

# Local Variables:
# eval: (firestarter-mode)
# firestarter: "yadm alt"
# End:
#+end_src

** envsubst-firestarter :src:

#+begin_src shell
# WARNING: Do not edit this file.
# Generated from $ENVSUBST_SOURCE

$0

# Local Variables:
# eval: (firestarter-mode)
# firestarter: "ENVSUBST_SOURCE=%p envsubst < %f > %s"
# End:
#+end_src
