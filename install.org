:DOC-CONFIG:
#+property: header-args :mkdirp yes :comments both
#+property: header-args:bash :results output
#+auto_tangle: nil
:END:

* Yadm Classes

- personal
- personal_ubuntu
- personal_mac
- remote + debian


* problems

- what about debian!
  what about sudo


* coder ubuntu install script

https://orgmode.org/manual/Extracting-Source-Code.html

#+begin_src just :tangle install-coder-ubuntu :shebang #!/usr/bin/env -S just --justfile :comments no :tangle-mode (identity #o755)
# WARNING: Do not edit this file

set shell := ["bash", "-uc"]
set positional-arguments
just := 'just --unstable --justfile "' + justfile() + '"'

default:
    {{ just }} -f {{ justfile() }} install

WORKSPACE_DIR := "/workspaces/"
DOTFILES_DIR := WORKSPACE_DIR / "dotfiles"

_yadm:
    yadm clone {{ DOTFILES_DIR }} --no-bootstrap
    yadm checkout $HOME

HOME := env("HOME")
bootstrap := HOME / ".config/yadm/bootstrap"

install:
    test -d $HOME/.local/share/yadm/repo.git || {{ just }} _yadm
    -yadm config local.class remote
    yadm config --add local.class debian
    yadm alt

    -{{ bootstrap }} prezto
    -{{ bootstrap }} brew_bundle
    # matches ~/.zshcustom/pipx.zsh
    -PIPX_HOME=$HOME/.local/pipx  PIPX_BIN_DIR=$HOME/.local/bin {{ bootstrap }} pipx
    -{{ bootstrap }} zsh_login_shell
    -{{ bootstrap }} git-credential-manager
    -{{ bootstrap }} git_info
    # requires password
    # {{ bootstrap }} atuin_login
#+end_src



* Yadm dotfiles
** Get started

*** clone

gh auth login
gh repo clone indigoviolet/dotfiles

*** linux startup

#+begin_src shell :tangle ~/.config/yadm/install-linux.sh :shebang "#!/usr/bin/env bash" :noweb tangle
set -x
set -euo pipefail
<<install-homebrew>>
<<bootstrap-brew-deps>>
#+end_src


*** mac startup

#+begin_src shell :tangle ~/.config/yadm/install-darwin.sh :shebang "#!/usr/bin/env bash" :noweb tangle
set -x
set -euo pipefail
<<install-homebrew>>
<<bootstrap-brew-deps>>
#+end_src


*** install homebrew

#+begin_src shell :noweb-ref install-homebrew
command -v brew || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#+end_src

*** brew install deps

#+begin_src shell :noweb-ref bootstrap-brew-deps
brew install yadm just transcrypt
#+end_src


*** COMMENT GCP vm
- Run it on GCP like:

  ~gcloud compute ssh ... --command "bash -s" < get-start.sh~

  or better yet:

  Use ~gcpvm~ from indigoviolet/gcloud:

  ~./gcpvm --dotenv-filename deeplearning-1-vm ssh "bash -s" < get-start.sh~

#+begin_src shell :tangle ~/.config/yadm/run-start.sh :shebang "#!/usr/bin/env bash"
/bin/bash -c "$(curl -fsSL https://$GITHUB_PAT@raw.githubusercontent.com/indigoviolet/dotfiles/master/.config/yadm/start.sh)"
#+end_src



*** Get Brew

NONINTERACTIVE=1 only works if you have sudo access?
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"


<2023-01-30 Mon>
https://github.com/Homebrew/homebrew-core/issues/116841#issuecomment-1409812549
brew has to be pinned to older version for now!

recipes that break: fzf, direnv, micro, coreutils, abduco...
***


*** COMMENT Clone dotfiles

https://yadm.io/docs/getting_started

This will clone the repo files into $HOME (as a repo where the git directory
lives in ~.local/share/yadm/repo.git~)

#+begin_src shell :noweb-ref start.sh

# Note that this won't work on a single line: env var replacement happens before the command runs
# You can do
# $>    GITHUB_PAT=foo && (yadm clone ...)

yadm clone "https://oauth2:$GITHUB_PAT@github.com/indigoviolet/dotfiles.git" --no-bootstrap

read -p 'Set yadm local.class (<personal|remote>): ' yadmclass
yadm config local.class $yadmclass && yadm alt && yadm bootstrap
#+end_src

yadm config --add local.class <additional-class>
yadm config --get-all local.class

*** Transcrypt

We are using Transcrypt to encrypt some keys before checking in. Note that these
files are "##c.personal", so they only need to be encrypted on the "personal"
machine. For remote servers, use ssh forwarding instead.

See https://github.com/elasticdog/transcrypt.

Install with ~brew install transcrypt~

#+begin_src shell
## on local machine (where transcrypt is already configured)
yadm transcrypt --display

## or
yadm transcrypt -c aes-256-cbc -p '<Get password from bitwarden>'

## to see encrypted files
yadm transcrypt --list

## Flush credentials (may need --force)
yadm transcrypt -f
#+end_src

***** .gitattributes

Configures which files are encrypted

#+begin_src shell :tangle ~/.gitattributes
.ssh/id_rsa.pub\#\#c.personal filter=crypt diff=crypt merge=crypt
.ssh/id_rsa\#\#c.personal filter=crypt diff=crypt merge=crypt
.ssh/id_ed25519.pub\#\#c.personal filter=crypt diff=crypt merge=crypt
.ssh/id_ed25519\#\#c.personal filter=crypt diff=crypt merge=crypt
.config/TabNine/registration_key filter=crypt diff=crypt merge=crypt
.config/rclone/rclone.conf filter=crypt diff=crypt merge=crypt
#+end_src

*** COMMENT mutagen sync for dotfiles

It is convenient to use mutagen to sync dotfiles over instead of using ~yadm push~
and then ~yadm pull~.

But mutagen takes a static config and yadm's files are scattered all over. To work around this:

1. We use ~~/.config/yadm/mutagen.yml~ to describe a config where everything is ignored.
2. Exclusions are specified via a templated include file ~yadm_ls_files_for_mutagen.yml~
3. ~yadm_ls_files_for_mutagen.yml~ is written and templated in by ~just
   yadm_ls_files_for_mutagen~
4. A pre-commit config ensures that we run ~just yadm_ls_files_for_mutagen~ after commit

It may require a ~mutagen terminate~ and ~mutagen restart~ to pick up the new
config. You may also need a ~yadm alt~ on the remote machine to update any alt
files. (see ~just yadm_sync_restart~)

Note that this doesn't remove the need to clone the repo on the remote machine,
yadm still needs it.

- The remote machine's yadm repo will get changes due to the sync
- we cannot sync templated files (ie the outputs of the templating), and
  therefore we should not vc-track templated files
- ~yadm alt~ uses the repo to decide which files need templating; so we have to periodically update the repo like so:

  ~yadm fetch --all && yadm reset --hard origin/master~


** zsh secrets
Make ~~/.zsh_secrets~ if you need any secrets that aren't committed. It is sourced via ~secrets.zsh~

** Alt files

We use alt files to

1. change the file wholesale (eg. Brewfile)
2. template the file to have slightly different content (eg. zshrc)

Some files are only useful on a specific class, but we don't bother removing
these or hiding them. They are addressed at point of use - ie. if it is a
zshcustom file, we might use templates to include them correctly in zshrc.





* Issues:

- Homebrew segmentation fault
  https://github.com/Homebrew/homebrew-core/issues/116841#issuecomment-1409812549


* Mac

- Cmd+Shift+. to show hidden files
- VSCode: use Cmd+Shift+P to "Install 'code' command in PATH"



* Kinesis Advantage :ATTACH:
:PROPERTIES:
:ID:       84969743-6640-4c9d-bc73-5fab6ddc939d
:END:

https://kinesis-ergo.com/wp-content/uploads/kb500-qsg.pdf

- ~=m~ to switch to mac mode
- ~Program+\~ to switch off clicks
- Remapping: ~Prgrm+F12~ to start. Hit source, then destination to copy from source to destination
  + *Swap* ctrl and capslock
  + Copy alt to left shift
  + Copy win to key below X

- set repeat rate to 10cps Program-F9-F5

*** Extra info
:PROPERTIES:
:CREATED:  [2023-07-21 Fri 00:04]
:END:

#+begin_example
Progrm-Ctrl-F10   Reset keyboard memory

Progrm-Backslash  Toggle keyclick mode
Progrm-Hyphen     Toggle tones for caps lock, etc.
Progrm-F9-xx      Change repeat rate to xx
                    F1 .5 cps  F2  3 cps F3  5 cps  F4   7 cps  F5   10 cps  F6   15 cps
                    F7 20 cps  F8 30 cps F9 40 cps  F10 60 cps  F11 125 cps  F12 300 cps

Progrm-Ctrl-F5    Toggle Dvorak/Qwerty mode

Progrm-Shift-F6   Toggle shift as sticky modifier
Progrm-Ctrl-F6    Toggle control as sticky modifier
Progrm-Alt-F6     Toggle alt as sticky modifier

Progrm-F12        Enter/exit remapping mode

Progrm-F11        Enter/exit macro definition mode
Progrm-F7         Make macro pause for data / End entering macro data
Progrm-F8         Put a half-second delay into a macro
Progrm-F10        Disable/Enable all macros

Shift-Shift-F12   Report firmware version (press both shift keys)
#+end_example

*** Multimedia keys :ATTACH:

https://superuser.com/a/403765 & https://superuser.com/a/557689

~=n~ to turn on all multimedia keys




=F3 to toggle state of just F3


* TODO Mac OS X setup notes

  - yadm classes: personal, personal_mac (so that we can also do personal_ubuntu)
  - maccy* for clipboard editor
  - paperwm.spoon, hammerspoon -> needs some manual settings changes*
  - iterm2* + config*
  - mouse speed, keyboard repeat rate*
  - nerd fonts via brew cask (iosevka) -> should be in Brewfile
  - emacs-plus -> should be in Brewfile (but not options --with-dragon-icon --with-native-comp)
  - vscode settings config (sync against stable!)
  - lots of prompt stuff in prezto unnecessary - we're using starship
  - atuin login + import
  - yadm bootstrap
